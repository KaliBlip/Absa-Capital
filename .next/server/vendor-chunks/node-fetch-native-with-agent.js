/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/node-fetch-native-with-agent";
exports.ids = ["vendor-chunks/node-fetch-native-with-agent"];
exports.modules = {

/***/ "(rsc)/./node_modules/node-fetch-native-with-agent/dist/agent.cjs":
/*!******************************************************************!*\
  !*** ./node_modules/node-fetch-native-with-agent/dist/agent.cjs ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("var u=Object.defineProperty;var o=(e,t)=>u(e,\"name\",{value:t,configurable:!0});const http=__webpack_require__(/*! node:http */ \"node:http\"),https=__webpack_require__(/*! node:https */ \"node:https\"),index=__webpack_require__(/*! ./shared/node-fetch-native-with-agent.df7e6bd6.cjs */ \"(rsc)/./node_modules/node-fetch-native-with-agent/dist/shared/node-fetch-native-with-agent.df7e6bd6.cjs\"),nodeFetchNativeWithAgent=__webpack_require__(/*! node-fetch-native-with-agent */ \"(rsc)/./node_modules/node-fetch-native-with-agent/lib/index.cjs\");__webpack_require__(/*! node:assert */ \"node:assert\"),__webpack_require__(/*! node:net */ \"node:net\"),__webpack_require__(/*! node:stream */ \"node:stream\"),__webpack_require__(/*! node:buffer */ \"node:buffer\"),__webpack_require__(/*! node:util */ \"node:util\"),__webpack_require__(/*! node:querystring */ \"node:querystring\"),__webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\"),__webpack_require__(/*! node:events */ \"node:events\"),__webpack_require__(/*! ./shared/node-fetch-native-with-agent.61758d11.cjs */ \"(rsc)/./node_modules/node-fetch-native-with-agent/dist/shared/node-fetch-native-with-agent.61758d11.cjs\"),__webpack_require__(/*! node:tls */ \"node:tls\"),__webpack_require__(/*! node:zlib */ \"node:zlib\"),__webpack_require__(/*! node:perf_hooks */ \"node:perf_hooks\"),__webpack_require__(/*! node:util/types */ \"node:util/types\"),__webpack_require__(/*! node:os */ \"node:os\"),__webpack_require__(/*! node:url */ \"node:url\"),__webpack_require__(/*! node:async_hooks */ \"node:async_hooks\"),__webpack_require__(/*! node:console */ \"node:console\"),__webpack_require__(/*! string_decoder */ \"string_decoder\"),__webpack_require__(/*! node:worker_threads */ \"node:worker_threads\");var i=Object.defineProperty,r=o((e,t)=>i(e,\"name\",{value:t,configurable:!0}),\"r\");function createAgent(e,t={}){const n={rejectUnauthorized:t.rejectUnauthorized},c=e?.startsWith(\"https:\")?new https.Agent(n):new http.Agent,s=new index.Agent_1({connect:n});return{agent:c,dispatcher:s}}o(createAgent,\"createAgent\"),r(createAgent,\"createAgent\");function createFetch(e={}){const t=createAgent(void 0,e);return(n,c)=>nodeFetchNativeWithAgent.fetch(n,{...t,...c})}o(createFetch,\"createFetch\"),r(createFetch,\"createFetch\");const fetch=createFetch({});exports.createAgent=createAgent,exports.createFetch=createFetch,exports.fetch=fetch;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC1uYXRpdmUtd2l0aC1hZ2VudC9kaXN0L2FnZW50LmNqcyIsIm1hcHBpbmdzIjoiQUFBYSw0QkFBNEIseUJBQXlCLHdCQUF3QixFQUFFLFdBQVcsbUJBQU8sQ0FBQyw0QkFBVyxRQUFRLG1CQUFPLENBQUMsOEJBQVksUUFBUSxtQkFBTyxDQUFDLG1LQUFvRCwyQkFBMkIsbUJBQU8sQ0FBQyxxR0FBOEIsRUFBRSxtQkFBTyxDQUFDLGdDQUFhLEVBQUUsbUJBQU8sQ0FBQywwQkFBVSxFQUFFLG1CQUFPLENBQUMsZ0NBQWEsRUFBRSxtQkFBTyxDQUFDLGdDQUFhLEVBQUUsbUJBQU8sQ0FBQyw0QkFBVyxFQUFFLG1CQUFPLENBQUMsMENBQWtCLEVBQUUsbUJBQU8sQ0FBQywwREFBMEIsRUFBRSxtQkFBTyxDQUFDLGdDQUFhLEVBQUUsbUJBQU8sQ0FBQyxtS0FBb0QsRUFBRSxtQkFBTyxDQUFDLDBCQUFVLEVBQUUsbUJBQU8sQ0FBQyw0QkFBVyxFQUFFLG1CQUFPLENBQUMsd0NBQWlCLEVBQUUsbUJBQU8sQ0FBQyx3Q0FBaUIsRUFBRSxtQkFBTyxDQUFDLHdCQUFTLEVBQUUsbUJBQU8sQ0FBQywwQkFBVSxFQUFFLG1CQUFPLENBQUMsMENBQWtCLEVBQUUsbUJBQU8sQ0FBQyxrQ0FBYyxFQUFFLG1CQUFPLENBQUMsc0NBQWdCLEVBQUUsbUJBQU8sQ0FBQyxnREFBcUIsRUFBRSxtREFBbUQsd0JBQXdCLE9BQU8sMkJBQTJCLEVBQUUsU0FBUyx3Q0FBd0Msa0ZBQWtGLFVBQVUsRUFBRSxPQUFPLHNCQUFzQiwwREFBMEQseUJBQXlCLEVBQUUsOEJBQThCLCtDQUErQyxVQUFVLEVBQUUsMERBQTBELDBCQUEwQixFQUFFLG1CQUFtQixhQUFhLG1CQUFtQixhQUFhLGFBQWEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC1uYXRpdmUtd2l0aC1hZ2VudC9kaXN0L2FnZW50LmNqcz80NDJmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO3ZhciB1PU9iamVjdC5kZWZpbmVQcm9wZXJ0eTt2YXIgbz0oZSx0KT0+dShlLFwibmFtZVwiLHt2YWx1ZTp0LGNvbmZpZ3VyYWJsZTohMH0pO2NvbnN0IGh0dHA9cmVxdWlyZShcIm5vZGU6aHR0cFwiKSxodHRwcz1yZXF1aXJlKFwibm9kZTpodHRwc1wiKSxpbmRleD1yZXF1aXJlKFwiLi9zaGFyZWQvbm9kZS1mZXRjaC1uYXRpdmUtd2l0aC1hZ2VudC5kZjdlNmJkNi5janNcIiksbm9kZUZldGNoTmF0aXZlV2l0aEFnZW50PXJlcXVpcmUoXCJub2RlLWZldGNoLW5hdGl2ZS13aXRoLWFnZW50XCIpO3JlcXVpcmUoXCJub2RlOmFzc2VydFwiKSxyZXF1aXJlKFwibm9kZTpuZXRcIikscmVxdWlyZShcIm5vZGU6c3RyZWFtXCIpLHJlcXVpcmUoXCJub2RlOmJ1ZmZlclwiKSxyZXF1aXJlKFwibm9kZTp1dGlsXCIpLHJlcXVpcmUoXCJub2RlOnF1ZXJ5c3RyaW5nXCIpLHJlcXVpcmUoXCJub2RlOmRpYWdub3N0aWNzX2NoYW5uZWxcIikscmVxdWlyZShcIm5vZGU6ZXZlbnRzXCIpLHJlcXVpcmUoXCIuL3NoYXJlZC9ub2RlLWZldGNoLW5hdGl2ZS13aXRoLWFnZW50LjYxNzU4ZDExLmNqc1wiKSxyZXF1aXJlKFwibm9kZTp0bHNcIikscmVxdWlyZShcIm5vZGU6emxpYlwiKSxyZXF1aXJlKFwibm9kZTpwZXJmX2hvb2tzXCIpLHJlcXVpcmUoXCJub2RlOnV0aWwvdHlwZXNcIikscmVxdWlyZShcIm5vZGU6b3NcIikscmVxdWlyZShcIm5vZGU6dXJsXCIpLHJlcXVpcmUoXCJub2RlOmFzeW5jX2hvb2tzXCIpLHJlcXVpcmUoXCJub2RlOmNvbnNvbGVcIikscmVxdWlyZShcInN0cmluZ19kZWNvZGVyXCIpLHJlcXVpcmUoXCJub2RlOndvcmtlcl90aHJlYWRzXCIpO3ZhciBpPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSxyPW8oKGUsdCk9PmkoZSxcIm5hbWVcIix7dmFsdWU6dCxjb25maWd1cmFibGU6ITB9KSxcInJcIik7ZnVuY3Rpb24gY3JlYXRlQWdlbnQoZSx0PXt9KXtjb25zdCBuPXtyZWplY3RVbmF1dGhvcml6ZWQ6dC5yZWplY3RVbmF1dGhvcml6ZWR9LGM9ZT8uc3RhcnRzV2l0aChcImh0dHBzOlwiKT9uZXcgaHR0cHMuQWdlbnQobik6bmV3IGh0dHAuQWdlbnQscz1uZXcgaW5kZXguQWdlbnRfMSh7Y29ubmVjdDpufSk7cmV0dXJue2FnZW50OmMsZGlzcGF0Y2hlcjpzfX1vKGNyZWF0ZUFnZW50LFwiY3JlYXRlQWdlbnRcIikscihjcmVhdGVBZ2VudCxcImNyZWF0ZUFnZW50XCIpO2Z1bmN0aW9uIGNyZWF0ZUZldGNoKGU9e30pe2NvbnN0IHQ9Y3JlYXRlQWdlbnQodm9pZCAwLGUpO3JldHVybihuLGMpPT5ub2RlRmV0Y2hOYXRpdmVXaXRoQWdlbnQuZmV0Y2gobix7Li4udCwuLi5jfSl9byhjcmVhdGVGZXRjaCxcImNyZWF0ZUZldGNoXCIpLHIoY3JlYXRlRmV0Y2gsXCJjcmVhdGVGZXRjaFwiKTtjb25zdCBmZXRjaD1jcmVhdGVGZXRjaCh7fSk7ZXhwb3J0cy5jcmVhdGVBZ2VudD1jcmVhdGVBZ2VudCxleHBvcnRzLmNyZWF0ZUZldGNoPWNyZWF0ZUZldGNoLGV4cG9ydHMuZmV0Y2g9ZmV0Y2g7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native-with-agent/dist/agent.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch-native-with-agent/dist/chunks/multipart-parser.cjs":
/*!************************************************************************************!*\
  !*** ./node_modules/node-fetch-native-with-agent/dist/chunks/multipart-parser.cjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("var y=Object.defineProperty;var c=(R,o)=>y(R,\"name\",{value:o,configurable:!0});__webpack_require__(/*! node:fs */ \"node:fs\"),__webpack_require__(/*! node:path */ \"node:path\");const node=__webpack_require__(/*! ../node.cjs */ \"(rsc)/./node_modules/node-fetch-native-with-agent/dist/node.cjs\");__webpack_require__(/*! node:http */ \"node:http\"),__webpack_require__(/*! node:https */ \"node:https\"),__webpack_require__(/*! node:zlib */ \"node:zlib\"),__webpack_require__(/*! node:stream */ \"node:stream\"),__webpack_require__(/*! node:buffer */ \"node:buffer\"),__webpack_require__(/*! node:util */ \"node:util\"),__webpack_require__(/*! ../shared/node-fetch-native-with-agent.61758d11.cjs */ \"(rsc)/./node_modules/node-fetch-native-with-agent/dist/shared/node-fetch-native-with-agent.61758d11.cjs\"),__webpack_require__(/*! node:url */ \"node:url\"),__webpack_require__(/*! node:net */ \"node:net\");let s=0;const S={START_BOUNDARY:s++,HEADER_FIELD_START:s++,HEADER_FIELD:s++,HEADER_VALUE_START:s++,HEADER_VALUE:s++,HEADER_VALUE_ALMOST_DONE:s++,HEADERS_ALMOST_DONE:s++,PART_DATA_START:s++,PART_DATA:s++,END:s++};let f=1;const F={PART_BOUNDARY:f,LAST_BOUNDARY:f*=2},LF=10,CR=13,SPACE=32,HYPHEN=45,COLON=58,A=97,Z=122,lower=c(R=>R|32,\"lower\"),noop=c(()=>{},\"noop\"),O=class O{constructor(o){this.index=0,this.flags=0,this.onHeaderEnd=noop,this.onHeaderField=noop,this.onHeadersEnd=noop,this.onHeaderValue=noop,this.onPartBegin=noop,this.onPartData=noop,this.onPartEnd=noop,this.boundaryChars={},o=`\\r\n--`+o;const t=new Uint8Array(o.length);for(let n=0;n<o.length;n++)t[n]=o.charCodeAt(n),this.boundaryChars[t[n]]=!0;this.boundary=t,this.lookbehind=new Uint8Array(this.boundary.length+8),this.state=S.START_BOUNDARY}write(o){let t=0;const n=o.length;let E=this.index,{lookbehind:l,boundary:h,boundaryChars:H,index:e,state:a,flags:d}=this;const b=this.boundary.length,g=b-1,m=o.length;let r,P;const u=c(D=>{this[D+\"Mark\"]=t},\"mark\"),i=c(D=>{delete this[D+\"Mark\"]},\"clear\"),T=c((D,p,_,N)=>{(p===void 0||p!==_)&&this[D](N&&N.subarray(p,_))},\"callback\"),L=c((D,p)=>{const _=D+\"Mark\";_ in this&&(p?(T(D,this[_],t,o),delete this[_]):(T(D,this[_],o.length,o),this[_]=0))},\"dataCallback\");for(t=0;t<n;t++)switch(r=o[t],a){case S.START_BOUNDARY:if(e===h.length-2){if(r===HYPHEN)d|=F.LAST_BOUNDARY;else if(r!==CR)return;e++;break}else if(e-1===h.length-2){if(d&F.LAST_BOUNDARY&&r===HYPHEN)a=S.END,d=0;else if(!(d&F.LAST_BOUNDARY)&&r===LF)e=0,T(\"onPartBegin\"),a=S.HEADER_FIELD_START;else return;break}r!==h[e+2]&&(e=-2),r===h[e+2]&&e++;break;case S.HEADER_FIELD_START:a=S.HEADER_FIELD,u(\"onHeaderField\"),e=0;case S.HEADER_FIELD:if(r===CR){i(\"onHeaderField\"),a=S.HEADERS_ALMOST_DONE;break}if(e++,r===HYPHEN)break;if(r===COLON){if(e===1)return;L(\"onHeaderField\",!0),a=S.HEADER_VALUE_START;break}if(P=lower(r),P<A||P>Z)return;break;case S.HEADER_VALUE_START:if(r===SPACE)break;u(\"onHeaderValue\"),a=S.HEADER_VALUE;case S.HEADER_VALUE:r===CR&&(L(\"onHeaderValue\",!0),T(\"onHeaderEnd\"),a=S.HEADER_VALUE_ALMOST_DONE);break;case S.HEADER_VALUE_ALMOST_DONE:if(r!==LF)return;a=S.HEADER_FIELD_START;break;case S.HEADERS_ALMOST_DONE:if(r!==LF)return;T(\"onHeadersEnd\"),a=S.PART_DATA_START;break;case S.PART_DATA_START:a=S.PART_DATA,u(\"onPartData\");case S.PART_DATA:if(E=e,e===0){for(t+=g;t<m&&!(o[t]in H);)t+=b;t-=g,r=o[t]}if(e<h.length)h[e]===r?(e===0&&L(\"onPartData\",!0),e++):e=0;else if(e===h.length)e++,r===CR?d|=F.PART_BOUNDARY:r===HYPHEN?d|=F.LAST_BOUNDARY:e=0;else if(e-1===h.length)if(d&F.PART_BOUNDARY){if(e=0,r===LF){d&=~F.PART_BOUNDARY,T(\"onPartEnd\"),T(\"onPartBegin\"),a=S.HEADER_FIELD_START;break}}else d&F.LAST_BOUNDARY&&r===HYPHEN?(T(\"onPartEnd\"),a=S.END,d=0):e=0;if(e>0)l[e-1]=r;else if(E>0){const D=new Uint8Array(l.buffer,l.byteOffset,l.byteLength);T(\"onPartData\",0,E,D),E=0,u(\"onPartData\"),t--}break;case S.END:break;default:throw new Error(`Unexpected state entered: ${a}`)}L(\"onHeaderField\"),L(\"onHeaderValue\"),L(\"onPartData\"),this.index=e,this.state=a,this.flags=d}end(){if(this.state===S.HEADER_FIELD_START&&this.index===0||this.state===S.PART_DATA&&this.index===this.boundary.length)this.onPartEnd();else if(this.state!==S.END)throw new Error(\"MultipartParser.end(): stream ended unexpectedly\")}};c(O,\"MultipartParser\");let MultipartParser=O;function _fileName(R){const o=R.match(/\\bfilename=(\"(.*?)\"|([^()<>@,;:\\\\\"/[\\]?={}\\s\\t]+))($|;\\s)/i);if(!o)return;const t=o[2]||o[3]||\"\";let n=t.slice(t.lastIndexOf(\"\\\\\")+1);return n=n.replace(/%22/g,'\"'),n=n.replace(/&#(\\d{4});/g,(E,l)=>String.fromCharCode(l)),n}c(_fileName,\"_fileName\");async function toFormData(R,o){if(!/multipart/i.test(o))throw new TypeError(\"Failed to fetch\");const t=o.match(/boundary=(?:\"([^\"]+)\"|([^;]+))/i);if(!t)throw new TypeError(\"no or bad content-type header, no multipart boundary\");const n=new MultipartParser(t[1]||t[2]);let E,l,h,H,e,a;const d=[],b=new node.FormData,g=c(i=>{h+=u.decode(i,{stream:!0})},\"onPartData\"),m=c(i=>{d.push(i)},\"appendToFile\"),r=c(()=>{const i=new node.File(d,a,{type:e});b.append(H,i)},\"appendFileToFormData\"),P=c(()=>{b.append(H,h)},\"appendEntryToFormData\"),u=new TextDecoder(\"utf-8\");u.decode(),n.onPartBegin=function(){n.onPartData=g,n.onPartEnd=P,E=\"\",l=\"\",h=\"\",H=\"\",e=\"\",a=null,d.length=0},n.onHeaderField=function(i){E+=u.decode(i,{stream:!0})},n.onHeaderValue=function(i){l+=u.decode(i,{stream:!0})},n.onHeaderEnd=function(){if(l+=u.decode(),E=E.toLowerCase(),E===\"content-disposition\"){const i=l.match(/\\bname=(\"([^\"]*)\"|([^()<>@,;:\\\\\"/[\\]?={}\\s\\t]+))/i);i&&(H=i[2]||i[3]||\"\"),a=_fileName(l),a&&(n.onPartData=m,n.onPartEnd=r)}else E===\"content-type\"&&(e=l);l=\"\",E=\"\"};for await(const i of R)n.write(i);return n.end(),b}c(toFormData,\"toFormData\"),exports.toFormData=toFormData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native-with-agent/dist/chunks/multipart-parser.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch-native-with-agent/dist/index.cjs":
/*!******************************************************************!*\
  !*** ./node_modules/node-fetch-native-with-agent/dist/index.cjs ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("var i=Object.defineProperty;var l=(r,t)=>i(r,\"name\",{value:t,configurable:!0});Object.defineProperty(exports, \"__esModule\", ({value:!0}));const node=__webpack_require__(/*! ./node.cjs */ \"(rsc)/./node_modules/node-fetch-native-with-agent/dist/node.cjs\");__webpack_require__(/*! node:http */ \"node:http\"),__webpack_require__(/*! node:https */ \"node:https\"),__webpack_require__(/*! node:zlib */ \"node:zlib\"),__webpack_require__(/*! node:stream */ \"node:stream\"),__webpack_require__(/*! node:buffer */ \"node:buffer\"),__webpack_require__(/*! node:util */ \"node:util\"),__webpack_require__(/*! ./shared/node-fetch-native-with-agent.61758d11.cjs */ \"(rsc)/./node_modules/node-fetch-native-with-agent/dist/shared/node-fetch-native-with-agent.61758d11.cjs\"),__webpack_require__(/*! node:url */ \"node:url\"),__webpack_require__(/*! node:net */ \"node:net\"),__webpack_require__(/*! node:fs */ \"node:fs\"),__webpack_require__(/*! node:path */ \"node:path\");var s=Object.defineProperty,e=l((r,t)=>s(r,\"name\",{value:t,configurable:!0}),\"e\");const o=!!globalThis.process?.env?.FORCE_NODE_FETCH;function p(){return!o&&globalThis.fetch?globalThis.fetch:node.fetch}l(p,\"p\"),e(p,\"_getFetch\");const fetch=p(),Blob=!o&&globalThis.Blob||node.Blob,File=!o&&globalThis.File||node.File,FormData=!o&&globalThis.FormData||node.FormData,Headers=!o&&globalThis.Headers||node.Headers,Request=!o&&globalThis.Request||node.Request,Response=!o&&globalThis.Response||node.Response,AbortController=!o&&globalThis.AbortController||node.AbortController;exports.AbortError=node.AbortError,exports.FetchError=node.FetchError,exports.blobFrom=node.blobFrom,exports.blobFromSync=node.blobFromSync,exports.fileFrom=node.fileFrom,exports.fileFromSync=node.fileFromSync,exports.isRedirect=node.isRedirect,exports.AbortController=AbortController,exports.Blob=Blob,exports.File=File,exports.FormData=FormData,exports.Headers=Headers,exports.Request=Request,exports.Response=Response,exports[\"default\"]=fetch,exports.fetch=fetch;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC1uYXRpdmUtd2l0aC1hZ2VudC9kaXN0L2luZGV4LmNqcyIsIm1hcHBpbmdzIjoiQUFBYSw0QkFBNEIseUJBQXlCLHdCQUF3QixFQUFFLDhDQUEyQyxDQUFDLFNBQVMsRUFBQyxDQUFDLFdBQVcsbUJBQU8sQ0FBQyxtRkFBWSxFQUFFLG1CQUFPLENBQUMsNEJBQVcsRUFBRSxtQkFBTyxDQUFDLDhCQUFZLEVBQUUsbUJBQU8sQ0FBQyw0QkFBVyxFQUFFLG1CQUFPLENBQUMsZ0NBQWEsRUFBRSxtQkFBTyxDQUFDLGdDQUFhLEVBQUUsbUJBQU8sQ0FBQyw0QkFBVyxFQUFFLG1CQUFPLENBQUMsbUtBQW9ELEVBQUUsbUJBQU8sQ0FBQywwQkFBVSxFQUFFLG1CQUFPLENBQUMsMEJBQVUsRUFBRSxtQkFBTyxDQUFDLHdCQUFTLEVBQUUsbUJBQU8sQ0FBQyw0QkFBVyxFQUFFLG1EQUFtRCx3QkFBd0IsT0FBTyxvREFBb0QsYUFBYSx1REFBdUQsMEJBQTBCLHVWQUF1VixrQkFBa0IsaUJBQWlCLGtCQUFrQixpQkFBaUIsZ0JBQWdCLGVBQWUsb0JBQW9CLG1CQUFtQixnQkFBZ0IsZUFBZSxvQkFBb0IsbUJBQW1CLGtCQUFrQixpQkFBaUIsdUJBQXVCLGlCQUFpQixZQUFZLE1BQU0sWUFBWSxNQUFNLGdCQUFnQixVQUFVLGVBQWUsU0FBUyxlQUFlLFNBQVMsZ0JBQWdCLFVBQVUsa0JBQWUsT0FBTyxhQUFhIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gtbmF0aXZlLXdpdGgtYWdlbnQvZGlzdC9pbmRleC5janM/OTlmMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjt2YXIgaT1PYmplY3QuZGVmaW5lUHJvcGVydHk7dmFyIGw9KHIsdCk9PmkocixcIm5hbWVcIix7dmFsdWU6dCxjb25maWd1cmFibGU6ITB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtjb25zdCBub2RlPXJlcXVpcmUoXCIuL25vZGUuY2pzXCIpO3JlcXVpcmUoXCJub2RlOmh0dHBcIikscmVxdWlyZShcIm5vZGU6aHR0cHNcIikscmVxdWlyZShcIm5vZGU6emxpYlwiKSxyZXF1aXJlKFwibm9kZTpzdHJlYW1cIikscmVxdWlyZShcIm5vZGU6YnVmZmVyXCIpLHJlcXVpcmUoXCJub2RlOnV0aWxcIikscmVxdWlyZShcIi4vc2hhcmVkL25vZGUtZmV0Y2gtbmF0aXZlLXdpdGgtYWdlbnQuNjE3NThkMTEuY2pzXCIpLHJlcXVpcmUoXCJub2RlOnVybFwiKSxyZXF1aXJlKFwibm9kZTpuZXRcIikscmVxdWlyZShcIm5vZGU6ZnNcIikscmVxdWlyZShcIm5vZGU6cGF0aFwiKTt2YXIgcz1PYmplY3QuZGVmaW5lUHJvcGVydHksZT1sKChyLHQpPT5zKHIsXCJuYW1lXCIse3ZhbHVlOnQsY29uZmlndXJhYmxlOiEwfSksXCJlXCIpO2NvbnN0IG89ISFnbG9iYWxUaGlzLnByb2Nlc3M/LmVudj8uRk9SQ0VfTk9ERV9GRVRDSDtmdW5jdGlvbiBwKCl7cmV0dXJuIW8mJmdsb2JhbFRoaXMuZmV0Y2g/Z2xvYmFsVGhpcy5mZXRjaDpub2RlLmZldGNofWwocCxcInBcIiksZShwLFwiX2dldEZldGNoXCIpO2NvbnN0IGZldGNoPXAoKSxCbG9iPSFvJiZnbG9iYWxUaGlzLkJsb2J8fG5vZGUuQmxvYixGaWxlPSFvJiZnbG9iYWxUaGlzLkZpbGV8fG5vZGUuRmlsZSxGb3JtRGF0YT0hbyYmZ2xvYmFsVGhpcy5Gb3JtRGF0YXx8bm9kZS5Gb3JtRGF0YSxIZWFkZXJzPSFvJiZnbG9iYWxUaGlzLkhlYWRlcnN8fG5vZGUuSGVhZGVycyxSZXF1ZXN0PSFvJiZnbG9iYWxUaGlzLlJlcXVlc3R8fG5vZGUuUmVxdWVzdCxSZXNwb25zZT0hbyYmZ2xvYmFsVGhpcy5SZXNwb25zZXx8bm9kZS5SZXNwb25zZSxBYm9ydENvbnRyb2xsZXI9IW8mJmdsb2JhbFRoaXMuQWJvcnRDb250cm9sbGVyfHxub2RlLkFib3J0Q29udHJvbGxlcjtleHBvcnRzLkFib3J0RXJyb3I9bm9kZS5BYm9ydEVycm9yLGV4cG9ydHMuRmV0Y2hFcnJvcj1ub2RlLkZldGNoRXJyb3IsZXhwb3J0cy5ibG9iRnJvbT1ub2RlLmJsb2JGcm9tLGV4cG9ydHMuYmxvYkZyb21TeW5jPW5vZGUuYmxvYkZyb21TeW5jLGV4cG9ydHMuZmlsZUZyb209bm9kZS5maWxlRnJvbSxleHBvcnRzLmZpbGVGcm9tU3luYz1ub2RlLmZpbGVGcm9tU3luYyxleHBvcnRzLmlzUmVkaXJlY3Q9bm9kZS5pc1JlZGlyZWN0LGV4cG9ydHMuQWJvcnRDb250cm9sbGVyPUFib3J0Q29udHJvbGxlcixleHBvcnRzLkJsb2I9QmxvYixleHBvcnRzLkZpbGU9RmlsZSxleHBvcnRzLkZvcm1EYXRhPUZvcm1EYXRhLGV4cG9ydHMuSGVhZGVycz1IZWFkZXJzLGV4cG9ydHMuUmVxdWVzdD1SZXF1ZXN0LGV4cG9ydHMuUmVzcG9uc2U9UmVzcG9uc2UsZXhwb3J0cy5kZWZhdWx0PWZldGNoLGV4cG9ydHMuZmV0Y2g9ZmV0Y2g7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native-with-agent/dist/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch-native-with-agent/dist/node.cjs":
/*!*****************************************************************!*\
  !*** ./node_modules/node-fetch-native-with-agent/dist/node.cjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("var ms=Object.defineProperty;var u=(c,l)=>ms(c,\"name\",{value:l,configurable:!0});var Po=(c,l,d)=>{if(!l.has(c))throw TypeError(\"Cannot \"+d)};var D=(c,l,d)=>(Po(c,l,\"read from private field\"),d?d.call(c):l.get(c)),ye=(c,l,d)=>{if(l.has(c))throw TypeError(\"Cannot add the same private member more than once\");l instanceof WeakSet?l.add(c):l.set(c,d)},ne=(c,l,d,y)=>(Po(c,l,\"write to private field\"),y?y.call(c,d):l.set(c,d),d);var Pe,bt,ot,Zt,Ue,mt,yt,gt,oe,_t,Me,xe,St;Object.defineProperty(exports, \"__esModule\", ({value:!0}));const http=__webpack_require__(/*! node:http */ \"node:http\"),https=__webpack_require__(/*! node:https */ \"node:https\"),zlib=__webpack_require__(/*! node:zlib */ \"node:zlib\"),Stream=__webpack_require__(/*! node:stream */ \"node:stream\"),require$$6=__webpack_require__(/*! node:buffer */ \"node:buffer\"),require$$0=__webpack_require__(/*! node:util */ \"node:util\"),_commonjsHelpers=__webpack_require__(/*! ./shared/node-fetch-native-with-agent.61758d11.cjs */ \"(rsc)/./node_modules/node-fetch-native-with-agent/dist/shared/node-fetch-native-with-agent.61758d11.cjs\"),require$$1=__webpack_require__(/*! node:url */ \"node:url\"),require$$4=__webpack_require__(/*! node:net */ \"node:net\"),node_fs=__webpack_require__(/*! node:fs */ \"node:fs\"),node_path=__webpack_require__(/*! node:path */ \"node:path\");function _interopDefaultCompat(c){return c&&typeof c==\"object\"&&\"default\"in c?c.default:c}u(_interopDefaultCompat,\"_interopDefaultCompat\");const http__default=_interopDefaultCompat(http),https__default=_interopDefaultCompat(https),zlib__default=_interopDefaultCompat(zlib),Stream__default=_interopDefaultCompat(Stream);function dataUriToBuffer(c){if(!/^data:/i.test(c))throw new TypeError('`uri` does not appear to be a Data URI (must begin with \"data:\")');c=c.replace(/\\r?\\n/g,\"\");const l=c.indexOf(\",\");if(l===-1||l<=4)throw new TypeError(\"malformed data: URI\");const d=c.substring(5,l).split(\";\");let y=\"\",b=!1;const R=d[0]||\"text/plain\";let w=R;for(let F=1;F<d.length;F++)d[F]===\"base64\"?b=!0:d[F]&&(w+=`;${d[F]}`,d[F].indexOf(\"charset=\")===0&&(y=d[F].substring(8)));!d[0]&&!y.length&&(w+=\";charset=US-ASCII\",y=\"US-ASCII\");const v=b?\"base64\":\"ascii\",I=unescape(c.substring(l+1)),B=Buffer.from(I,v);return B.type=R,B.typeFull=w,B.charset=y,B}u(dataUriToBuffer,\"dataUriToBuffer\");var ponyfill_es2018={exports:{}};/**\n * @license\n * web-streams-polyfill v3.3.3\n * Copyright 2024 Mattias Buelens, Diwank Singh Tomer and other contributors.\n * This code is released under the MIT license.\n * SPDX-License-Identifier: MIT\n */var hasRequiredPonyfill_es2018;function requirePonyfill_es2018(){return hasRequiredPonyfill_es2018||(hasRequiredPonyfill_es2018=1,function(c,l){(function(d,y){y(l)})(_commonjsHelpers.commonjsGlobal,function(d){function y(){}u(y,\"noop\");function b(n){return typeof n==\"object\"&&n!==null||typeof n==\"function\"}u(b,\"typeIsObject\");const R=y;function w(n,o){try{Object.defineProperty(n,\"name\",{value:o,configurable:!0})}catch{}}u(w,\"setFunctionName\");const v=Promise,I=Promise.prototype.then,B=Promise.reject.bind(v);function F(n){return new v(n)}u(F,\"newPromise\");function k(n){return F(o=>o(n))}u(k,\"promiseResolvedWith\");function T(n){return B(n)}u(T,\"promiseRejectedWith\");function $(n,o,a){return I.call(n,o,a)}u($,\"PerformPromiseThen\");function E(n,o,a){$($(n,o,a),void 0,R)}u(E,\"uponPromise\");function K(n,o){E(n,o)}u(K,\"uponFulfillment\");function U(n,o){E(n,void 0,o)}u(U,\"uponRejection\");function N(n,o,a){return $(n,o,a)}u(N,\"transformPromiseWith\");function J(n){$(n,void 0,R)}u(J,\"setPromiseIsHandledToTrue\");let ge=u(n=>{if(typeof queueMicrotask==\"function\")ge=queueMicrotask;else{const o=k(void 0);ge=u(a=>$(o,a),\"_queueMicrotask\")}return ge(n)},\"_queueMicrotask\");function M(n,o,a){if(typeof n!=\"function\")throw new TypeError(\"Argument is not a function\");return Function.prototype.apply.call(n,o,a)}u(M,\"reflectCall\");function H(n,o,a){try{return k(M(n,o,a))}catch(p){return T(p)}}u(H,\"promiseCall\");const G=16384,Dr=class Dr{constructor(){this._cursor=0,this._size=0,this._front={_elements:[],_next:void 0},this._back=this._front,this._cursor=0,this._size=0}get length(){return this._size}push(o){const a=this._back;let p=a;a._elements.length===G-1&&(p={_elements:[],_next:void 0}),a._elements.push(o),p!==a&&(this._back=p,a._next=p),++this._size}shift(){const o=this._front;let a=o;const p=this._cursor;let g=p+1;const _=o._elements,S=_[p];return g===G&&(a=o._next,g=0),--this._size,this._cursor=g,o!==a&&(this._front=a),_[p]=void 0,S}forEach(o){let a=this._cursor,p=this._front,g=p._elements;for(;(a!==g.length||p._next!==void 0)&&!(a===g.length&&(p=p._next,g=p._elements,a=0,g.length===0));)o(g[a]),++a}peek(){const o=this._front,a=this._cursor;return o._elements[a]}};u(Dr,\"SimpleQueue\");let Q=Dr;const wt=Symbol(\"[[AbortSteps]]\"),un=Symbol(\"[[ErrorSteps]]\"),er=Symbol(\"[[CancelSteps]]\"),tr=Symbol(\"[[PullSteps]]\"),rr=Symbol(\"[[ReleaseSteps]]\");function ln(n,o){n._ownerReadableStream=o,o._reader=n,o._state===\"readable\"?or(n):o._state===\"closed\"?vo(n):fn(n,o._storedError)}u(ln,\"ReadableStreamReaderGenericInitialize\");function nr(n,o){const a=n._ownerReadableStream;return le(a,o)}u(nr,\"ReadableStreamReaderGenericCancel\");function _e(n){const o=n._ownerReadableStream;o._state===\"readable\"?ir(n,new TypeError(\"Reader was released and can no longer be used to monitor the stream's closedness\")):Eo(n,new TypeError(\"Reader was released and can no longer be used to monitor the stream's closedness\")),o._readableStreamController[rr](),o._reader=void 0,n._ownerReadableStream=void 0}u(_e,\"ReadableStreamReaderGenericRelease\");function Rt(n){return new TypeError(\"Cannot \"+n+\" a stream using a released reader\")}u(Rt,\"readerLockException\");function or(n){n._closedPromise=F((o,a)=>{n._closedPromise_resolve=o,n._closedPromise_reject=a})}u(or,\"defaultReaderClosedPromiseInitialize\");function fn(n,o){or(n),ir(n,o)}u(fn,\"defaultReaderClosedPromiseInitializeAsRejected\");function vo(n){or(n),cn(n)}u(vo,\"defaultReaderClosedPromiseInitializeAsResolved\");function ir(n,o){n._closedPromise_reject!==void 0&&(J(n._closedPromise),n._closedPromise_reject(o),n._closedPromise_resolve=void 0,n._closedPromise_reject=void 0)}u(ir,\"defaultReaderClosedPromiseReject\");function Eo(n,o){fn(n,o)}u(Eo,\"defaultReaderClosedPromiseResetToRejected\");function cn(n){n._closedPromise_resolve!==void 0&&(n._closedPromise_resolve(void 0),n._closedPromise_resolve=void 0,n._closedPromise_reject=void 0)}u(cn,\"defaultReaderClosedPromiseResolve\");const dn=Number.isFinite||function(n){return typeof n==\"number\"&&isFinite(n)},Ao=Math.trunc||function(n){return n<0?Math.ceil(n):Math.floor(n)};function Bo(n){return typeof n==\"object\"||typeof n==\"function\"}u(Bo,\"isDictionary\");function ce(n,o){if(n!==void 0&&!Bo(n))throw new TypeError(`${o} is not an object.`)}u(ce,\"assertDictionary\");function ee(n,o){if(typeof n!=\"function\")throw new TypeError(`${o} is not a function.`)}u(ee,\"assertFunction\");function qo(n){return typeof n==\"object\"&&n!==null||typeof n==\"function\"}u(qo,\"isObject\");function hn(n,o){if(!qo(n))throw new TypeError(`${o} is not an object.`)}u(hn,\"assertObject\");function Se(n,o,a){if(n===void 0)throw new TypeError(`Parameter ${o} is required in '${a}'.`)}u(Se,\"assertRequiredArgument\");function sr(n,o,a){if(n===void 0)throw new TypeError(`${o} is required in '${a}'.`)}u(sr,\"assertRequiredField\");function ar(n){return Number(n)}u(ar,\"convertUnrestrictedDouble\");function pn(n){return n===0?0:n}u(pn,\"censorNegativeZero\");function ko(n){return pn(Ao(n))}u(ko,\"integerPart\");function ur(n,o){const p=Number.MAX_SAFE_INTEGER;let g=Number(n);if(g=pn(g),!dn(g))throw new TypeError(`${o} is not a finite number`);if(g=ko(g),g<0||g>p)throw new TypeError(`${o} is outside the accepted range of 0 to ${p}, inclusive`);return!dn(g)||g===0?0:g}u(ur,\"convertUnsignedLongLongWithEnforceRange\");function lr(n,o){if(!qe(n))throw new TypeError(`${o} is not a ReadableStream.`)}u(lr,\"assertReadableStream\");function Ne(n){return new de(n)}u(Ne,\"AcquireReadableStreamDefaultReader\");function bn(n,o){n._reader._readRequests.push(o)}u(bn,\"ReadableStreamAddReadRequest\");function fr(n,o,a){const g=n._reader._readRequests.shift();a?g._closeSteps():g._chunkSteps(o)}u(fr,\"ReadableStreamFulfillReadRequest\");function Tt(n){return n._reader._readRequests.length}u(Tt,\"ReadableStreamGetNumReadRequests\");function mn(n){const o=n._reader;return!(o===void 0||!ve(o))}u(mn,\"ReadableStreamHasDefaultReader\");const Mr=class Mr{constructor(o){if(Se(o,1,\"ReadableStreamDefaultReader\"),lr(o,\"First parameter\"),ke(o))throw new TypeError(\"This stream has already been locked for exclusive reading by another reader\");ln(this,o),this._readRequests=new Q}get closed(){return ve(this)?this._closedPromise:T(Ct(\"closed\"))}cancel(o=void 0){return ve(this)?this._ownerReadableStream===void 0?T(Rt(\"cancel\")):nr(this,o):T(Ct(\"cancel\"))}read(){if(!ve(this))return T(Ct(\"read\"));if(this._ownerReadableStream===void 0)return T(Rt(\"read from\"));let o,a;const p=F((_,S)=>{o=_,a=S});return it(this,{_chunkSteps:_=>o({value:_,done:!1}),_closeSteps:()=>o({value:void 0,done:!0}),_errorSteps:_=>a(_)}),p}releaseLock(){if(!ve(this))throw Ct(\"releaseLock\");this._ownerReadableStream!==void 0&&Wo(this)}};u(Mr,\"ReadableStreamDefaultReader\");let de=Mr;Object.defineProperties(de.prototype,{cancel:{enumerable:!0},read:{enumerable:!0},releaseLock:{enumerable:!0},closed:{enumerable:!0}}),w(de.prototype.cancel,\"cancel\"),w(de.prototype.read,\"read\"),w(de.prototype.releaseLock,\"releaseLock\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(de.prototype,Symbol.toStringTag,{value:\"ReadableStreamDefaultReader\",configurable:!0});function ve(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_readRequests\")?!1:n instanceof de}u(ve,\"IsReadableStreamDefaultReader\");function it(n,o){const a=n._ownerReadableStream;a._disturbed=!0,a._state===\"closed\"?o._closeSteps():a._state===\"errored\"?o._errorSteps(a._storedError):a._readableStreamController[tr](o)}u(it,\"ReadableStreamDefaultReaderRead\");function Wo(n){_e(n);const o=new TypeError(\"Reader was released\");yn(n,o)}u(Wo,\"ReadableStreamDefaultReaderRelease\");function yn(n,o){const a=n._readRequests;n._readRequests=new Q,a.forEach(p=>{p._errorSteps(o)})}u(yn,\"ReadableStreamDefaultReaderErrorReadRequests\");function Ct(n){return new TypeError(`ReadableStreamDefaultReader.prototype.${n} can only be used on a ReadableStreamDefaultReader`)}u(Ct,\"defaultReaderBrandCheckException\");const Oo=Object.getPrototypeOf(Object.getPrototypeOf(async function*(){}).prototype),xr=class xr{constructor(o,a){this._ongoingPromise=void 0,this._isFinished=!1,this._reader=o,this._preventCancel=a}next(){const o=u(()=>this._nextSteps(),\"nextSteps\");return this._ongoingPromise=this._ongoingPromise?N(this._ongoingPromise,o,o):o(),this._ongoingPromise}return(o){const a=u(()=>this._returnSteps(o),\"returnSteps\");return this._ongoingPromise?N(this._ongoingPromise,a,a):a()}_nextSteps(){if(this._isFinished)return Promise.resolve({value:void 0,done:!0});const o=this._reader;let a,p;const g=F((S,C)=>{a=S,p=C});return it(o,{_chunkSteps:S=>{this._ongoingPromise=void 0,ge(()=>a({value:S,done:!1}))},_closeSteps:()=>{this._ongoingPromise=void 0,this._isFinished=!0,_e(o),a({value:void 0,done:!0})},_errorSteps:S=>{this._ongoingPromise=void 0,this._isFinished=!0,_e(o),p(S)}}),g}_returnSteps(o){if(this._isFinished)return Promise.resolve({value:o,done:!0});this._isFinished=!0;const a=this._reader;if(!this._preventCancel){const p=nr(a,o);return _e(a),N(p,()=>({value:o,done:!0}))}return _e(a),k({value:o,done:!0})}};u(xr,\"ReadableStreamAsyncIteratorImpl\");let Pt=xr;const gn={next(){return _n(this)?this._asyncIteratorImpl.next():T(Sn(\"next\"))},return(n){return _n(this)?this._asyncIteratorImpl.return(n):T(Sn(\"return\"))}};Object.setPrototypeOf(gn,Oo);function zo(n,o){const a=Ne(n),p=new Pt(a,o),g=Object.create(gn);return g._asyncIteratorImpl=p,g}u(zo,\"AcquireReadableStreamAsyncIterator\");function _n(n){if(!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_asyncIteratorImpl\"))return!1;try{return n._asyncIteratorImpl instanceof Pt}catch{return!1}}u(_n,\"IsReadableStreamAsyncIterator\");function Sn(n){return new TypeError(`ReadableStreamAsyncIterator.${n} can only be used on a ReadableSteamAsyncIterator`)}u(Sn,\"streamAsyncIteratorBrandCheckException\");const wn=Number.isNaN||function(n){return n!==n};var cr,dr,hr;function st(n){return n.slice()}u(st,\"CreateArrayFromList\");function Rn(n,o,a,p,g){new Uint8Array(n).set(new Uint8Array(a,p,g),o)}u(Rn,\"CopyDataBlockBytes\");let we=u(n=>(typeof n.transfer==\"function\"?we=u(o=>o.transfer(),\"TransferArrayBuffer\"):typeof structuredClone==\"function\"?we=u(o=>structuredClone(o,{transfer:[o]}),\"TransferArrayBuffer\"):we=u(o=>o,\"TransferArrayBuffer\"),we(n)),\"TransferArrayBuffer\"),Ee=u(n=>(typeof n.detached==\"boolean\"?Ee=u(o=>o.detached,\"IsDetachedBuffer\"):Ee=u(o=>o.byteLength===0,\"IsDetachedBuffer\"),Ee(n)),\"IsDetachedBuffer\");function Tn(n,o,a){if(n.slice)return n.slice(o,a);const p=a-o,g=new ArrayBuffer(p);return Rn(g,0,n,o,p),g}u(Tn,\"ArrayBufferSlice\");function vt(n,o){const a=n[o];if(a!=null){if(typeof a!=\"function\")throw new TypeError(`${String(o)} is not a function`);return a}}u(vt,\"GetMethod\");function Fo(n){const o={[Symbol.iterator]:()=>n.iterator},a=async function*(){return yield*o}(),p=a.next;return{iterator:a,nextMethod:p,done:!1}}u(Fo,\"CreateAsyncFromSyncIterator\");const pr=(hr=(cr=Symbol.asyncIterator)!==null&&cr!==void 0?cr:(dr=Symbol.for)===null||dr===void 0?void 0:dr.call(Symbol,\"Symbol.asyncIterator\"))!==null&&hr!==void 0?hr:\"@@asyncIterator\";function Cn(n,o=\"sync\",a){if(a===void 0)if(o===\"async\"){if(a=vt(n,pr),a===void 0){const _=vt(n,Symbol.iterator),S=Cn(n,\"sync\",_);return Fo(S)}}else a=vt(n,Symbol.iterator);if(a===void 0)throw new TypeError(\"The object is not iterable\");const p=M(a,n,[]);if(!b(p))throw new TypeError(\"The iterator method must return an object\");const g=p.next;return{iterator:p,nextMethod:g,done:!1}}u(Cn,\"GetIterator\");function Io(n){const o=M(n.nextMethod,n.iterator,[]);if(!b(o))throw new TypeError(\"The iterator.next() method must return an object\");return o}u(Io,\"IteratorNext\");function jo(n){return!!n.done}u(jo,\"IteratorComplete\");function Lo(n){return n.value}u(Lo,\"IteratorValue\");function $o(n){return!(typeof n!=\"number\"||wn(n)||n<0)}u($o,\"IsNonNegativeNumber\");function Pn(n){const o=Tn(n.buffer,n.byteOffset,n.byteOffset+n.byteLength);return new Uint8Array(o)}u(Pn,\"CloneAsUint8Array\");function br(n){const o=n._queue.shift();return n._queueTotalSize-=o.size,n._queueTotalSize<0&&(n._queueTotalSize=0),o.value}u(br,\"DequeueValue\");function mr(n,o,a){if(!$o(a)||a===1/0)throw new RangeError(\"Size must be a finite, non-NaN, non-negative number.\");n._queue.push({value:o,size:a}),n._queueTotalSize+=a}u(mr,\"EnqueueValueWithSize\");function Do(n){return n._queue.peek().value}u(Do,\"PeekQueueValue\");function Ae(n){n._queue=new Q,n._queueTotalSize=0}u(Ae,\"ResetQueue\");function vn(n){return n===DataView}u(vn,\"isDataViewConstructor\");function Mo(n){return vn(n.constructor)}u(Mo,\"isDataView\");function xo(n){return vn(n)?1:n.BYTES_PER_ELEMENT}u(xo,\"arrayBufferViewElementSize\");const Ur=class Ur{constructor(){throw new TypeError(\"Illegal constructor\")}get view(){if(!yr(this))throw Rr(\"view\");return this._view}respond(o){if(!yr(this))throw Rr(\"respond\");if(Se(o,1,\"respond\"),o=ur(o,\"First parameter\"),this._associatedReadableByteStreamController===void 0)throw new TypeError(\"This BYOB request has been invalidated\");if(Ee(this._view.buffer))throw new TypeError(\"The BYOB request's buffer has been detached and so cannot be used as a response\");qt(this._associatedReadableByteStreamController,o)}respondWithNewView(o){if(!yr(this))throw Rr(\"respondWithNewView\");if(Se(o,1,\"respondWithNewView\"),!ArrayBuffer.isView(o))throw new TypeError(\"You can only respond with array buffer views\");if(this._associatedReadableByteStreamController===void 0)throw new TypeError(\"This BYOB request has been invalidated\");if(Ee(o.buffer))throw new TypeError(\"The given view's buffer has been detached and so cannot be used as a response\");kt(this._associatedReadableByteStreamController,o)}};u(Ur,\"ReadableStreamBYOBRequest\");let Re=Ur;Object.defineProperties(Re.prototype,{respond:{enumerable:!0},respondWithNewView:{enumerable:!0},view:{enumerable:!0}}),w(Re.prototype.respond,\"respond\"),w(Re.prototype.respondWithNewView,\"respondWithNewView\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(Re.prototype,Symbol.toStringTag,{value:\"ReadableStreamBYOBRequest\",configurable:!0});const Nr=class Nr{constructor(){throw new TypeError(\"Illegal constructor\")}get byobRequest(){if(!Oe(this))throw ut(\"byobRequest\");return wr(this)}get desiredSize(){if(!Oe(this))throw ut(\"desiredSize\");return In(this)}close(){if(!Oe(this))throw ut(\"close\");if(this._closeRequested)throw new TypeError(\"The stream has already been closed; do not close it again!\");const o=this._controlledReadableByteStream._state;if(o!==\"readable\")throw new TypeError(`The stream (in ${o} state) is not in the readable state and cannot be closed`);at(this)}enqueue(o){if(!Oe(this))throw ut(\"enqueue\");if(Se(o,1,\"enqueue\"),!ArrayBuffer.isView(o))throw new TypeError(\"chunk must be an array buffer view\");if(o.byteLength===0)throw new TypeError(\"chunk must have non-zero byteLength\");if(o.buffer.byteLength===0)throw new TypeError(\"chunk's buffer must have non-zero byteLength\");if(this._closeRequested)throw new TypeError(\"stream is closed or draining\");const a=this._controlledReadableByteStream._state;if(a!==\"readable\")throw new TypeError(`The stream (in ${a} state) is not in the readable state and cannot be enqueued to`);Bt(this,o)}error(o=void 0){if(!Oe(this))throw ut(\"error\");te(this,o)}[er](o){En(this),Ae(this);const a=this._cancelAlgorithm(o);return At(this),a}[tr](o){const a=this._controlledReadableByteStream;if(this._queueTotalSize>0){Fn(this,o);return}const p=this._autoAllocateChunkSize;if(p!==void 0){let g;try{g=new ArrayBuffer(p)}catch(S){o._errorSteps(S);return}const _={buffer:g,bufferByteLength:p,byteOffset:0,byteLength:p,bytesFilled:0,minimumFill:1,elementSize:1,viewConstructor:Uint8Array,readerType:\"default\"};this._pendingPullIntos.push(_)}bn(a,o),ze(this)}[rr](){if(this._pendingPullIntos.length>0){const o=this._pendingPullIntos.peek();o.readerType=\"none\",this._pendingPullIntos=new Q,this._pendingPullIntos.push(o)}}};u(Nr,\"ReadableByteStreamController\");let ie=Nr;Object.defineProperties(ie.prototype,{close:{enumerable:!0},enqueue:{enumerable:!0},error:{enumerable:!0},byobRequest:{enumerable:!0},desiredSize:{enumerable:!0}}),w(ie.prototype.close,\"close\"),w(ie.prototype.enqueue,\"enqueue\"),w(ie.prototype.error,\"error\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(ie.prototype,Symbol.toStringTag,{value:\"ReadableByteStreamController\",configurable:!0});function Oe(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_controlledReadableByteStream\")?!1:n instanceof ie}u(Oe,\"IsReadableByteStreamController\");function yr(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_associatedReadableByteStreamController\")?!1:n instanceof Re}u(yr,\"IsReadableStreamBYOBRequest\");function ze(n){if(!Qo(n))return;if(n._pulling){n._pullAgain=!0;return}n._pulling=!0;const a=n._pullAlgorithm();E(a,()=>(n._pulling=!1,n._pullAgain&&(n._pullAgain=!1,ze(n)),null),p=>(te(n,p),null))}u(ze,\"ReadableByteStreamControllerCallPullIfNeeded\");function En(n){_r(n),n._pendingPullIntos=new Q}u(En,\"ReadableByteStreamControllerClearPendingPullIntos\");function gr(n,o){let a=!1;n._state===\"closed\"&&(a=!0);const p=An(o);o.readerType===\"default\"?fr(n,p,a):Xo(n,p,a)}u(gr,\"ReadableByteStreamControllerCommitPullIntoDescriptor\");function An(n){const o=n.bytesFilled,a=n.elementSize;return new n.viewConstructor(n.buffer,n.byteOffset,o/a)}u(An,\"ReadableByteStreamControllerConvertPullIntoDescriptor\");function Et(n,o,a,p){n._queue.push({buffer:o,byteOffset:a,byteLength:p}),n._queueTotalSize+=p}u(Et,\"ReadableByteStreamControllerEnqueueChunkToQueue\");function Bn(n,o,a,p){let g;try{g=Tn(o,a,a+p)}catch(_){throw te(n,_),_}Et(n,g,0,p)}u(Bn,\"ReadableByteStreamControllerEnqueueClonedChunkToQueue\");function qn(n,o){o.bytesFilled>0&&Bn(n,o.buffer,o.byteOffset,o.bytesFilled),He(n)}u(qn,\"ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue\");function kn(n,o){const a=Math.min(n._queueTotalSize,o.byteLength-o.bytesFilled),p=o.bytesFilled+a;let g=a,_=!1;const S=p%o.elementSize,C=p-S;C>=o.minimumFill&&(g=C-o.bytesFilled,_=!0);const q=n._queue;for(;g>0;){const P=q.peek(),W=Math.min(g,P.byteLength),O=o.byteOffset+o.bytesFilled;Rn(o.buffer,O,P.buffer,P.byteOffset,W),P.byteLength===W?q.shift():(P.byteOffset+=W,P.byteLength-=W),n._queueTotalSize-=W,Wn(n,W,o),g-=W}return _}u(kn,\"ReadableByteStreamControllerFillPullIntoDescriptorFromQueue\");function Wn(n,o,a){a.bytesFilled+=o}u(Wn,\"ReadableByteStreamControllerFillHeadPullIntoDescriptor\");function On(n){n._queueTotalSize===0&&n._closeRequested?(At(n),pt(n._controlledReadableByteStream)):ze(n)}u(On,\"ReadableByteStreamControllerHandleQueueDrain\");function _r(n){n._byobRequest!==null&&(n._byobRequest._associatedReadableByteStreamController=void 0,n._byobRequest._view=null,n._byobRequest=null)}u(_r,\"ReadableByteStreamControllerInvalidateBYOBRequest\");function Sr(n){for(;n._pendingPullIntos.length>0;){if(n._queueTotalSize===0)return;const o=n._pendingPullIntos.peek();kn(n,o)&&(He(n),gr(n._controlledReadableByteStream,o))}}u(Sr,\"ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue\");function Uo(n){const o=n._controlledReadableByteStream._reader;for(;o._readRequests.length>0;){if(n._queueTotalSize===0)return;const a=o._readRequests.shift();Fn(n,a)}}u(Uo,\"ReadableByteStreamControllerProcessReadRequestsUsingQueue\");function No(n,o,a,p){const g=n._controlledReadableByteStream,_=o.constructor,S=xo(_),{byteOffset:C,byteLength:q}=o,P=a*S;let W;try{W=we(o.buffer)}catch(j){p._errorSteps(j);return}const O={buffer:W,bufferByteLength:W.byteLength,byteOffset:C,byteLength:q,bytesFilled:0,minimumFill:P,elementSize:S,viewConstructor:_,readerType:\"byob\"};if(n._pendingPullIntos.length>0){n._pendingPullIntos.push(O),$n(g,p);return}if(g._state===\"closed\"){const j=new _(O.buffer,O.byteOffset,0);p._closeSteps(j);return}if(n._queueTotalSize>0){if(kn(n,O)){const j=An(O);On(n),p._chunkSteps(j);return}if(n._closeRequested){const j=new TypeError(\"Insufficient bytes to fill elements in the given buffer\");te(n,j),p._errorSteps(j);return}}n._pendingPullIntos.push(O),$n(g,p),ze(n)}u(No,\"ReadableByteStreamControllerPullInto\");function Ho(n,o){o.readerType===\"none\"&&He(n);const a=n._controlledReadableByteStream;if(Tr(a))for(;Dn(a)>0;){const p=He(n);gr(a,p)}}u(Ho,\"ReadableByteStreamControllerRespondInClosedState\");function Vo(n,o,a){if(Wn(n,o,a),a.readerType===\"none\"){qn(n,a),Sr(n);return}if(a.bytesFilled<a.minimumFill)return;He(n);const p=a.bytesFilled%a.elementSize;if(p>0){const g=a.byteOffset+a.bytesFilled;Bn(n,a.buffer,g-p,p)}a.bytesFilled-=p,gr(n._controlledReadableByteStream,a),Sr(n)}u(Vo,\"ReadableByteStreamControllerRespondInReadableState\");function zn(n,o){const a=n._pendingPullIntos.peek();_r(n),n._controlledReadableByteStream._state===\"closed\"?Ho(n,a):Vo(n,o,a),ze(n)}u(zn,\"ReadableByteStreamControllerRespondInternal\");function He(n){return n._pendingPullIntos.shift()}u(He,\"ReadableByteStreamControllerShiftPendingPullInto\");function Qo(n){const o=n._controlledReadableByteStream;return o._state!==\"readable\"||n._closeRequested||!n._started?!1:!!(mn(o)&&Tt(o)>0||Tr(o)&&Dn(o)>0||In(n)>0)}u(Qo,\"ReadableByteStreamControllerShouldCallPull\");function At(n){n._pullAlgorithm=void 0,n._cancelAlgorithm=void 0}u(At,\"ReadableByteStreamControllerClearAlgorithms\");function at(n){const o=n._controlledReadableByteStream;if(!(n._closeRequested||o._state!==\"readable\")){if(n._queueTotalSize>0){n._closeRequested=!0;return}if(n._pendingPullIntos.length>0){const a=n._pendingPullIntos.peek();if(a.bytesFilled%a.elementSize!==0){const p=new TypeError(\"Insufficient bytes to fill elements in the given buffer\");throw te(n,p),p}}At(n),pt(o)}}u(at,\"ReadableByteStreamControllerClose\");function Bt(n,o){const a=n._controlledReadableByteStream;if(n._closeRequested||a._state!==\"readable\")return;const{buffer:p,byteOffset:g,byteLength:_}=o;if(Ee(p))throw new TypeError(\"chunk's buffer is detached and so cannot be enqueued\");const S=we(p);if(n._pendingPullIntos.length>0){const C=n._pendingPullIntos.peek();if(Ee(C.buffer))throw new TypeError(\"The BYOB request's buffer has been detached and so cannot be filled with an enqueued chunk\");_r(n),C.buffer=we(C.buffer),C.readerType===\"none\"&&qn(n,C)}if(mn(a))if(Uo(n),Tt(a)===0)Et(n,S,g,_);else{n._pendingPullIntos.length>0&&He(n);const C=new Uint8Array(S,g,_);fr(a,C,!1)}else Tr(a)?(Et(n,S,g,_),Sr(n)):Et(n,S,g,_);ze(n)}u(Bt,\"ReadableByteStreamControllerEnqueue\");function te(n,o){const a=n._controlledReadableByteStream;a._state===\"readable\"&&(En(n),Ae(n),At(n),fo(a,o))}u(te,\"ReadableByteStreamControllerError\");function Fn(n,o){const a=n._queue.shift();n._queueTotalSize-=a.byteLength,On(n);const p=new Uint8Array(a.buffer,a.byteOffset,a.byteLength);o._chunkSteps(p)}u(Fn,\"ReadableByteStreamControllerFillReadRequestFromQueue\");function wr(n){if(n._byobRequest===null&&n._pendingPullIntos.length>0){const o=n._pendingPullIntos.peek(),a=new Uint8Array(o.buffer,o.byteOffset+o.bytesFilled,o.byteLength-o.bytesFilled),p=Object.create(Re.prototype);Yo(p,n,a),n._byobRequest=p}return n._byobRequest}u(wr,\"ReadableByteStreamControllerGetBYOBRequest\");function In(n){const o=n._controlledReadableByteStream._state;return o===\"errored\"?null:o===\"closed\"?0:n._strategyHWM-n._queueTotalSize}u(In,\"ReadableByteStreamControllerGetDesiredSize\");function qt(n,o){const a=n._pendingPullIntos.peek();if(n._controlledReadableByteStream._state===\"closed\"){if(o!==0)throw new TypeError(\"bytesWritten must be 0 when calling respond() on a closed stream\")}else{if(o===0)throw new TypeError(\"bytesWritten must be greater than 0 when calling respond() on a readable stream\");if(a.bytesFilled+o>a.byteLength)throw new RangeError(\"bytesWritten out of range\")}a.buffer=we(a.buffer),zn(n,o)}u(qt,\"ReadableByteStreamControllerRespond\");function kt(n,o){const a=n._pendingPullIntos.peek();if(n._controlledReadableByteStream._state===\"closed\"){if(o.byteLength!==0)throw new TypeError(\"The view's length must be 0 when calling respondWithNewView() on a closed stream\")}else if(o.byteLength===0)throw new TypeError(\"The view's length must be greater than 0 when calling respondWithNewView() on a readable stream\");if(a.byteOffset+a.bytesFilled!==o.byteOffset)throw new RangeError(\"The region specified by view does not match byobRequest\");if(a.bufferByteLength!==o.buffer.byteLength)throw new RangeError(\"The buffer of view has different capacity than byobRequest\");if(a.bytesFilled+o.byteLength>a.byteLength)throw new RangeError(\"The region specified by view is larger than byobRequest\");const g=o.byteLength;a.buffer=we(o.buffer),zn(n,g)}u(kt,\"ReadableByteStreamControllerRespondWithNewView\");function jn(n,o,a,p,g,_,S){o._controlledReadableByteStream=n,o._pullAgain=!1,o._pulling=!1,o._byobRequest=null,o._queue=o._queueTotalSize=void 0,Ae(o),o._closeRequested=!1,o._started=!1,o._strategyHWM=_,o._pullAlgorithm=p,o._cancelAlgorithm=g,o._autoAllocateChunkSize=S,o._pendingPullIntos=new Q,n._readableStreamController=o;const C=a();E(k(C),()=>(o._started=!0,ze(o),null),q=>(te(o,q),null))}u(jn,\"SetUpReadableByteStreamController\");function Go(n,o,a){const p=Object.create(ie.prototype);let g,_,S;o.start!==void 0?g=u(()=>o.start(p),\"startAlgorithm\"):g=u(()=>{},\"startAlgorithm\"),o.pull!==void 0?_=u(()=>o.pull(p),\"pullAlgorithm\"):_=u(()=>k(void 0),\"pullAlgorithm\"),o.cancel!==void 0?S=u(q=>o.cancel(q),\"cancelAlgorithm\"):S=u(()=>k(void 0),\"cancelAlgorithm\");const C=o.autoAllocateChunkSize;if(C===0)throw new TypeError(\"autoAllocateChunkSize must be greater than 0\");jn(n,p,g,_,S,a,C)}u(Go,\"SetUpReadableByteStreamControllerFromUnderlyingSource\");function Yo(n,o,a){n._associatedReadableByteStreamController=o,n._view=a}u(Yo,\"SetUpReadableStreamBYOBRequest\");function Rr(n){return new TypeError(`ReadableStreamBYOBRequest.prototype.${n} can only be used on a ReadableStreamBYOBRequest`)}u(Rr,\"byobRequestBrandCheckException\");function ut(n){return new TypeError(`ReadableByteStreamController.prototype.${n} can only be used on a ReadableByteStreamController`)}u(ut,\"byteStreamControllerBrandCheckException\");function Zo(n,o){ce(n,o);const a=n?.mode;return{mode:a===void 0?void 0:Ko(a,`${o} has member 'mode' that`)}}u(Zo,\"convertReaderOptions\");function Ko(n,o){if(n=`${n}`,n!==\"byob\")throw new TypeError(`${o} '${n}' is not a valid enumeration value for ReadableStreamReaderMode`);return n}u(Ko,\"convertReadableStreamReaderMode\");function Jo(n,o){var a;ce(n,o);const p=(a=n?.min)!==null&&a!==void 0?a:1;return{min:ur(p,`${o} has member 'min' that`)}}u(Jo,\"convertByobReadOptions\");function Ln(n){return new he(n)}u(Ln,\"AcquireReadableStreamBYOBReader\");function $n(n,o){n._reader._readIntoRequests.push(o)}u($n,\"ReadableStreamAddReadIntoRequest\");function Xo(n,o,a){const g=n._reader._readIntoRequests.shift();a?g._closeSteps(o):g._chunkSteps(o)}u(Xo,\"ReadableStreamFulfillReadIntoRequest\");function Dn(n){return n._reader._readIntoRequests.length}u(Dn,\"ReadableStreamGetNumReadIntoRequests\");function Tr(n){const o=n._reader;return!(o===void 0||!Fe(o))}u(Tr,\"ReadableStreamHasBYOBReader\");const Hr=class Hr{constructor(o){if(Se(o,1,\"ReadableStreamBYOBReader\"),lr(o,\"First parameter\"),ke(o))throw new TypeError(\"This stream has already been locked for exclusive reading by another reader\");if(!Oe(o._readableStreamController))throw new TypeError(\"Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source\");ln(this,o),this._readIntoRequests=new Q}get closed(){return Fe(this)?this._closedPromise:T(Wt(\"closed\"))}cancel(o=void 0){return Fe(this)?this._ownerReadableStream===void 0?T(Rt(\"cancel\")):nr(this,o):T(Wt(\"cancel\"))}read(o,a={}){if(!Fe(this))return T(Wt(\"read\"));if(!ArrayBuffer.isView(o))return T(new TypeError(\"view must be an array buffer view\"));if(o.byteLength===0)return T(new TypeError(\"view must have non-zero byteLength\"));if(o.buffer.byteLength===0)return T(new TypeError(\"view's buffer must have non-zero byteLength\"));if(Ee(o.buffer))return T(new TypeError(\"view's buffer has been detached\"));let p;try{p=Jo(a,\"options\")}catch(P){return T(P)}const g=p.min;if(g===0)return T(new TypeError(\"options.min must be greater than 0\"));if(Mo(o)){if(g>o.byteLength)return T(new RangeError(\"options.min must be less than or equal to view's byteLength\"))}else if(g>o.length)return T(new RangeError(\"options.min must be less than or equal to view's length\"));if(this._ownerReadableStream===void 0)return T(Rt(\"read from\"));let _,S;const C=F((P,W)=>{_=P,S=W});return Mn(this,o,g,{_chunkSteps:P=>_({value:P,done:!1}),_closeSteps:P=>_({value:P,done:!0}),_errorSteps:P=>S(P)}),C}releaseLock(){if(!Fe(this))throw Wt(\"releaseLock\");this._ownerReadableStream!==void 0&&ei(this)}};u(Hr,\"ReadableStreamBYOBReader\");let he=Hr;Object.defineProperties(he.prototype,{cancel:{enumerable:!0},read:{enumerable:!0},releaseLock:{enumerable:!0},closed:{enumerable:!0}}),w(he.prototype.cancel,\"cancel\"),w(he.prototype.read,\"read\"),w(he.prototype.releaseLock,\"releaseLock\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(he.prototype,Symbol.toStringTag,{value:\"ReadableStreamBYOBReader\",configurable:!0});function Fe(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_readIntoRequests\")?!1:n instanceof he}u(Fe,\"IsReadableStreamBYOBReader\");function Mn(n,o,a,p){const g=n._ownerReadableStream;g._disturbed=!0,g._state===\"errored\"?p._errorSteps(g._storedError):No(g._readableStreamController,o,a,p)}u(Mn,\"ReadableStreamBYOBReaderRead\");function ei(n){_e(n);const o=new TypeError(\"Reader was released\");xn(n,o)}u(ei,\"ReadableStreamBYOBReaderRelease\");function xn(n,o){const a=n._readIntoRequests;n._readIntoRequests=new Q,a.forEach(p=>{p._errorSteps(o)})}u(xn,\"ReadableStreamBYOBReaderErrorReadIntoRequests\");function Wt(n){return new TypeError(`ReadableStreamBYOBReader.prototype.${n} can only be used on a ReadableStreamBYOBReader`)}u(Wt,\"byobReaderBrandCheckException\");function lt(n,o){const{highWaterMark:a}=n;if(a===void 0)return o;if(wn(a)||a<0)throw new RangeError(\"Invalid highWaterMark\");return a}u(lt,\"ExtractHighWaterMark\");function Ot(n){const{size:o}=n;return o||(()=>1)}u(Ot,\"ExtractSizeAlgorithm\");function zt(n,o){ce(n,o);const a=n?.highWaterMark,p=n?.size;return{highWaterMark:a===void 0?void 0:ar(a),size:p===void 0?void 0:ti(p,`${o} has member 'size' that`)}}u(zt,\"convertQueuingStrategy\");function ti(n,o){return ee(n,o),a=>ar(n(a))}u(ti,\"convertQueuingStrategySize\");function ri(n,o){ce(n,o);const a=n?.abort,p=n?.close,g=n?.start,_=n?.type,S=n?.write;return{abort:a===void 0?void 0:ni(a,n,`${o} has member 'abort' that`),close:p===void 0?void 0:oi(p,n,`${o} has member 'close' that`),start:g===void 0?void 0:ii(g,n,`${o} has member 'start' that`),write:S===void 0?void 0:si(S,n,`${o} has member 'write' that`),type:_}}u(ri,\"convertUnderlyingSink\");function ni(n,o,a){return ee(n,a),p=>H(n,o,[p])}u(ni,\"convertUnderlyingSinkAbortCallback\");function oi(n,o,a){return ee(n,a),()=>H(n,o,[])}u(oi,\"convertUnderlyingSinkCloseCallback\");function ii(n,o,a){return ee(n,a),p=>M(n,o,[p])}u(ii,\"convertUnderlyingSinkStartCallback\");function si(n,o,a){return ee(n,a),(p,g)=>H(n,o,[p,g])}u(si,\"convertUnderlyingSinkWriteCallback\");function Un(n,o){if(!Ve(n))throw new TypeError(`${o} is not a WritableStream.`)}u(Un,\"assertWritableStream\");function ai(n){if(typeof n!=\"object\"||n===null)return!1;try{return typeof n.aborted==\"boolean\"}catch{return!1}}u(ai,\"isAbortSignal\");const ui=typeof AbortController==\"function\";function li(){if(ui)return new AbortController}u(li,\"createAbortController\");const Vr=class Vr{constructor(o={},a={}){o===void 0?o=null:hn(o,\"First parameter\");const p=zt(a,\"Second parameter\"),g=ri(o,\"First parameter\");if(Hn(this),g.type!==void 0)throw new RangeError(\"Invalid type is specified\");const S=Ot(p),C=lt(p,1);Ti(this,g,C,S)}get locked(){if(!Ve(this))throw $t(\"locked\");return Qe(this)}abort(o=void 0){return Ve(this)?Qe(this)?T(new TypeError(\"Cannot abort a stream that already has a writer\")):Ft(this,o):T($t(\"abort\"))}close(){return Ve(this)?Qe(this)?T(new TypeError(\"Cannot close a stream that already has a writer\")):be(this)?T(new TypeError(\"Cannot close an already-closing stream\")):Vn(this):T($t(\"close\"))}getWriter(){if(!Ve(this))throw $t(\"getWriter\");return Nn(this)}};u(Vr,\"WritableStream\");let pe=Vr;Object.defineProperties(pe.prototype,{abort:{enumerable:!0},close:{enumerable:!0},getWriter:{enumerable:!0},locked:{enumerable:!0}}),w(pe.prototype.abort,\"abort\"),w(pe.prototype.close,\"close\"),w(pe.prototype.getWriter,\"getWriter\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(pe.prototype,Symbol.toStringTag,{value:\"WritableStream\",configurable:!0});function Nn(n){return new se(n)}u(Nn,\"AcquireWritableStreamDefaultWriter\");function fi(n,o,a,p,g=1,_=()=>1){const S=Object.create(pe.prototype);Hn(S);const C=Object.create(Be.prototype);return Jn(S,C,n,o,a,p,g,_),S}u(fi,\"CreateWritableStream\");function Hn(n){n._state=\"writable\",n._storedError=void 0,n._writer=void 0,n._writableStreamController=void 0,n._writeRequests=new Q,n._inFlightWriteRequest=void 0,n._closeRequest=void 0,n._inFlightCloseRequest=void 0,n._pendingAbortRequest=void 0,n._backpressure=!1}u(Hn,\"InitializeWritableStream\");function Ve(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_writableStreamController\")?!1:n instanceof pe}u(Ve,\"IsWritableStream\");function Qe(n){return n._writer!==void 0}u(Qe,\"IsWritableStreamLocked\");function Ft(n,o){var a;if(n._state===\"closed\"||n._state===\"errored\")return k(void 0);n._writableStreamController._abortReason=o,(a=n._writableStreamController._abortController)===null||a===void 0||a.abort(o);const p=n._state;if(p===\"closed\"||p===\"errored\")return k(void 0);if(n._pendingAbortRequest!==void 0)return n._pendingAbortRequest._promise;let g=!1;p===\"erroring\"&&(g=!0,o=void 0);const _=F((S,C)=>{n._pendingAbortRequest={_promise:void 0,_resolve:S,_reject:C,_reason:o,_wasAlreadyErroring:g}});return n._pendingAbortRequest._promise=_,g||Pr(n,o),_}u(Ft,\"WritableStreamAbort\");function Vn(n){const o=n._state;if(o===\"closed\"||o===\"errored\")return T(new TypeError(`The stream (in ${o} state) is not in the writable state and cannot be closed`));const a=F((g,_)=>{const S={_resolve:g,_reject:_};n._closeRequest=S}),p=n._writer;return p!==void 0&&n._backpressure&&o===\"writable\"&&Or(p),Ci(n._writableStreamController),a}u(Vn,\"WritableStreamClose\");function ci(n){return F((a,p)=>{const g={_resolve:a,_reject:p};n._writeRequests.push(g)})}u(ci,\"WritableStreamAddWriteRequest\");function Cr(n,o){if(n._state===\"writable\"){Pr(n,o);return}vr(n)}u(Cr,\"WritableStreamDealWithRejection\");function Pr(n,o){const a=n._writableStreamController;n._state=\"erroring\",n._storedError=o;const p=n._writer;p!==void 0&&Gn(p,o),!mi(n)&&a._started&&vr(n)}u(Pr,\"WritableStreamStartErroring\");function vr(n){n._state=\"errored\",n._writableStreamController[un]();const o=n._storedError;if(n._writeRequests.forEach(g=>{g._reject(o)}),n._writeRequests=new Q,n._pendingAbortRequest===void 0){It(n);return}const a=n._pendingAbortRequest;if(n._pendingAbortRequest=void 0,a._wasAlreadyErroring){a._reject(o),It(n);return}const p=n._writableStreamController[wt](a._reason);E(p,()=>(a._resolve(),It(n),null),g=>(a._reject(g),It(n),null))}u(vr,\"WritableStreamFinishErroring\");function di(n){n._inFlightWriteRequest._resolve(void 0),n._inFlightWriteRequest=void 0}u(di,\"WritableStreamFinishInFlightWrite\");function hi(n,o){n._inFlightWriteRequest._reject(o),n._inFlightWriteRequest=void 0,Cr(n,o)}u(hi,\"WritableStreamFinishInFlightWriteWithError\");function pi(n){n._inFlightCloseRequest._resolve(void 0),n._inFlightCloseRequest=void 0,n._state===\"erroring\"&&(n._storedError=void 0,n._pendingAbortRequest!==void 0&&(n._pendingAbortRequest._resolve(),n._pendingAbortRequest=void 0)),n._state=\"closed\";const a=n._writer;a!==void 0&&ro(a)}u(pi,\"WritableStreamFinishInFlightClose\");function bi(n,o){n._inFlightCloseRequest._reject(o),n._inFlightCloseRequest=void 0,n._pendingAbortRequest!==void 0&&(n._pendingAbortRequest._reject(o),n._pendingAbortRequest=void 0),Cr(n,o)}u(bi,\"WritableStreamFinishInFlightCloseWithError\");function be(n){return!(n._closeRequest===void 0&&n._inFlightCloseRequest===void 0)}u(be,\"WritableStreamCloseQueuedOrInFlight\");function mi(n){return!(n._inFlightWriteRequest===void 0&&n._inFlightCloseRequest===void 0)}u(mi,\"WritableStreamHasOperationMarkedInFlight\");function yi(n){n._inFlightCloseRequest=n._closeRequest,n._closeRequest=void 0}u(yi,\"WritableStreamMarkCloseRequestInFlight\");function gi(n){n._inFlightWriteRequest=n._writeRequests.shift()}u(gi,\"WritableStreamMarkFirstWriteRequestInFlight\");function It(n){n._closeRequest!==void 0&&(n._closeRequest._reject(n._storedError),n._closeRequest=void 0);const o=n._writer;o!==void 0&&kr(o,n._storedError)}u(It,\"WritableStreamRejectCloseAndClosedPromiseIfNeeded\");function Er(n,o){const a=n._writer;a!==void 0&&o!==n._backpressure&&(o?ki(a):Or(a)),n._backpressure=o}u(Er,\"WritableStreamUpdateBackpressure\");const Qr=class Qr{constructor(o){if(Se(o,1,\"WritableStreamDefaultWriter\"),Un(o,\"First parameter\"),Qe(o))throw new TypeError(\"This stream has already been locked for exclusive writing by another writer\");this._ownerWritableStream=o,o._writer=this;const a=o._state;if(a===\"writable\")!be(o)&&o._backpressure?Mt(this):no(this),Dt(this);else if(a===\"erroring\")Wr(this,o._storedError),Dt(this);else if(a===\"closed\")no(this),Bi(this);else{const p=o._storedError;Wr(this,p),to(this,p)}}get closed(){return Ie(this)?this._closedPromise:T(je(\"closed\"))}get desiredSize(){if(!Ie(this))throw je(\"desiredSize\");if(this._ownerWritableStream===void 0)throw ct(\"desiredSize\");return Ri(this)}get ready(){return Ie(this)?this._readyPromise:T(je(\"ready\"))}abort(o=void 0){return Ie(this)?this._ownerWritableStream===void 0?T(ct(\"abort\")):_i(this,o):T(je(\"abort\"))}close(){if(!Ie(this))return T(je(\"close\"));const o=this._ownerWritableStream;return o===void 0?T(ct(\"close\")):be(o)?T(new TypeError(\"Cannot close an already-closing stream\")):Qn(this)}releaseLock(){if(!Ie(this))throw je(\"releaseLock\");this._ownerWritableStream!==void 0&&Yn(this)}write(o=void 0){return Ie(this)?this._ownerWritableStream===void 0?T(ct(\"write to\")):Zn(this,o):T(je(\"write\"))}};u(Qr,\"WritableStreamDefaultWriter\");let se=Qr;Object.defineProperties(se.prototype,{abort:{enumerable:!0},close:{enumerable:!0},releaseLock:{enumerable:!0},write:{enumerable:!0},closed:{enumerable:!0},desiredSize:{enumerable:!0},ready:{enumerable:!0}}),w(se.prototype.abort,\"abort\"),w(se.prototype.close,\"close\"),w(se.prototype.releaseLock,\"releaseLock\"),w(se.prototype.write,\"write\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(se.prototype,Symbol.toStringTag,{value:\"WritableStreamDefaultWriter\",configurable:!0});function Ie(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_ownerWritableStream\")?!1:n instanceof se}u(Ie,\"IsWritableStreamDefaultWriter\");function _i(n,o){const a=n._ownerWritableStream;return Ft(a,o)}u(_i,\"WritableStreamDefaultWriterAbort\");function Qn(n){const o=n._ownerWritableStream;return Vn(o)}u(Qn,\"WritableStreamDefaultWriterClose\");function Si(n){const o=n._ownerWritableStream,a=o._state;return be(o)||a===\"closed\"?k(void 0):a===\"errored\"?T(o._storedError):Qn(n)}u(Si,\"WritableStreamDefaultWriterCloseWithErrorPropagation\");function wi(n,o){n._closedPromiseState===\"pending\"?kr(n,o):qi(n,o)}u(wi,\"WritableStreamDefaultWriterEnsureClosedPromiseRejected\");function Gn(n,o){n._readyPromiseState===\"pending\"?oo(n,o):Wi(n,o)}u(Gn,\"WritableStreamDefaultWriterEnsureReadyPromiseRejected\");function Ri(n){const o=n._ownerWritableStream,a=o._state;return a===\"errored\"||a===\"erroring\"?null:a===\"closed\"?0:Xn(o._writableStreamController)}u(Ri,\"WritableStreamDefaultWriterGetDesiredSize\");function Yn(n){const o=n._ownerWritableStream,a=new TypeError(\"Writer was released and can no longer be used to monitor the stream's closedness\");Gn(n,a),wi(n,a),o._writer=void 0,n._ownerWritableStream=void 0}u(Yn,\"WritableStreamDefaultWriterRelease\");function Zn(n,o){const a=n._ownerWritableStream,p=a._writableStreamController,g=Pi(p,o);if(a!==n._ownerWritableStream)return T(ct(\"write to\"));const _=a._state;if(_===\"errored\")return T(a._storedError);if(be(a)||_===\"closed\")return T(new TypeError(\"The stream is closing or closed and cannot be written to\"));if(_===\"erroring\")return T(a._storedError);const S=ci(a);return vi(p,o,g),S}u(Zn,\"WritableStreamDefaultWriterWrite\");const Kn={},Gr=class Gr{constructor(){throw new TypeError(\"Illegal constructor\")}get abortReason(){if(!Ar(this))throw qr(\"abortReason\");return this._abortReason}get signal(){if(!Ar(this))throw qr(\"signal\");if(this._abortController===void 0)throw new TypeError(\"WritableStreamDefaultController.prototype.signal is not supported\");return this._abortController.signal}error(o=void 0){if(!Ar(this))throw qr(\"error\");this._controlledWritableStream._state===\"writable\"&&eo(this,o)}[wt](o){const a=this._abortAlgorithm(o);return jt(this),a}[un](){Ae(this)}};u(Gr,\"WritableStreamDefaultController\");let Be=Gr;Object.defineProperties(Be.prototype,{abortReason:{enumerable:!0},signal:{enumerable:!0},error:{enumerable:!0}}),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(Be.prototype,Symbol.toStringTag,{value:\"WritableStreamDefaultController\",configurable:!0});function Ar(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_controlledWritableStream\")?!1:n instanceof Be}u(Ar,\"IsWritableStreamDefaultController\");function Jn(n,o,a,p,g,_,S,C){o._controlledWritableStream=n,n._writableStreamController=o,o._queue=void 0,o._queueTotalSize=void 0,Ae(o),o._abortReason=void 0,o._abortController=li(),o._started=!1,o._strategySizeAlgorithm=C,o._strategyHWM=S,o._writeAlgorithm=p,o._closeAlgorithm=g,o._abortAlgorithm=_;const q=Br(o);Er(n,q);const P=a(),W=k(P);E(W,()=>(o._started=!0,Lt(o),null),O=>(o._started=!0,Cr(n,O),null))}u(Jn,\"SetUpWritableStreamDefaultController\");function Ti(n,o,a,p){const g=Object.create(Be.prototype);let _,S,C,q;o.start!==void 0?_=u(()=>o.start(g),\"startAlgorithm\"):_=u(()=>{},\"startAlgorithm\"),o.write!==void 0?S=u(P=>o.write(P,g),\"writeAlgorithm\"):S=u(()=>k(void 0),\"writeAlgorithm\"),o.close!==void 0?C=u(()=>o.close(),\"closeAlgorithm\"):C=u(()=>k(void 0),\"closeAlgorithm\"),o.abort!==void 0?q=u(P=>o.abort(P),\"abortAlgorithm\"):q=u(()=>k(void 0),\"abortAlgorithm\"),Jn(n,g,_,S,C,q,a,p)}u(Ti,\"SetUpWritableStreamDefaultControllerFromUnderlyingSink\");function jt(n){n._writeAlgorithm=void 0,n._closeAlgorithm=void 0,n._abortAlgorithm=void 0,n._strategySizeAlgorithm=void 0}u(jt,\"WritableStreamDefaultControllerClearAlgorithms\");function Ci(n){mr(n,Kn,0),Lt(n)}u(Ci,\"WritableStreamDefaultControllerClose\");function Pi(n,o){try{return n._strategySizeAlgorithm(o)}catch(a){return ft(n,a),1}}u(Pi,\"WritableStreamDefaultControllerGetChunkSize\");function Xn(n){return n._strategyHWM-n._queueTotalSize}u(Xn,\"WritableStreamDefaultControllerGetDesiredSize\");function vi(n,o,a){try{mr(n,o,a)}catch(g){ft(n,g);return}const p=n._controlledWritableStream;if(!be(p)&&p._state===\"writable\"){const g=Br(n);Er(p,g)}Lt(n)}u(vi,\"WritableStreamDefaultControllerWrite\");function Lt(n){const o=n._controlledWritableStream;if(!n._started||o._inFlightWriteRequest!==void 0)return;if(o._state===\"erroring\"){vr(o);return}if(n._queue.length===0)return;const p=Do(n);p===Kn?Ei(n):Ai(n,p)}u(Lt,\"WritableStreamDefaultControllerAdvanceQueueIfNeeded\");function ft(n,o){n._controlledWritableStream._state===\"writable\"&&eo(n,o)}u(ft,\"WritableStreamDefaultControllerErrorIfNeeded\");function Ei(n){const o=n._controlledWritableStream;yi(o),br(n);const a=n._closeAlgorithm();jt(n),E(a,()=>(pi(o),null),p=>(bi(o,p),null))}u(Ei,\"WritableStreamDefaultControllerProcessClose\");function Ai(n,o){const a=n._controlledWritableStream;gi(a);const p=n._writeAlgorithm(o);E(p,()=>{di(a);const g=a._state;if(br(n),!be(a)&&g===\"writable\"){const _=Br(n);Er(a,_)}return Lt(n),null},g=>(a._state===\"writable\"&&jt(n),hi(a,g),null))}u(Ai,\"WritableStreamDefaultControllerProcessWrite\");function Br(n){return Xn(n)<=0}u(Br,\"WritableStreamDefaultControllerGetBackpressure\");function eo(n,o){const a=n._controlledWritableStream;jt(n),Pr(a,o)}u(eo,\"WritableStreamDefaultControllerError\");function $t(n){return new TypeError(`WritableStream.prototype.${n} can only be used on a WritableStream`)}u($t,\"streamBrandCheckException$2\");function qr(n){return new TypeError(`WritableStreamDefaultController.prototype.${n} can only be used on a WritableStreamDefaultController`)}u(qr,\"defaultControllerBrandCheckException$2\");function je(n){return new TypeError(`WritableStreamDefaultWriter.prototype.${n} can only be used on a WritableStreamDefaultWriter`)}u(je,\"defaultWriterBrandCheckException\");function ct(n){return new TypeError(\"Cannot \"+n+\" a stream using a released writer\")}u(ct,\"defaultWriterLockException\");function Dt(n){n._closedPromise=F((o,a)=>{n._closedPromise_resolve=o,n._closedPromise_reject=a,n._closedPromiseState=\"pending\"})}u(Dt,\"defaultWriterClosedPromiseInitialize\");function to(n,o){Dt(n),kr(n,o)}u(to,\"defaultWriterClosedPromiseInitializeAsRejected\");function Bi(n){Dt(n),ro(n)}u(Bi,\"defaultWriterClosedPromiseInitializeAsResolved\");function kr(n,o){n._closedPromise_reject!==void 0&&(J(n._closedPromise),n._closedPromise_reject(o),n._closedPromise_resolve=void 0,n._closedPromise_reject=void 0,n._closedPromiseState=\"rejected\")}u(kr,\"defaultWriterClosedPromiseReject\");function qi(n,o){to(n,o)}u(qi,\"defaultWriterClosedPromiseResetToRejected\");function ro(n){n._closedPromise_resolve!==void 0&&(n._closedPromise_resolve(void 0),n._closedPromise_resolve=void 0,n._closedPromise_reject=void 0,n._closedPromiseState=\"resolved\")}u(ro,\"defaultWriterClosedPromiseResolve\");function Mt(n){n._readyPromise=F((o,a)=>{n._readyPromise_resolve=o,n._readyPromise_reject=a}),n._readyPromiseState=\"pending\"}u(Mt,\"defaultWriterReadyPromiseInitialize\");function Wr(n,o){Mt(n),oo(n,o)}u(Wr,\"defaultWriterReadyPromiseInitializeAsRejected\");function no(n){Mt(n),Or(n)}u(no,\"defaultWriterReadyPromiseInitializeAsResolved\");function oo(n,o){n._readyPromise_reject!==void 0&&(J(n._readyPromise),n._readyPromise_reject(o),n._readyPromise_resolve=void 0,n._readyPromise_reject=void 0,n._readyPromiseState=\"rejected\")}u(oo,\"defaultWriterReadyPromiseReject\");function ki(n){Mt(n)}u(ki,\"defaultWriterReadyPromiseReset\");function Wi(n,o){Wr(n,o)}u(Wi,\"defaultWriterReadyPromiseResetToRejected\");function Or(n){n._readyPromise_resolve!==void 0&&(n._readyPromise_resolve(void 0),n._readyPromise_resolve=void 0,n._readyPromise_reject=void 0,n._readyPromiseState=\"fulfilled\")}u(Or,\"defaultWriterReadyPromiseResolve\");function Oi(){if(typeof globalThis<\"u\")return globalThis;if(typeof self<\"u\")return self;if(typeof _commonjsHelpers.commonjsGlobal<\"u\")return _commonjsHelpers.commonjsGlobal}u(Oi,\"getGlobals\");const zr=Oi();function zi(n){if(!(typeof n==\"function\"||typeof n==\"object\")||n.name!==\"DOMException\")return!1;try{return new n,!0}catch{return!1}}u(zi,\"isDOMExceptionConstructor\");function Fi(){const n=zr?.DOMException;return zi(n)?n:void 0}u(Fi,\"getFromGlobal\");function Ii(){const n=u(function(a,p){this.message=a||\"\",this.name=p||\"Error\",Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)},\"DOMException\");return w(n,\"DOMException\"),n.prototype=Object.create(Error.prototype),Object.defineProperty(n.prototype,\"constructor\",{value:n,writable:!0,configurable:!0}),n}u(Ii,\"createPolyfill\");const ji=Fi()||Ii();function io(n,o,a,p,g,_){const S=Ne(n),C=Nn(o);n._disturbed=!0;let q=!1,P=k(void 0);return F((W,O)=>{let j;if(_!==void 0){if(j=u(()=>{const A=_.reason!==void 0?_.reason:new ji(\"Aborted\",\"AbortError\"),z=[];p||z.push(()=>o._state===\"writable\"?Ft(o,A):k(void 0)),g||z.push(()=>n._state===\"readable\"?le(n,A):k(void 0)),Z(()=>Promise.all(z.map(L=>L())),!0,A)},\"abortAlgorithm\"),_.aborted){j();return}_.addEventListener(\"abort\",j)}function fe(){return F((A,z)=>{function L(X){X?A():$(et(),L,z)}u(L,\"next\"),L(!1)})}u(fe,\"pipeLoop\");function et(){return q?k(!0):$(C._readyPromise,()=>F((A,z)=>{it(S,{_chunkSteps:L=>{P=$(Zn(C,L),void 0,y),A(!1)},_closeSteps:()=>A(!0),_errorSteps:z})}))}if(u(et,\"pipeStep\"),Te(n,S._closedPromise,A=>(p?re(!0,A):Z(()=>Ft(o,A),!0,A),null)),Te(o,C._closedPromise,A=>(g?re(!0,A):Z(()=>le(n,A),!0,A),null)),Y(n,S._closedPromise,()=>(a?re():Z(()=>Si(C)),null)),be(o)||o._state===\"closed\"){const A=new TypeError(\"the destination writable stream closed before all data could be piped to it\");g?re(!0,A):Z(()=>le(n,A),!0,A)}J(fe());function We(){const A=P;return $(P,()=>A!==P?We():void 0)}u(We,\"waitForWritesToFinish\");function Te(A,z,L){A._state===\"errored\"?L(A._storedError):U(z,L)}u(Te,\"isOrBecomesErrored\");function Y(A,z,L){A._state===\"closed\"?L():K(z,L)}u(Y,\"isOrBecomesClosed\");function Z(A,z,L){if(q)return;q=!0,o._state===\"writable\"&&!be(o)?K(We(),X):X();function X(){return E(A(),()=>Ce(z,L),tt=>Ce(!0,tt)),null}u(X,\"doTheRest\")}u(Z,\"shutdownWithAction\");function re(A,z){q||(q=!0,o._state===\"writable\"&&!be(o)?K(We(),()=>Ce(A,z)):Ce(A,z))}u(re,\"shutdown\");function Ce(A,z){return Yn(C),_e(S),_!==void 0&&_.removeEventListener(\"abort\",j),A?O(z):W(void 0),null}u(Ce,\"finalize\")})}u(io,\"ReadableStreamPipeTo\");const Yr=class Yr{constructor(){throw new TypeError(\"Illegal constructor\")}get desiredSize(){if(!xt(this))throw Nt(\"desiredSize\");return Fr(this)}close(){if(!xt(this))throw Nt(\"close\");if(!Ye(this))throw new TypeError(\"The stream is not in a state that permits close\");Le(this)}enqueue(o=void 0){if(!xt(this))throw Nt(\"enqueue\");if(!Ye(this))throw new TypeError(\"The stream is not in a state that permits enqueue\");return Ge(this,o)}error(o=void 0){if(!xt(this))throw Nt(\"error\");ue(this,o)}[er](o){Ae(this);const a=this._cancelAlgorithm(o);return Ut(this),a}[tr](o){const a=this._controlledReadableStream;if(this._queue.length>0){const p=br(this);this._closeRequested&&this._queue.length===0?(Ut(this),pt(a)):dt(this),o._chunkSteps(p)}else bn(a,o),dt(this)}[rr](){}};u(Yr,\"ReadableStreamDefaultController\");let ae=Yr;Object.defineProperties(ae.prototype,{close:{enumerable:!0},enqueue:{enumerable:!0},error:{enumerable:!0},desiredSize:{enumerable:!0}}),w(ae.prototype.close,\"close\"),w(ae.prototype.enqueue,\"enqueue\"),w(ae.prototype.error,\"error\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(ae.prototype,Symbol.toStringTag,{value:\"ReadableStreamDefaultController\",configurable:!0});function xt(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_controlledReadableStream\")?!1:n instanceof ae}u(xt,\"IsReadableStreamDefaultController\");function dt(n){if(!so(n))return;if(n._pulling){n._pullAgain=!0;return}n._pulling=!0;const a=n._pullAlgorithm();E(a,()=>(n._pulling=!1,n._pullAgain&&(n._pullAgain=!1,dt(n)),null),p=>(ue(n,p),null))}u(dt,\"ReadableStreamDefaultControllerCallPullIfNeeded\");function so(n){const o=n._controlledReadableStream;return!Ye(n)||!n._started?!1:!!(ke(o)&&Tt(o)>0||Fr(n)>0)}u(so,\"ReadableStreamDefaultControllerShouldCallPull\");function Ut(n){n._pullAlgorithm=void 0,n._cancelAlgorithm=void 0,n._strategySizeAlgorithm=void 0}u(Ut,\"ReadableStreamDefaultControllerClearAlgorithms\");function Le(n){if(!Ye(n))return;const o=n._controlledReadableStream;n._closeRequested=!0,n._queue.length===0&&(Ut(n),pt(o))}u(Le,\"ReadableStreamDefaultControllerClose\");function Ge(n,o){if(!Ye(n))return;const a=n._controlledReadableStream;if(ke(a)&&Tt(a)>0)fr(a,o,!1);else{let p;try{p=n._strategySizeAlgorithm(o)}catch(g){throw ue(n,g),g}try{mr(n,o,p)}catch(g){throw ue(n,g),g}}dt(n)}u(Ge,\"ReadableStreamDefaultControllerEnqueue\");function ue(n,o){const a=n._controlledReadableStream;a._state===\"readable\"&&(Ae(n),Ut(n),fo(a,o))}u(ue,\"ReadableStreamDefaultControllerError\");function Fr(n){const o=n._controlledReadableStream._state;return o===\"errored\"?null:o===\"closed\"?0:n._strategyHWM-n._queueTotalSize}u(Fr,\"ReadableStreamDefaultControllerGetDesiredSize\");function Li(n){return!so(n)}u(Li,\"ReadableStreamDefaultControllerHasBackpressure\");function Ye(n){const o=n._controlledReadableStream._state;return!n._closeRequested&&o===\"readable\"}u(Ye,\"ReadableStreamDefaultControllerCanCloseOrEnqueue\");function ao(n,o,a,p,g,_,S){o._controlledReadableStream=n,o._queue=void 0,o._queueTotalSize=void 0,Ae(o),o._started=!1,o._closeRequested=!1,o._pullAgain=!1,o._pulling=!1,o._strategySizeAlgorithm=S,o._strategyHWM=_,o._pullAlgorithm=p,o._cancelAlgorithm=g,n._readableStreamController=o;const C=a();E(k(C),()=>(o._started=!0,dt(o),null),q=>(ue(o,q),null))}u(ao,\"SetUpReadableStreamDefaultController\");function $i(n,o,a,p){const g=Object.create(ae.prototype);let _,S,C;o.start!==void 0?_=u(()=>o.start(g),\"startAlgorithm\"):_=u(()=>{},\"startAlgorithm\"),o.pull!==void 0?S=u(()=>o.pull(g),\"pullAlgorithm\"):S=u(()=>k(void 0),\"pullAlgorithm\"),o.cancel!==void 0?C=u(q=>o.cancel(q),\"cancelAlgorithm\"):C=u(()=>k(void 0),\"cancelAlgorithm\"),ao(n,g,_,S,C,a,p)}u($i,\"SetUpReadableStreamDefaultControllerFromUnderlyingSource\");function Nt(n){return new TypeError(`ReadableStreamDefaultController.prototype.${n} can only be used on a ReadableStreamDefaultController`)}u(Nt,\"defaultControllerBrandCheckException$1\");function Di(n,o){return Oe(n._readableStreamController)?xi(n):Mi(n)}u(Di,\"ReadableStreamTee\");function Mi(n,o){const a=Ne(n);let p=!1,g=!1,_=!1,S=!1,C,q,P,W,O;const j=F(Y=>{O=Y});function fe(){return p?(g=!0,k(void 0)):(p=!0,it(a,{_chunkSteps:Z=>{ge(()=>{g=!1;const re=Z,Ce=Z;_||Ge(P._readableStreamController,re),S||Ge(W._readableStreamController,Ce),p=!1,g&&fe()})},_closeSteps:()=>{p=!1,_||Le(P._readableStreamController),S||Le(W._readableStreamController),(!_||!S)&&O(void 0)},_errorSteps:()=>{p=!1}}),k(void 0))}u(fe,\"pullAlgorithm\");function et(Y){if(_=!0,C=Y,S){const Z=st([C,q]),re=le(n,Z);O(re)}return j}u(et,\"cancel1Algorithm\");function We(Y){if(S=!0,q=Y,_){const Z=st([C,q]),re=le(n,Z);O(re)}return j}u(We,\"cancel2Algorithm\");function Te(){}return u(Te,\"startAlgorithm\"),P=ht(Te,fe,et),W=ht(Te,fe,We),U(a._closedPromise,Y=>(ue(P._readableStreamController,Y),ue(W._readableStreamController,Y),(!_||!S)&&O(void 0),null)),[P,W]}u(Mi,\"ReadableStreamDefaultTee\");function xi(n){let o=Ne(n),a=!1,p=!1,g=!1,_=!1,S=!1,C,q,P,W,O;const j=F(A=>{O=A});function fe(A){U(A._closedPromise,z=>(A!==o||(te(P._readableStreamController,z),te(W._readableStreamController,z),(!_||!S)&&O(void 0)),null))}u(fe,\"forwardReaderError\");function et(){Fe(o)&&(_e(o),o=Ne(n),fe(o)),it(o,{_chunkSteps:z=>{ge(()=>{p=!1,g=!1;const L=z;let X=z;if(!_&&!S)try{X=Pn(z)}catch(tt){te(P._readableStreamController,tt),te(W._readableStreamController,tt),O(le(n,tt));return}_||Bt(P._readableStreamController,L),S||Bt(W._readableStreamController,X),a=!1,p?Te():g&&Y()})},_closeSteps:()=>{a=!1,_||at(P._readableStreamController),S||at(W._readableStreamController),P._readableStreamController._pendingPullIntos.length>0&&qt(P._readableStreamController,0),W._readableStreamController._pendingPullIntos.length>0&&qt(W._readableStreamController,0),(!_||!S)&&O(void 0)},_errorSteps:()=>{a=!1}})}u(et,\"pullWithDefaultReader\");function We(A,z){ve(o)&&(_e(o),o=Ln(n),fe(o));const L=z?W:P,X=z?P:W;Mn(o,A,1,{_chunkSteps:rt=>{ge(()=>{p=!1,g=!1;const nt=z?S:_;if(z?_:S)nt||kt(L._readableStreamController,rt);else{let Co;try{Co=Pn(rt)}catch(tn){te(L._readableStreamController,tn),te(X._readableStreamController,tn),O(le(n,tn));return}nt||kt(L._readableStreamController,rt),Bt(X._readableStreamController,Co)}a=!1,p?Te():g&&Y()})},_closeSteps:rt=>{a=!1;const nt=z?S:_,Yt=z?_:S;nt||at(L._readableStreamController),Yt||at(X._readableStreamController),rt!==void 0&&(nt||kt(L._readableStreamController,rt),!Yt&&X._readableStreamController._pendingPullIntos.length>0&&qt(X._readableStreamController,0)),(!nt||!Yt)&&O(void 0)},_errorSteps:()=>{a=!1}})}u(We,\"pullWithBYOBReader\");function Te(){if(a)return p=!0,k(void 0);a=!0;const A=wr(P._readableStreamController);return A===null?et():We(A._view,!1),k(void 0)}u(Te,\"pull1Algorithm\");function Y(){if(a)return g=!0,k(void 0);a=!0;const A=wr(W._readableStreamController);return A===null?et():We(A._view,!0),k(void 0)}u(Y,\"pull2Algorithm\");function Z(A){if(_=!0,C=A,S){const z=st([C,q]),L=le(n,z);O(L)}return j}u(Z,\"cancel1Algorithm\");function re(A){if(S=!0,q=A,_){const z=st([C,q]),L=le(n,z);O(L)}return j}u(re,\"cancel2Algorithm\");function Ce(){}return u(Ce,\"startAlgorithm\"),P=lo(Ce,Te,Z),W=lo(Ce,Y,re),fe(o),[P,W]}u(xi,\"ReadableByteStreamTee\");function Ui(n){return b(n)&&typeof n.getReader<\"u\"}u(Ui,\"isReadableStreamLike\");function Ni(n){return Ui(n)?Vi(n.getReader()):Hi(n)}u(Ni,\"ReadableStreamFrom\");function Hi(n){let o;const a=Cn(n,\"async\"),p=y;function g(){let S;try{S=Io(a)}catch(q){return T(q)}const C=k(S);return N(C,q=>{if(!b(q))throw new TypeError(\"The promise returned by the iterator.next() method must fulfill with an object\");if(jo(q))Le(o._readableStreamController);else{const W=Lo(q);Ge(o._readableStreamController,W)}})}u(g,\"pullAlgorithm\");function _(S){const C=a.iterator;let q;try{q=vt(C,\"return\")}catch(O){return T(O)}if(q===void 0)return k(void 0);let P;try{P=M(q,C,[S])}catch(O){return T(O)}const W=k(P);return N(W,O=>{if(!b(O))throw new TypeError(\"The promise returned by the iterator.return() method must fulfill with an object\")})}return u(_,\"cancelAlgorithm\"),o=ht(p,g,_,0),o}u(Hi,\"ReadableStreamFromIterable\");function Vi(n){let o;const a=y;function p(){let _;try{_=n.read()}catch(S){return T(S)}return N(_,S=>{if(!b(S))throw new TypeError(\"The promise returned by the reader.read() method must fulfill with an object\");if(S.done)Le(o._readableStreamController);else{const C=S.value;Ge(o._readableStreamController,C)}})}u(p,\"pullAlgorithm\");function g(_){try{return k(n.cancel(_))}catch(S){return T(S)}}return u(g,\"cancelAlgorithm\"),o=ht(a,p,g,0),o}u(Vi,\"ReadableStreamFromDefaultReader\");function Qi(n,o){ce(n,o);const a=n,p=a?.autoAllocateChunkSize,g=a?.cancel,_=a?.pull,S=a?.start,C=a?.type;return{autoAllocateChunkSize:p===void 0?void 0:ur(p,`${o} has member 'autoAllocateChunkSize' that`),cancel:g===void 0?void 0:Gi(g,a,`${o} has member 'cancel' that`),pull:_===void 0?void 0:Yi(_,a,`${o} has member 'pull' that`),start:S===void 0?void 0:Zi(S,a,`${o} has member 'start' that`),type:C===void 0?void 0:Ki(C,`${o} has member 'type' that`)}}u(Qi,\"convertUnderlyingDefaultOrByteSource\");function Gi(n,o,a){return ee(n,a),p=>H(n,o,[p])}u(Gi,\"convertUnderlyingSourceCancelCallback\");function Yi(n,o,a){return ee(n,a),p=>H(n,o,[p])}u(Yi,\"convertUnderlyingSourcePullCallback\");function Zi(n,o,a){return ee(n,a),p=>M(n,o,[p])}u(Zi,\"convertUnderlyingSourceStartCallback\");function Ki(n,o){if(n=`${n}`,n!==\"bytes\")throw new TypeError(`${o} '${n}' is not a valid enumeration value for ReadableStreamType`);return n}u(Ki,\"convertReadableStreamType\");function Ji(n,o){return ce(n,o),{preventCancel:!!n?.preventCancel}}u(Ji,\"convertIteratorOptions\");function uo(n,o){ce(n,o);const a=n?.preventAbort,p=n?.preventCancel,g=n?.preventClose,_=n?.signal;return _!==void 0&&Xi(_,`${o} has member 'signal' that`),{preventAbort:!!a,preventCancel:!!p,preventClose:!!g,signal:_}}u(uo,\"convertPipeOptions\");function Xi(n,o){if(!ai(n))throw new TypeError(`${o} is not an AbortSignal.`)}u(Xi,\"assertAbortSignal\");function es(n,o){ce(n,o);const a=n?.readable;sr(a,\"readable\",\"ReadableWritablePair\"),lr(a,`${o} has member 'readable' that`);const p=n?.writable;return sr(p,\"writable\",\"ReadableWritablePair\"),Un(p,`${o} has member 'writable' that`),{readable:a,writable:p}}u(es,\"convertReadableWritablePair\");const Zr=class Zr{constructor(o={},a={}){o===void 0?o=null:hn(o,\"First parameter\");const p=zt(a,\"Second parameter\"),g=Qi(o,\"First parameter\");if(Ir(this),g.type===\"bytes\"){if(p.size!==void 0)throw new RangeError(\"The strategy for a byte stream cannot have a size function\");const _=lt(p,0);Go(this,g,_)}else{const _=Ot(p),S=lt(p,1);$i(this,g,S,_)}}get locked(){if(!qe(this))throw $e(\"locked\");return ke(this)}cancel(o=void 0){return qe(this)?ke(this)?T(new TypeError(\"Cannot cancel a stream that already has a reader\")):le(this,o):T($e(\"cancel\"))}getReader(o=void 0){if(!qe(this))throw $e(\"getReader\");return Zo(o,\"First parameter\").mode===void 0?Ne(this):Ln(this)}pipeThrough(o,a={}){if(!qe(this))throw $e(\"pipeThrough\");Se(o,1,\"pipeThrough\");const p=es(o,\"First parameter\"),g=uo(a,\"Second parameter\");if(ke(this))throw new TypeError(\"ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream\");if(Qe(p.writable))throw new TypeError(\"ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream\");const _=io(this,p.writable,g.preventClose,g.preventAbort,g.preventCancel,g.signal);return J(_),p.readable}pipeTo(o,a={}){if(!qe(this))return T($e(\"pipeTo\"));if(o===void 0)return T(\"Parameter 1 is required in 'pipeTo'.\");if(!Ve(o))return T(new TypeError(\"ReadableStream.prototype.pipeTo's first argument must be a WritableStream\"));let p;try{p=uo(a,\"Second parameter\")}catch(g){return T(g)}return ke(this)?T(new TypeError(\"ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream\")):Qe(o)?T(new TypeError(\"ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream\")):io(this,o,p.preventClose,p.preventAbort,p.preventCancel,p.signal)}tee(){if(!qe(this))throw $e(\"tee\");const o=Di(this);return st(o)}values(o=void 0){if(!qe(this))throw $e(\"values\");const a=Ji(o,\"First parameter\");return zo(this,a.preventCancel)}[pr](o){return this.values(o)}static from(o){return Ni(o)}};u(Zr,\"ReadableStream\");let V=Zr;Object.defineProperties(V,{from:{enumerable:!0}}),Object.defineProperties(V.prototype,{cancel:{enumerable:!0},getReader:{enumerable:!0},pipeThrough:{enumerable:!0},pipeTo:{enumerable:!0},tee:{enumerable:!0},values:{enumerable:!0},locked:{enumerable:!0}}),w(V.from,\"from\"),w(V.prototype.cancel,\"cancel\"),w(V.prototype.getReader,\"getReader\"),w(V.prototype.pipeThrough,\"pipeThrough\"),w(V.prototype.pipeTo,\"pipeTo\"),w(V.prototype.tee,\"tee\"),w(V.prototype.values,\"values\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(V.prototype,Symbol.toStringTag,{value:\"ReadableStream\",configurable:!0}),Object.defineProperty(V.prototype,pr,{value:V.prototype.values,writable:!0,configurable:!0});function ht(n,o,a,p=1,g=()=>1){const _=Object.create(V.prototype);Ir(_);const S=Object.create(ae.prototype);return ao(_,S,n,o,a,p,g),_}u(ht,\"CreateReadableStream\");function lo(n,o,a){const p=Object.create(V.prototype);Ir(p);const g=Object.create(ie.prototype);return jn(p,g,n,o,a,0,void 0),p}u(lo,\"CreateReadableByteStream\");function Ir(n){n._state=\"readable\",n._reader=void 0,n._storedError=void 0,n._disturbed=!1}u(Ir,\"InitializeReadableStream\");function qe(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_readableStreamController\")?!1:n instanceof V}u(qe,\"IsReadableStream\");function ke(n){return n._reader!==void 0}u(ke,\"IsReadableStreamLocked\");function le(n,o){if(n._disturbed=!0,n._state===\"closed\")return k(void 0);if(n._state===\"errored\")return T(n._storedError);pt(n);const a=n._reader;if(a!==void 0&&Fe(a)){const g=a._readIntoRequests;a._readIntoRequests=new Q,g.forEach(_=>{_._closeSteps(void 0)})}const p=n._readableStreamController[er](o);return N(p,y)}u(le,\"ReadableStreamCancel\");function pt(n){n._state=\"closed\";const o=n._reader;if(o!==void 0&&(cn(o),ve(o))){const a=o._readRequests;o._readRequests=new Q,a.forEach(p=>{p._closeSteps()})}}u(pt,\"ReadableStreamClose\");function fo(n,o){n._state=\"errored\",n._storedError=o;const a=n._reader;a!==void 0&&(ir(a,o),ve(a)?yn(a,o):xn(a,o))}u(fo,\"ReadableStreamError\");function $e(n){return new TypeError(`ReadableStream.prototype.${n} can only be used on a ReadableStream`)}u($e,\"streamBrandCheckException$1\");function co(n,o){ce(n,o);const a=n?.highWaterMark;return sr(a,\"highWaterMark\",\"QueuingStrategyInit\"),{highWaterMark:ar(a)}}u(co,\"convertQueuingStrategyInit\");const ho=u(n=>n.byteLength,\"byteLengthSizeFunction\");w(ho,\"size\");const Kr=class Kr{constructor(o){Se(o,1,\"ByteLengthQueuingStrategy\"),o=co(o,\"First parameter\"),this._byteLengthQueuingStrategyHighWaterMark=o.highWaterMark}get highWaterMark(){if(!bo(this))throw po(\"highWaterMark\");return this._byteLengthQueuingStrategyHighWaterMark}get size(){if(!bo(this))throw po(\"size\");return ho}};u(Kr,\"ByteLengthQueuingStrategy\");let Ze=Kr;Object.defineProperties(Ze.prototype,{highWaterMark:{enumerable:!0},size:{enumerable:!0}}),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(Ze.prototype,Symbol.toStringTag,{value:\"ByteLengthQueuingStrategy\",configurable:!0});function po(n){return new TypeError(`ByteLengthQueuingStrategy.prototype.${n} can only be used on a ByteLengthQueuingStrategy`)}u(po,\"byteLengthBrandCheckException\");function bo(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_byteLengthQueuingStrategyHighWaterMark\")?!1:n instanceof Ze}u(bo,\"IsByteLengthQueuingStrategy\");const mo=u(()=>1,\"countSizeFunction\");w(mo,\"size\");const Jr=class Jr{constructor(o){Se(o,1,\"CountQueuingStrategy\"),o=co(o,\"First parameter\"),this._countQueuingStrategyHighWaterMark=o.highWaterMark}get highWaterMark(){if(!go(this))throw yo(\"highWaterMark\");return this._countQueuingStrategyHighWaterMark}get size(){if(!go(this))throw yo(\"size\");return mo}};u(Jr,\"CountQueuingStrategy\");let Ke=Jr;Object.defineProperties(Ke.prototype,{highWaterMark:{enumerable:!0},size:{enumerable:!0}}),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(Ke.prototype,Symbol.toStringTag,{value:\"CountQueuingStrategy\",configurable:!0});function yo(n){return new TypeError(`CountQueuingStrategy.prototype.${n} can only be used on a CountQueuingStrategy`)}u(yo,\"countBrandCheckException\");function go(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_countQueuingStrategyHighWaterMark\")?!1:n instanceof Ke}u(go,\"IsCountQueuingStrategy\");function ts(n,o){ce(n,o);const a=n?.cancel,p=n?.flush,g=n?.readableType,_=n?.start,S=n?.transform,C=n?.writableType;return{cancel:a===void 0?void 0:is(a,n,`${o} has member 'cancel' that`),flush:p===void 0?void 0:rs(p,n,`${o} has member 'flush' that`),readableType:g,start:_===void 0?void 0:ns(_,n,`${o} has member 'start' that`),transform:S===void 0?void 0:os(S,n,`${o} has member 'transform' that`),writableType:C}}u(ts,\"convertTransformer\");function rs(n,o,a){return ee(n,a),p=>H(n,o,[p])}u(rs,\"convertTransformerFlushCallback\");function ns(n,o,a){return ee(n,a),p=>M(n,o,[p])}u(ns,\"convertTransformerStartCallback\");function os(n,o,a){return ee(n,a),(p,g)=>H(n,o,[p,g])}u(os,\"convertTransformerTransformCallback\");function is(n,o,a){return ee(n,a),p=>H(n,o,[p])}u(is,\"convertTransformerCancelCallback\");const Xr=class Xr{constructor(o={},a={},p={}){o===void 0&&(o=null);const g=zt(a,\"Second parameter\"),_=zt(p,\"Third parameter\"),S=ts(o,\"First parameter\");if(S.readableType!==void 0)throw new RangeError(\"Invalid readableType specified\");if(S.writableType!==void 0)throw new RangeError(\"Invalid writableType specified\");const C=lt(_,0),q=Ot(_),P=lt(g,1),W=Ot(g);let O;const j=F(fe=>{O=fe});ss(this,j,P,W,C,q),us(this,S),S.start!==void 0?O(S.start(this._transformStreamController)):O(void 0)}get readable(){if(!_o(this))throw To(\"readable\");return this._readable}get writable(){if(!_o(this))throw To(\"writable\");return this._writable}};u(Xr,\"TransformStream\");let Je=Xr;Object.defineProperties(Je.prototype,{readable:{enumerable:!0},writable:{enumerable:!0}}),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(Je.prototype,Symbol.toStringTag,{value:\"TransformStream\",configurable:!0});function ss(n,o,a,p,g,_){function S(){return o}u(S,\"startAlgorithm\");function C(j){return cs(n,j)}u(C,\"writeAlgorithm\");function q(j){return ds(n,j)}u(q,\"abortAlgorithm\");function P(){return hs(n)}u(P,\"closeAlgorithm\"),n._writable=fi(S,C,P,q,a,p);function W(){return ps(n)}u(W,\"pullAlgorithm\");function O(j){return bs(n,j)}u(O,\"cancelAlgorithm\"),n._readable=ht(S,W,O,g,_),n._backpressure=void 0,n._backpressureChangePromise=void 0,n._backpressureChangePromise_resolve=void 0,Ht(n,!0),n._transformStreamController=void 0}u(ss,\"InitializeTransformStream\");function _o(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_transformStreamController\")?!1:n instanceof Je}u(_o,\"IsTransformStream\");function So(n,o){ue(n._readable._readableStreamController,o),jr(n,o)}u(So,\"TransformStreamError\");function jr(n,o){Qt(n._transformStreamController),ft(n._writable._writableStreamController,o),Lr(n)}u(jr,\"TransformStreamErrorWritableAndUnblockWrite\");function Lr(n){n._backpressure&&Ht(n,!1)}u(Lr,\"TransformStreamUnblockWrite\");function Ht(n,o){n._backpressureChangePromise!==void 0&&n._backpressureChangePromise_resolve(),n._backpressureChangePromise=F(a=>{n._backpressureChangePromise_resolve=a}),n._backpressure=o}u(Ht,\"TransformStreamSetBackpressure\");const en=class en{constructor(){throw new TypeError(\"Illegal constructor\")}get desiredSize(){if(!Vt(this))throw Gt(\"desiredSize\");const o=this._controlledTransformStream._readable._readableStreamController;return Fr(o)}enqueue(o=void 0){if(!Vt(this))throw Gt(\"enqueue\");wo(this,o)}error(o=void 0){if(!Vt(this))throw Gt(\"error\");ls(this,o)}terminate(){if(!Vt(this))throw Gt(\"terminate\");fs(this)}};u(en,\"TransformStreamDefaultController\");let me=en;Object.defineProperties(me.prototype,{enqueue:{enumerable:!0},error:{enumerable:!0},terminate:{enumerable:!0},desiredSize:{enumerable:!0}}),w(me.prototype.enqueue,\"enqueue\"),w(me.prototype.error,\"error\"),w(me.prototype.terminate,\"terminate\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(me.prototype,Symbol.toStringTag,{value:\"TransformStreamDefaultController\",configurable:!0});function Vt(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_controlledTransformStream\")?!1:n instanceof me}u(Vt,\"IsTransformStreamDefaultController\");function as(n,o,a,p,g){o._controlledTransformStream=n,n._transformStreamController=o,o._transformAlgorithm=a,o._flushAlgorithm=p,o._cancelAlgorithm=g,o._finishPromise=void 0,o._finishPromise_resolve=void 0,o._finishPromise_reject=void 0}u(as,\"SetUpTransformStreamDefaultController\");function us(n,o){const a=Object.create(me.prototype);let p,g,_;o.transform!==void 0?p=u(S=>o.transform(S,a),\"transformAlgorithm\"):p=u(S=>{try{return wo(a,S),k(void 0)}catch(C){return T(C)}},\"transformAlgorithm\"),o.flush!==void 0?g=u(()=>o.flush(a),\"flushAlgorithm\"):g=u(()=>k(void 0),\"flushAlgorithm\"),o.cancel!==void 0?_=u(S=>o.cancel(S),\"cancelAlgorithm\"):_=u(()=>k(void 0),\"cancelAlgorithm\"),as(n,a,p,g,_)}u(us,\"SetUpTransformStreamDefaultControllerFromTransformer\");function Qt(n){n._transformAlgorithm=void 0,n._flushAlgorithm=void 0,n._cancelAlgorithm=void 0}u(Qt,\"TransformStreamDefaultControllerClearAlgorithms\");function wo(n,o){const a=n._controlledTransformStream,p=a._readable._readableStreamController;if(!Ye(p))throw new TypeError(\"Readable side is not in a state that permits enqueue\");try{Ge(p,o)}catch(_){throw jr(a,_),a._readable._storedError}Li(p)!==a._backpressure&&Ht(a,!0)}u(wo,\"TransformStreamDefaultControllerEnqueue\");function ls(n,o){So(n._controlledTransformStream,o)}u(ls,\"TransformStreamDefaultControllerError\");function Ro(n,o){const a=n._transformAlgorithm(o);return N(a,void 0,p=>{throw So(n._controlledTransformStream,p),p})}u(Ro,\"TransformStreamDefaultControllerPerformTransform\");function fs(n){const o=n._controlledTransformStream,a=o._readable._readableStreamController;Le(a);const p=new TypeError(\"TransformStream terminated\");jr(o,p)}u(fs,\"TransformStreamDefaultControllerTerminate\");function cs(n,o){const a=n._transformStreamController;if(n._backpressure){const p=n._backpressureChangePromise;return N(p,()=>{const g=n._writable;if(g._state===\"erroring\")throw g._storedError;return Ro(a,o)})}return Ro(a,o)}u(cs,\"TransformStreamDefaultSinkWriteAlgorithm\");function ds(n,o){const a=n._transformStreamController;if(a._finishPromise!==void 0)return a._finishPromise;const p=n._readable;a._finishPromise=F((_,S)=>{a._finishPromise_resolve=_,a._finishPromise_reject=S});const g=a._cancelAlgorithm(o);return Qt(a),E(g,()=>(p._state===\"errored\"?Xe(a,p._storedError):(ue(p._readableStreamController,o),$r(a)),null),_=>(ue(p._readableStreamController,_),Xe(a,_),null)),a._finishPromise}u(ds,\"TransformStreamDefaultSinkAbortAlgorithm\");function hs(n){const o=n._transformStreamController;if(o._finishPromise!==void 0)return o._finishPromise;const a=n._readable;o._finishPromise=F((g,_)=>{o._finishPromise_resolve=g,o._finishPromise_reject=_});const p=o._flushAlgorithm();return Qt(o),E(p,()=>(a._state===\"errored\"?Xe(o,a._storedError):(Le(a._readableStreamController),$r(o)),null),g=>(ue(a._readableStreamController,g),Xe(o,g),null)),o._finishPromise}u(hs,\"TransformStreamDefaultSinkCloseAlgorithm\");function ps(n){return Ht(n,!1),n._backpressureChangePromise}u(ps,\"TransformStreamDefaultSourcePullAlgorithm\");function bs(n,o){const a=n._transformStreamController;if(a._finishPromise!==void 0)return a._finishPromise;const p=n._writable;a._finishPromise=F((_,S)=>{a._finishPromise_resolve=_,a._finishPromise_reject=S});const g=a._cancelAlgorithm(o);return Qt(a),E(g,()=>(p._state===\"errored\"?Xe(a,p._storedError):(ft(p._writableStreamController,o),Lr(n),$r(a)),null),_=>(ft(p._writableStreamController,_),Lr(n),Xe(a,_),null)),a._finishPromise}u(bs,\"TransformStreamDefaultSourceCancelAlgorithm\");function Gt(n){return new TypeError(`TransformStreamDefaultController.prototype.${n} can only be used on a TransformStreamDefaultController`)}u(Gt,\"defaultControllerBrandCheckException\");function $r(n){n._finishPromise_resolve!==void 0&&(n._finishPromise_resolve(),n._finishPromise_resolve=void 0,n._finishPromise_reject=void 0)}u($r,\"defaultControllerFinishPromiseResolve\");function Xe(n,o){n._finishPromise_reject!==void 0&&(J(n._finishPromise),n._finishPromise_reject(o),n._finishPromise_resolve=void 0,n._finishPromise_reject=void 0)}u(Xe,\"defaultControllerFinishPromiseReject\");function To(n){return new TypeError(`TransformStream.prototype.${n} can only be used on a TransformStream`)}u(To,\"streamBrandCheckException\"),d.ByteLengthQueuingStrategy=Ze,d.CountQueuingStrategy=Ke,d.ReadableByteStreamController=ie,d.ReadableStream=V,d.ReadableStreamBYOBReader=he,d.ReadableStreamBYOBRequest=Re,d.ReadableStreamDefaultController=ae,d.ReadableStreamDefaultReader=de,d.TransformStream=Je,d.TransformStreamDefaultController=me,d.WritableStream=pe,d.WritableStreamDefaultController=Be,d.WritableStreamDefaultWriter=se})}(ponyfill_es2018,ponyfill_es2018.exports)),ponyfill_es2018.exports}u(requirePonyfill_es2018,\"requirePonyfill_es2018\");const POOL_SIZE$1=65536;if(!globalThis.ReadableStream)try{const c=__webpack_require__(/*! node:process */ \"node:process\"),{emitWarning:l}=c;try{c.emitWarning=()=>{},Object.assign(globalThis,__webpack_require__(/*! node:stream/web */ \"node:stream/web\")),c.emitWarning=l}catch(d){throw c.emitWarning=l,d}}catch{Object.assign(globalThis,requirePonyfill_es2018())}try{const{Blob:c}=__webpack_require__(/*! buffer */ \"buffer\");c&&!c.prototype.stream&&(c.prototype.stream=u(function(d){let y=0;const b=this;return new ReadableStream({type:\"bytes\",async pull(R){const v=await b.slice(y,Math.min(b.size,y+POOL_SIZE$1)).arrayBuffer();y+=v.byteLength,R.enqueue(new Uint8Array(v)),y===b.size&&R.close()}})},\"name\"))}catch{}/*! fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */const POOL_SIZE=65536;async function*toIterator(c,l=!0){for(const d of c)if(\"stream\"in d)yield*d.stream();else if(ArrayBuffer.isView(d))if(l){let y=d.byteOffset;const b=d.byteOffset+d.byteLength;for(;y!==b;){const R=Math.min(b-y,POOL_SIZE),w=d.buffer.slice(y,y+R);y+=w.byteLength,yield new Uint8Array(w)}}else yield d;else{let y=0,b=d;for(;y!==b.size;){const w=await b.slice(y,Math.min(b.size,y+POOL_SIZE)).arrayBuffer();y+=w.byteLength,yield new Uint8Array(w)}}}u(toIterator,\"toIterator\");const _Blob=(Ue=class{constructor(l=[],d={}){ye(this,Pe,[]);ye(this,bt,\"\");ye(this,ot,0);ye(this,Zt,\"transparent\");if(typeof l!=\"object\"||l===null)throw new TypeError(\"Failed to construct 'Blob': The provided value cannot be converted to a sequence.\");if(typeof l[Symbol.iterator]!=\"function\")throw new TypeError(\"Failed to construct 'Blob': The object must have a callable @@iterator property.\");if(typeof d!=\"object\"&&typeof d!=\"function\")throw new TypeError(\"Failed to construct 'Blob': parameter 2 cannot convert to dictionary.\");d===null&&(d={});const y=new TextEncoder;for(const R of l){let w;ArrayBuffer.isView(R)?w=new Uint8Array(R.buffer.slice(R.byteOffset,R.byteOffset+R.byteLength)):R instanceof ArrayBuffer?w=new Uint8Array(R.slice(0)):R instanceof Ue?w=R:w=y.encode(`${R}`),ne(this,ot,D(this,ot)+(ArrayBuffer.isView(w)?w.byteLength:w.size)),D(this,Pe).push(w)}ne(this,Zt,`${d.endings===void 0?\"transparent\":d.endings}`);const b=d.type===void 0?\"\":String(d.type);ne(this,bt,/^[\\x20-\\x7E]*$/.test(b)?b:\"\")}get size(){return D(this,ot)}get type(){return D(this,bt)}async text(){const l=new TextDecoder;let d=\"\";for await(const y of toIterator(D(this,Pe),!1))d+=l.decode(y,{stream:!0});return d+=l.decode(),d}async arrayBuffer(){const l=new Uint8Array(this.size);let d=0;for await(const y of toIterator(D(this,Pe),!1))l.set(y,d),d+=y.length;return l.buffer}stream(){const l=toIterator(D(this,Pe),!0);return new globalThis.ReadableStream({type:\"bytes\",async pull(d){const y=await l.next();y.done?d.close():d.enqueue(y.value)},async cancel(){await l.return()}})}slice(l=0,d=this.size,y=\"\"){const{size:b}=this;let R=l<0?Math.max(b+l,0):Math.min(l,b),w=d<0?Math.max(b+d,0):Math.min(d,b);const v=Math.max(w-R,0),I=D(this,Pe),B=[];let F=0;for(const T of I){if(F>=v)break;const $=ArrayBuffer.isView(T)?T.byteLength:T.size;if(R&&$<=R)R-=$,w-=$;else{let E;ArrayBuffer.isView(T)?(E=T.subarray(R,Math.min($,w)),F+=E.byteLength):(E=T.slice(R,Math.min($,w)),F+=E.size),w-=$,B.push(E),R=0}}const k=new Ue([],{type:String(y).toLowerCase()});return ne(k,ot,v),ne(k,Pe,B),k}get[Symbol.toStringTag](){return\"Blob\"}static[Symbol.hasInstance](l){return l&&typeof l==\"object\"&&typeof l.constructor==\"function\"&&(typeof l.stream==\"function\"||typeof l.arrayBuffer==\"function\")&&/^(Blob|File)$/.test(l[Symbol.toStringTag])}},Pe=new WeakMap,bt=new WeakMap,ot=new WeakMap,Zt=new WeakMap,u(Ue,\"Blob\"),Ue);Object.defineProperties(_Blob.prototype,{size:{enumerable:!0},type:{enumerable:!0},slice:{enumerable:!0}});const Blob=_Blob,r$1=Blob,_File=(gt=class extends r$1{constructor(d,y,b={}){if(arguments.length<2)throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`);super(d,b);ye(this,mt,0);ye(this,yt,\"\");b===null&&(b={});const R=b.lastModified===void 0?Date.now():Number(b.lastModified);Number.isNaN(R)||ne(this,mt,R),ne(this,yt,String(y))}get name(){return D(this,yt)}get lastModified(){return D(this,mt)}get[Symbol.toStringTag](){return\"File\"}static[Symbol.hasInstance](d){return!!d&&d instanceof r$1&&/^(File)$/.test(d[Symbol.toStringTag])}},mt=new WeakMap,yt=new WeakMap,u(gt,\"File\"),gt),File=_File,File$1=File;/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */var{toStringTag:t$1,iterator:i,hasInstance:h}=Symbol,r=Math.random,m=\"append,set,get,getAll,delete,keys,values,entries,forEach,constructor\".split(\",\"),f=u((c,l,d)=>(c+=\"\",/^(Blob|File)$/.test(l&&l[t$1])?[(d=d!==void 0?d+\"\":l[t$1]==\"File\"?l.name:\"blob\",c),l.name!==d||l[t$1]==\"blob\"?new File$1([l],d,l):l]:[c,l+\"\"]),\"f\"),e$1=u((c,l)=>(l?c:c.replace(/\\r?\\n|\\r/g,`\\r\n`)).replace(/\\n/g,\"%0A\").replace(/\\r/g,\"%0D\").replace(/\"/g,\"%22\"),\"e$1\"),x=u((c,l,d)=>{if(l.length<d)throw new TypeError(`Failed to execute '${c}' on 'FormData': ${d} arguments required, but only ${l.length} present.`)},\"x\");const FormData=(_t=class{constructor(...l){ye(this,oe,[]);if(l.length)throw new TypeError(\"Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.\")}get[t$1](){return\"FormData\"}[i](){return this.entries()}static[h](l){return l&&typeof l==\"object\"&&l[t$1]===\"FormData\"&&!m.some(d=>typeof l[d]!=\"function\")}append(...l){x(\"append\",arguments,2),D(this,oe).push(f(...l))}delete(l){x(\"delete\",arguments,1),l+=\"\",ne(this,oe,D(this,oe).filter(([d])=>d!==l))}get(l){x(\"get\",arguments,1),l+=\"\";for(var d=D(this,oe),y=d.length,b=0;b<y;b++)if(d[b][0]===l)return d[b][1];return null}getAll(l,d){return x(\"getAll\",arguments,1),d=[],l+=\"\",D(this,oe).forEach(y=>y[0]===l&&d.push(y[1])),d}has(l){return x(\"has\",arguments,1),l+=\"\",D(this,oe).some(d=>d[0]===l)}forEach(l,d){x(\"forEach\",arguments,1);for(var[y,b]of this)l.call(d,b,y,this)}set(...l){x(\"set\",arguments,2);var d=[],y=!0;l=f(...l),D(this,oe).forEach(b=>{b[0]===l[0]?y&&(y=!d.push(l)):d.push(b)}),y&&d.push(l),ne(this,oe,d)}*entries(){yield*D(this,oe)}*keys(){for(var[l]of this)yield l}*values(){for(var[,l]of this)yield l}},oe=new WeakMap,u(_t,\"FormData\"),_t);function formDataToBlob(c,l=r$1){var d=`${r()}${r()}`.replace(/\\./g,\"\").slice(-28).padStart(32,\"-\"),y=[],b=`--${d}\\r\nContent-Disposition: form-data; name=\"`;return c.forEach((R,w)=>typeof R==\"string\"?y.push(b+e$1(w)+`\"\\r\n\\r\n${R.replace(/\\r(?!\\n)|(?<!\\r)\\n/g,`\\r\n`)}\\r\n`):y.push(b+e$1(w)+`\"; filename=\"${e$1(R.name,1)}\"\\r\nContent-Type: ${R.type||\"application/octet-stream\"}\\r\n\\r\n`,R,`\\r\n`)),y.push(`--${d}--`),new l(y,{type:\"multipart/form-data; boundary=\"+d})}u(formDataToBlob,\"formDataToBlob\");const rn=class rn extends Error{constructor(l,d){super(l),Error.captureStackTrace(this,this.constructor),this.type=d}get name(){return this.constructor.name}get[Symbol.toStringTag](){return this.constructor.name}};u(rn,\"FetchBaseError\");let FetchBaseError=rn;const nn=class nn extends FetchBaseError{constructor(l,d,y){super(l,d),y&&(this.code=this.errno=y.code,this.erroredSysCall=y.syscall)}};u(nn,\"FetchError\");let FetchError=nn;const NAME=Symbol.toStringTag,isURLSearchParameters=u(c=>typeof c==\"object\"&&typeof c.append==\"function\"&&typeof c.delete==\"function\"&&typeof c.get==\"function\"&&typeof c.getAll==\"function\"&&typeof c.has==\"function\"&&typeof c.set==\"function\"&&typeof c.sort==\"function\"&&c[NAME]===\"URLSearchParams\",\"isURLSearchParameters\"),isBlob=u(c=>c&&typeof c==\"object\"&&typeof c.arrayBuffer==\"function\"&&typeof c.type==\"string\"&&typeof c.stream==\"function\"&&typeof c.constructor==\"function\"&&/^(Blob|File)$/.test(c[NAME]),\"isBlob\"),isAbortSignal=u(c=>typeof c==\"object\"&&(c[NAME]===\"AbortSignal\"||c[NAME]===\"EventTarget\"),\"isAbortSignal\"),isDomainOrSubdomain=u((c,l)=>{const d=new URL(l).hostname,y=new URL(c).hostname;return d===y||d.endsWith(`.${y}`)},\"isDomainOrSubdomain\"),isSameProtocol=u((c,l)=>{const d=new URL(l).protocol,y=new URL(c).protocol;return d===y},\"isSameProtocol\"),pipeline=require$$0.promisify(Stream__default.pipeline),INTERNALS$2=Symbol(\"Body internals\"),on=class on{constructor(l,{size:d=0}={}){let y=null;l===null?l=null:isURLSearchParameters(l)?l=require$$6.Buffer.from(l.toString()):isBlob(l)||require$$6.Buffer.isBuffer(l)||(require$$0.types.isAnyArrayBuffer(l)?l=require$$6.Buffer.from(l):ArrayBuffer.isView(l)?l=require$$6.Buffer.from(l.buffer,l.byteOffset,l.byteLength):l instanceof Stream__default||(l instanceof FormData?(l=formDataToBlob(l),y=l.type.split(\"=\")[1]):l=require$$6.Buffer.from(String(l))));let b=l;require$$6.Buffer.isBuffer(l)?b=Stream__default.Readable.from(l):isBlob(l)&&(b=Stream__default.Readable.from(l.stream())),this[INTERNALS$2]={body:l,stream:b,boundary:y,disturbed:!1,error:null},this.size=d,l instanceof Stream__default&&l.on(\"error\",R=>{const w=R instanceof FetchBaseError?R:new FetchError(`Invalid response body while trying to fetch ${this.url}: ${R.message}`,\"system\",R);this[INTERNALS$2].error=w})}get body(){return this[INTERNALS$2].stream}get bodyUsed(){return this[INTERNALS$2].disturbed}async arrayBuffer(){const{buffer:l,byteOffset:d,byteLength:y}=await consumeBody(this);return l.slice(d,d+y)}async formData(){const l=this.headers.get(\"content-type\");if(l.startsWith(\"application/x-www-form-urlencoded\")){const y=new FormData,b=new URLSearchParams(await this.text());for(const[R,w]of b)y.append(R,w);return y}const{toFormData:d}=await __webpack_require__.e(/*! import() */ \"vendor-chunks/node-fetch-native-with-agent\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./chunks/multipart-parser.cjs */ \"(rsc)/./node_modules/node-fetch-native-with-agent/dist/chunks/multipart-parser.cjs\", 19));return d(this.body,l)}async blob(){const l=this.headers&&this.headers.get(\"content-type\")||this[INTERNALS$2].body&&this[INTERNALS$2].body.type||\"\",d=await this.arrayBuffer();return new r$1([d],{type:l})}async json(){const l=await this.text();return JSON.parse(l)}async text(){const l=await consumeBody(this);return new TextDecoder().decode(l)}buffer(){return consumeBody(this)}};u(on,\"Body\");let Body=on;Body.prototype.buffer=require$$0.deprecate(Body.prototype.buffer,\"Please use 'response.arrayBuffer()' instead of 'response.buffer()'\",\"node-fetch#buffer\"),Object.defineProperties(Body.prototype,{body:{enumerable:!0},bodyUsed:{enumerable:!0},arrayBuffer:{enumerable:!0},blob:{enumerable:!0},json:{enumerable:!0},text:{enumerable:!0},data:{get:require$$0.deprecate(()=>{},\"data doesn't exist, use json(), text(), arrayBuffer(), or body instead\",\"https://github.com/node-fetch/node-fetch/issues/1000 (response)\")}});async function consumeBody(c){if(c[INTERNALS$2].disturbed)throw new TypeError(`body used already for: ${c.url}`);if(c[INTERNALS$2].disturbed=!0,c[INTERNALS$2].error)throw c[INTERNALS$2].error;const{body:l}=c;if(l===null||!(l instanceof Stream__default))return require$$6.Buffer.alloc(0);const d=[];let y=0;try{for await(const b of l){if(c.size>0&&y+b.length>c.size){const R=new FetchError(`content size at ${c.url} over limit: ${c.size}`,\"max-size\");throw l.destroy(R),R}y+=b.length,d.push(b)}}catch(b){throw b instanceof FetchBaseError?b:new FetchError(`Invalid response body while trying to fetch ${c.url}: ${b.message}`,\"system\",b)}if(l.readableEnded===!0||l._readableState.ended===!0)try{return d.every(b=>typeof b==\"string\")?require$$6.Buffer.from(d.join(\"\")):require$$6.Buffer.concat(d,y)}catch(b){throw new FetchError(`Could not create Buffer from response body for ${c.url}: ${b.message}`,\"system\",b)}else throw new FetchError(`Premature close of server response while trying to fetch ${c.url}`)}u(consumeBody,\"consumeBody\");const clone=u((c,l)=>{let d,y,{body:b}=c[INTERNALS$2];if(c.bodyUsed)throw new Error(\"cannot clone body after it is used\");return b instanceof Stream__default&&typeof b.getBoundary!=\"function\"&&(d=new Stream.PassThrough({highWaterMark:l}),y=new Stream.PassThrough({highWaterMark:l}),b.pipe(d),b.pipe(y),c[INTERNALS$2].stream=d,b=y),b},\"clone\"),getNonSpecFormDataBoundary=require$$0.deprecate(c=>c.getBoundary(),\"form-data doesn't follow the spec and requires special treatment. Use alternative package\",\"https://github.com/node-fetch/node-fetch/issues/1167\"),extractContentType=u((c,l)=>c===null?null:typeof c==\"string\"?\"text/plain;charset=UTF-8\":isURLSearchParameters(c)?\"application/x-www-form-urlencoded;charset=UTF-8\":isBlob(c)?c.type||null:require$$6.Buffer.isBuffer(c)||require$$0.types.isAnyArrayBuffer(c)||ArrayBuffer.isView(c)?null:c instanceof FormData?`multipart/form-data; boundary=${l[INTERNALS$2].boundary}`:c&&typeof c.getBoundary==\"function\"?`multipart/form-data;boundary=${getNonSpecFormDataBoundary(c)}`:c instanceof Stream__default?null:\"text/plain;charset=UTF-8\",\"extractContentType\"),getTotalBytes=u(c=>{const{body:l}=c[INTERNALS$2];return l===null?0:isBlob(l)?l.size:require$$6.Buffer.isBuffer(l)?l.length:l&&typeof l.getLengthSync==\"function\"&&l.hasKnownLength&&l.hasKnownLength()?l.getLengthSync():null},\"getTotalBytes\"),writeToStream=u(async(c,{body:l})=>{l===null?c.end():await pipeline(l,c)},\"writeToStream\"),validateHeaderName=typeof http__default.validateHeaderName==\"function\"?http__default.validateHeaderName:c=>{if(!/^[\\^`\\-\\w!#$%&'*+.|~]+$/.test(c)){const l=new TypeError(`Header name must be a valid HTTP token [${c}]`);throw Object.defineProperty(l,\"code\",{value:\"ERR_INVALID_HTTP_TOKEN\"}),l}},validateHeaderValue=typeof http__default.validateHeaderValue==\"function\"?http__default.validateHeaderValue:(c,l)=>{if(/[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/.test(l)){const d=new TypeError(`Invalid character in header content [\"${c}\"]`);throw Object.defineProperty(d,\"code\",{value:\"ERR_INVALID_CHAR\"}),d}},Kt=class Kt extends URLSearchParams{constructor(l){let d=[];if(l instanceof Kt){const y=l.raw();for(const[b,R]of Object.entries(y))d.push(...R.map(w=>[b,w]))}else if(l!=null)if(typeof l==\"object\"&&!require$$0.types.isBoxedPrimitive(l)){const y=l[Symbol.iterator];if(y==null)d.push(...Object.entries(l));else{if(typeof y!=\"function\")throw new TypeError(\"Header pairs must be iterable\");d=[...l].map(b=>{if(typeof b!=\"object\"||require$$0.types.isBoxedPrimitive(b))throw new TypeError(\"Each header pair must be an iterable object\");return[...b]}).map(b=>{if(b.length!==2)throw new TypeError(\"Each header pair must be a name/value tuple\");return[...b]})}}else throw new TypeError(\"Failed to construct 'Headers': The provided value is not of type '(sequence<sequence<ByteString>> or record<ByteString, ByteString>)\");return d=d.length>0?d.map(([y,b])=>(validateHeaderName(y),validateHeaderValue(y,String(b)),[String(y).toLowerCase(),String(b)])):void 0,super(d),new Proxy(this,{get(y,b,R){switch(b){case\"append\":case\"set\":return(w,v)=>(validateHeaderName(w),validateHeaderValue(w,String(v)),URLSearchParams.prototype[b].call(y,String(w).toLowerCase(),String(v)));case\"delete\":case\"has\":case\"getAll\":return w=>(validateHeaderName(w),URLSearchParams.prototype[b].call(y,String(w).toLowerCase()));case\"keys\":return()=>(y.sort(),new Set(URLSearchParams.prototype.keys.call(y)).keys());default:return Reflect.get(y,b,R)}}})}get[Symbol.toStringTag](){return this.constructor.name}toString(){return Object.prototype.toString.call(this)}get(l){const d=this.getAll(l);if(d.length===0)return null;let y=d.join(\", \");return/^content-encoding$/i.test(l)&&(y=y.toLowerCase()),y}forEach(l,d=void 0){for(const y of this.keys())Reflect.apply(l,d,[this.get(y),y,this])}*values(){for(const l of this.keys())yield this.get(l)}*entries(){for(const l of this.keys())yield[l,this.get(l)]}[Symbol.iterator](){return this.entries()}raw(){return[...this.keys()].reduce((l,d)=>(l[d]=this.getAll(d),l),{})}[Symbol.for(\"nodejs.util.inspect.custom\")](){return[...this.keys()].reduce((l,d)=>{const y=this.getAll(d);return d===\"host\"?l[d]=y[0]:l[d]=y.length>1?y:y[0],l},{})}};u(Kt,\"Headers\");let Headers=Kt;Object.defineProperties(Headers.prototype,[\"get\",\"entries\",\"forEach\",\"values\"].reduce((c,l)=>(c[l]={enumerable:!0},c),{}));function fromRawHeaders(c=[]){return new Headers(c.reduce((l,d,y,b)=>(y%2===0&&l.push(b.slice(y,y+2)),l),[]).filter(([l,d])=>{try{return validateHeaderName(l),validateHeaderValue(l,String(d)),!0}catch{return!1}}))}u(fromRawHeaders,\"fromRawHeaders\");const redirectStatus=new Set([301,302,303,307,308]),isRedirect=u(c=>redirectStatus.has(c),\"isRedirect\"),INTERNALS$1=Symbol(\"Response internals\"),De=class De extends Body{constructor(l=null,d={}){super(l,d);const y=d.status!=null?d.status:200,b=new Headers(d.headers);if(l!==null&&!b.has(\"Content-Type\")){const R=extractContentType(l,this);R&&b.append(\"Content-Type\",R)}this[INTERNALS$1]={type:\"default\",url:d.url,status:y,statusText:d.statusText||\"\",headers:b,counter:d.counter,highWaterMark:d.highWaterMark}}get type(){return this[INTERNALS$1].type}get url(){return this[INTERNALS$1].url||\"\"}get status(){return this[INTERNALS$1].status}get ok(){return this[INTERNALS$1].status>=200&&this[INTERNALS$1].status<300}get redirected(){return this[INTERNALS$1].counter>0}get statusText(){return this[INTERNALS$1].statusText}get headers(){return this[INTERNALS$1].headers}get highWaterMark(){return this[INTERNALS$1].highWaterMark}clone(){return new De(clone(this,this.highWaterMark),{type:this.type,url:this.url,status:this.status,statusText:this.statusText,headers:this.headers,ok:this.ok,redirected:this.redirected,size:this.size,highWaterMark:this.highWaterMark})}static redirect(l,d=302){if(!isRedirect(d))throw new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');return new De(null,{headers:{location:new URL(l).toString()},status:d})}static error(){const l=new De(null,{status:0,statusText:\"\"});return l[INTERNALS$1].type=\"error\",l}static json(l=void 0,d={}){const y=JSON.stringify(l);if(y===void 0)throw new TypeError(\"data is not JSON serializable\");const b=new Headers(d&&d.headers);return b.has(\"content-type\")||b.set(\"content-type\",\"application/json\"),new De(y,{...d,headers:b})}get[Symbol.toStringTag](){return\"Response\"}};u(De,\"Response\");let Response=De;Object.defineProperties(Response.prototype,{type:{enumerable:!0},url:{enumerable:!0},status:{enumerable:!0},ok:{enumerable:!0},redirected:{enumerable:!0},statusText:{enumerable:!0},headers:{enumerable:!0},clone:{enumerable:!0}});const getSearch=u(c=>{if(c.search)return c.search;const l=c.href.length-1,d=c.hash||(c.href[l]===\"#\"?\"#\":\"\");return c.href[l-d.length]===\"?\"?\"?\":\"\"},\"getSearch\");function stripURLForUseAsAReferrer(c,l=!1){return c==null||(c=new URL(c),/^(about|blob|data):$/.test(c.protocol))?\"no-referrer\":(c.username=\"\",c.password=\"\",c.hash=\"\",l&&(c.pathname=\"\",c.search=\"\"),c)}u(stripURLForUseAsAReferrer,\"stripURLForUseAsAReferrer\");const ReferrerPolicy=new Set([\"\",\"no-referrer\",\"no-referrer-when-downgrade\",\"same-origin\",\"origin\",\"strict-origin\",\"origin-when-cross-origin\",\"strict-origin-when-cross-origin\",\"unsafe-url\"]),DEFAULT_REFERRER_POLICY=\"strict-origin-when-cross-origin\";function validateReferrerPolicy(c){if(!ReferrerPolicy.has(c))throw new TypeError(`Invalid referrerPolicy: ${c}`);return c}u(validateReferrerPolicy,\"validateReferrerPolicy\");function isOriginPotentiallyTrustworthy(c){if(/^(http|ws)s:$/.test(c.protocol))return!0;const l=c.host.replace(/(^\\[)|(]$)/g,\"\"),d=require$$4.isIP(l);return d===4&&/^127\\./.test(l)||d===6&&/^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(l)?!0:c.host===\"localhost\"||c.host.endsWith(\".localhost\")?!1:c.protocol===\"file:\"}u(isOriginPotentiallyTrustworthy,\"isOriginPotentiallyTrustworthy\");function isUrlPotentiallyTrustworthy(c){return/^about:(blank|srcdoc)$/.test(c)||c.protocol===\"data:\"||/^(blob|filesystem):$/.test(c.protocol)?!0:isOriginPotentiallyTrustworthy(c)}u(isUrlPotentiallyTrustworthy,\"isUrlPotentiallyTrustworthy\");function determineRequestsReferrer(c,{referrerURLCallback:l,referrerOriginCallback:d}={}){if(c.referrer===\"no-referrer\"||c.referrerPolicy===\"\")return null;const y=c.referrerPolicy;if(c.referrer===\"about:client\")return\"no-referrer\";const b=c.referrer;let R=stripURLForUseAsAReferrer(b),w=stripURLForUseAsAReferrer(b,!0);R.toString().length>4096&&(R=w),l&&(R=l(R)),d&&(w=d(w));const v=new URL(c.url);switch(y){case\"no-referrer\":return\"no-referrer\";case\"origin\":return w;case\"unsafe-url\":return R;case\"strict-origin\":return isUrlPotentiallyTrustworthy(R)&&!isUrlPotentiallyTrustworthy(v)?\"no-referrer\":w.toString();case\"strict-origin-when-cross-origin\":return R.origin===v.origin?R:isUrlPotentiallyTrustworthy(R)&&!isUrlPotentiallyTrustworthy(v)?\"no-referrer\":w;case\"same-origin\":return R.origin===v.origin?R:\"no-referrer\";case\"origin-when-cross-origin\":return R.origin===v.origin?R:w;case\"no-referrer-when-downgrade\":return isUrlPotentiallyTrustworthy(R)&&!isUrlPotentiallyTrustworthy(v)?\"no-referrer\":R;default:throw new TypeError(`Invalid referrerPolicy: ${y}`)}}u(determineRequestsReferrer,\"determineRequestsReferrer\");function parseReferrerPolicyFromHeader(c){const l=(c.get(\"referrer-policy\")||\"\").split(/[,\\s]+/);let d=\"\";for(const y of l)y&&ReferrerPolicy.has(y)&&(d=y);return d}u(parseReferrerPolicyFromHeader,\"parseReferrerPolicyFromHeader\");const INTERNALS=Symbol(\"Request internals\"),isRequest=u(c=>typeof c==\"object\"&&typeof c[INTERNALS]==\"object\",\"isRequest\"),doBadDataWarn=require$$0.deprecate(()=>{},\".data is not a valid RequestInit property, use .body instead\",\"https://github.com/node-fetch/node-fetch/issues/1000 (request)\"),Jt=class Jt extends Body{constructor(l,d={}){let y;if(isRequest(l)?y=new URL(l.url):(y=new URL(l),l={}),y.username!==\"\"||y.password!==\"\")throw new TypeError(`${y} is an url with embedded credentials.`);let b=d.method||l.method||\"GET\";if(/^(delete|get|head|options|post|put)$/i.test(b)&&(b=b.toUpperCase()),!isRequest(d)&&\"data\"in d&&doBadDataWarn(),(d.body!=null||isRequest(l)&&l.body!==null)&&(b===\"GET\"||b===\"HEAD\"))throw new TypeError(\"Request with GET/HEAD method cannot have body\");const R=d.body?d.body:isRequest(l)&&l.body!==null?clone(l):null;super(R,{size:d.size||l.size||0});const w=new Headers(d.headers||l.headers||{});if(R!==null&&!w.has(\"Content-Type\")){const B=extractContentType(R,this);B&&w.set(\"Content-Type\",B)}let v=isRequest(l)?l.signal:null;if(\"signal\"in d&&(v=d.signal),v!=null&&!isAbortSignal(v))throw new TypeError(\"Expected signal to be an instanceof AbortSignal or EventTarget\");let I=d.referrer==null?l.referrer:d.referrer;if(I===\"\")I=\"no-referrer\";else if(I){const B=new URL(I);I=/^about:(\\/\\/)?client$/.test(B)?\"client\":B}else I=void 0;this[INTERNALS]={method:b,redirect:d.redirect||l.redirect||\"follow\",headers:w,parsedURL:y,signal:v,referrer:I},this.follow=d.follow===void 0?l.follow===void 0?20:l.follow:d.follow,this.compress=d.compress===void 0?l.compress===void 0?!0:l.compress:d.compress,this.counter=d.counter||l.counter||0,this.agent=d.agent||l.agent,this.highWaterMark=d.highWaterMark||l.highWaterMark||16384,this.insecureHTTPParser=d.insecureHTTPParser||l.insecureHTTPParser||!1,this.referrerPolicy=d.referrerPolicy||l.referrerPolicy||\"\"}get method(){return this[INTERNALS].method}get url(){return require$$1.format(this[INTERNALS].parsedURL)}get headers(){return this[INTERNALS].headers}get redirect(){return this[INTERNALS].redirect}get signal(){return this[INTERNALS].signal}get referrer(){if(this[INTERNALS].referrer===\"no-referrer\")return\"\";if(this[INTERNALS].referrer===\"client\")return\"about:client\";if(this[INTERNALS].referrer)return this[INTERNALS].referrer.toString()}get referrerPolicy(){return this[INTERNALS].referrerPolicy}set referrerPolicy(l){this[INTERNALS].referrerPolicy=validateReferrerPolicy(l)}clone(){return new Jt(this)}get[Symbol.toStringTag](){return\"Request\"}};u(Jt,\"Request\");let Request=Jt;Object.defineProperties(Request.prototype,{method:{enumerable:!0},url:{enumerable:!0},headers:{enumerable:!0},redirect:{enumerable:!0},clone:{enumerable:!0},signal:{enumerable:!0},referrer:{enumerable:!0},referrerPolicy:{enumerable:!0}});const getNodeRequestOptions=u(c=>{const{parsedURL:l}=c[INTERNALS],d=new Headers(c[INTERNALS].headers);d.has(\"Accept\")||d.set(\"Accept\",\"*/*\");let y=null;if(c.body===null&&/^(post|put)$/i.test(c.method)&&(y=\"0\"),c.body!==null){const v=getTotalBytes(c);typeof v==\"number\"&&!Number.isNaN(v)&&(y=String(v))}y&&d.set(\"Content-Length\",y),c.referrerPolicy===\"\"&&(c.referrerPolicy=DEFAULT_REFERRER_POLICY),c.referrer&&c.referrer!==\"no-referrer\"?c[INTERNALS].referrer=determineRequestsReferrer(c):c[INTERNALS].referrer=\"no-referrer\",c[INTERNALS].referrer instanceof URL&&d.set(\"Referer\",c.referrer),d.has(\"User-Agent\")||d.set(\"User-Agent\",\"node-fetch\"),c.compress&&!d.has(\"Accept-Encoding\")&&d.set(\"Accept-Encoding\",\"gzip, deflate, br\");let{agent:b}=c;typeof b==\"function\"&&(b=b(l));const R=getSearch(l),w={path:l.pathname+R,method:c.method,headers:d[Symbol.for(\"nodejs.util.inspect.custom\")](),insecureHTTPParser:c.insecureHTTPParser,agent:b};return{parsedURL:l,options:w}},\"getNodeRequestOptions\"),sn=class sn extends FetchBaseError{constructor(l,d=\"aborted\"){super(l,d)}};u(sn,\"AbortError\");let AbortError=sn;/*! node-domexception. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */if(!globalThis.DOMException)try{const{MessageChannel:c}=__webpack_require__(/*! worker_threads */ \"worker_threads\"),l=new c().port1,d=new ArrayBuffer;l.postMessage(d,[d,d])}catch(c){c.constructor.name===\"DOMException\"&&(globalThis.DOMException=c.constructor)}var nodeDomexception=globalThis.DOMException;const DOMException=_commonjsHelpers.getDefaultExportFromCjs(nodeDomexception),{stat}=node_fs.promises,blobFromSync=u((c,l)=>fromBlob(node_fs.statSync(c),c,l),\"blobFromSync\"),blobFrom=u((c,l)=>stat(c).then(d=>fromBlob(d,c,l)),\"blobFrom\"),fileFrom=u((c,l)=>stat(c).then(d=>fromFile(d,c,l)),\"fileFrom\"),fileFromSync=u((c,l)=>fromFile(node_fs.statSync(c),c,l),\"fileFromSync\"),fromBlob=u((c,l,d=\"\")=>new r$1([new BlobDataItem({path:l,size:c.size,lastModified:c.mtimeMs,start:0})],{type:d}),\"fromBlob\"),fromFile=u((c,l,d=\"\")=>new File$1([new BlobDataItem({path:l,size:c.size,lastModified:c.mtimeMs,start:0})],node_path.basename(l),{type:d,lastModified:c.mtimeMs}),\"fromFile\"),Xt=class Xt{constructor(l){ye(this,Me,void 0);ye(this,xe,void 0);ne(this,Me,l.path),ne(this,xe,l.start),this.size=l.size,this.lastModified=l.lastModified}slice(l,d){return new Xt({path:D(this,Me),lastModified:this.lastModified,size:d-l,start:D(this,xe)+l})}async*stream(){const{mtimeMs:l}=await stat(D(this,Me));if(l>this.lastModified)throw new DOMException(\"The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.\",\"NotReadableError\");yield*node_fs.createReadStream(D(this,Me),{start:D(this,xe),end:D(this,xe)+this.size-1})}get[Symbol.toStringTag](){return\"Blob\"}};Me=new WeakMap,xe=new WeakMap,u(Xt,\"BlobDataItem\");let BlobDataItem=Xt;const supportedSchemas=new Set([\"data:\",\"http:\",\"https:\"]);async function fetch$1(c,l){return new Promise((d,y)=>{const b=new Request(c,l),{parsedURL:R,options:w}=getNodeRequestOptions(b);if(!supportedSchemas.has(R.protocol))throw new TypeError(`node-fetch cannot load ${c}. URL scheme \"${R.protocol.replace(/:$/,\"\")}\" is not supported.`);if(R.protocol===\"data:\"){const E=dataUriToBuffer(b.url),K=new Response(E,{headers:{\"Content-Type\":E.typeFull}});d(K);return}const v=(R.protocol===\"https:\"?https__default:http__default).request,{signal:I}=b;let B=null;const F=u(()=>{const E=new AbortError(\"The operation was aborted.\");y(E),b.body&&b.body instanceof Stream__default.Readable&&b.body.destroy(E),!(!B||!B.body)&&B.body.emit(\"error\",E)},\"abort\");if(I&&I.aborted){F();return}const k=u(()=>{F(),$()},\"abortAndFinalize\"),T=v(R.toString(),w);I&&I.addEventListener(\"abort\",k);const $=u(()=>{T.abort(),I&&I.removeEventListener(\"abort\",k)},\"finalize\");T.on(\"error\",E=>{y(new FetchError(`request to ${b.url} failed, reason: ${E.message}`,\"system\",E)),$()}),fixResponseChunkedTransferBadEnding(T,E=>{B&&B.body&&B.body.destroy(E)}),process.version<\"v14\"&&T.on(\"socket\",E=>{let K;E.prependListener(\"end\",()=>{K=E._eventsCount}),E.prependListener(\"close\",U=>{if(B&&K<E._eventsCount&&!U){const N=new Error(\"Premature close\");N.code=\"ERR_STREAM_PREMATURE_CLOSE\",B.body.emit(\"error\",N)}})}),T.on(\"response\",E=>{T.setTimeout(0);const K=fromRawHeaders(E.rawHeaders);if(isRedirect(E.statusCode)){const M=K.get(\"Location\");let H=null;try{H=M===null?null:new URL(M,b.url)}catch{if(b.redirect!==\"manual\"){y(new FetchError(`uri requested responds with an invalid redirect URL: ${M}`,\"invalid-redirect\")),$();return}}switch(b.redirect){case\"error\":y(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${b.url}`,\"no-redirect\")),$();return;case\"manual\":break;case\"follow\":{if(H===null)break;if(b.counter>=b.follow){y(new FetchError(`maximum redirect reached at: ${b.url}`,\"max-redirect\")),$();return}const G={headers:new Headers(b.headers),follow:b.follow,counter:b.counter+1,agent:b.agent,compress:b.compress,method:b.method,body:clone(b),signal:b.signal,size:b.size,referrer:b.referrer,referrerPolicy:b.referrerPolicy};if(!isDomainOrSubdomain(b.url,H)||!isSameProtocol(b.url,H))for(const wt of[\"authorization\",\"www-authenticate\",\"cookie\",\"cookie2\"])G.headers.delete(wt);if(E.statusCode!==303&&b.body&&l.body instanceof Stream__default.Readable){y(new FetchError(\"Cannot follow redirect with body being a readable stream\",\"unsupported-redirect\")),$();return}(E.statusCode===303||(E.statusCode===301||E.statusCode===302)&&b.method===\"POST\")&&(G.method=\"GET\",G.body=void 0,G.headers.delete(\"content-length\"));const Q=parseReferrerPolicyFromHeader(K);Q&&(G.referrerPolicy=Q),d(fetch$1(new Request(H,G))),$();return}default:return y(new TypeError(`Redirect option '${b.redirect}' is not a valid value of RequestRedirect`))}}I&&E.once(\"end\",()=>{I.removeEventListener(\"abort\",k)});let U=Stream.pipeline(E,new Stream.PassThrough,M=>{M&&y(M)});process.version<\"v12.10\"&&E.on(\"aborted\",k);const N={url:b.url,status:E.statusCode,statusText:E.statusMessage,headers:K,size:b.size,counter:b.counter,highWaterMark:b.highWaterMark},J=K.get(\"Content-Encoding\");if(!b.compress||b.method===\"HEAD\"||J===null||E.statusCode===204||E.statusCode===304){B=new Response(U,N),d(B);return}const ge={flush:zlib__default.Z_SYNC_FLUSH,finishFlush:zlib__default.Z_SYNC_FLUSH};if(J===\"gzip\"||J===\"x-gzip\"){U=Stream.pipeline(U,zlib__default.createGunzip(ge),M=>{M&&y(M)}),B=new Response(U,N),d(B);return}if(J===\"deflate\"||J===\"x-deflate\"){const M=Stream.pipeline(E,new Stream.PassThrough,H=>{H&&y(H)});M.once(\"data\",H=>{(H[0]&15)===8?U=Stream.pipeline(U,zlib__default.createInflate(),G=>{G&&y(G)}):U=Stream.pipeline(U,zlib__default.createInflateRaw(),G=>{G&&y(G)}),B=new Response(U,N),d(B)}),M.once(\"end\",()=>{B||(B=new Response(U,N),d(B))});return}if(J===\"br\"){U=Stream.pipeline(U,zlib__default.createBrotliDecompress(),M=>{M&&y(M)}),B=new Response(U,N),d(B);return}B=new Response(U,N),d(B)}),writeToStream(T,b).catch(y)})}u(fetch$1,\"fetch$1\");function fixResponseChunkedTransferBadEnding(c,l){const d=require$$6.Buffer.from(`0\\r\n\\r\n`);let y=!1,b=!1,R;c.on(\"response\",w=>{const{headers:v}=w;y=v[\"transfer-encoding\"]===\"chunked\"&&!v[\"content-length\"]}),c.on(\"socket\",w=>{const v=u(()=>{if(y&&!b){const B=new Error(\"Premature close\");B.code=\"ERR_STREAM_PREMATURE_CLOSE\",l(B)}},\"onSocketClose\"),I=u(B=>{b=require$$6.Buffer.compare(B.slice(-5),d)===0,!b&&R&&(b=require$$6.Buffer.compare(R.slice(-3),d.slice(0,3))===0&&require$$6.Buffer.compare(B.slice(-2),d.slice(3))===0),R=B},\"onData\");w.prependListener(\"close\",v),w.on(\"data\",I),c.on(\"close\",()=>{w.removeListener(\"close\",v),w.removeListener(\"data\",I)})})}u(fixResponseChunkedTransferBadEnding,\"fixResponseChunkedTransferBadEnding\");const privateData=new WeakMap,wrappers=new WeakMap;function pd(c){const l=privateData.get(c);return console.assert(l!=null,\"'this' is expected an Event object, but got\",c),l}u(pd,\"pd\");function setCancelFlag(c){if(c.passiveListener!=null){typeof console<\"u\"&&typeof console.error==\"function\"&&console.error(\"Unable to preventDefault inside passive event listener invocation.\",c.passiveListener);return}c.event.cancelable&&(c.canceled=!0,typeof c.event.preventDefault==\"function\"&&c.event.preventDefault())}u(setCancelFlag,\"setCancelFlag\");function Event(c,l){privateData.set(this,{eventTarget:c,event:l,eventPhase:2,currentTarget:c,canceled:!1,stopped:!1,immediateStopped:!1,passiveListener:null,timeStamp:l.timeStamp||Date.now()}),Object.defineProperty(this,\"isTrusted\",{value:!1,enumerable:!0});const d=Object.keys(l);for(let y=0;y<d.length;++y){const b=d[y];b in this||Object.defineProperty(this,b,defineRedirectDescriptor(b))}}u(Event,\"Event\"),Event.prototype={get type(){return pd(this).event.type},get target(){return pd(this).eventTarget},get currentTarget(){return pd(this).currentTarget},composedPath(){const c=pd(this).currentTarget;return c==null?[]:[c]},get NONE(){return 0},get CAPTURING_PHASE(){return 1},get AT_TARGET(){return 2},get BUBBLING_PHASE(){return 3},get eventPhase(){return pd(this).eventPhase},stopPropagation(){const c=pd(this);c.stopped=!0,typeof c.event.stopPropagation==\"function\"&&c.event.stopPropagation()},stopImmediatePropagation(){const c=pd(this);c.stopped=!0,c.immediateStopped=!0,typeof c.event.stopImmediatePropagation==\"function\"&&c.event.stopImmediatePropagation()},get bubbles(){return!!pd(this).event.bubbles},get cancelable(){return!!pd(this).event.cancelable},preventDefault(){setCancelFlag(pd(this))},get defaultPrevented(){return pd(this).canceled},get composed(){return!!pd(this).event.composed},get timeStamp(){return pd(this).timeStamp},get srcElement(){return pd(this).eventTarget},get cancelBubble(){return pd(this).stopped},set cancelBubble(c){if(!c)return;const l=pd(this);l.stopped=!0,typeof l.event.cancelBubble==\"boolean\"&&(l.event.cancelBubble=!0)},get returnValue(){return!pd(this).canceled},set returnValue(c){c||setCancelFlag(pd(this))},initEvent(){}},Object.defineProperty(Event.prototype,\"constructor\",{value:Event,configurable:!0,writable:!0}),typeof window<\"u\"&&typeof window.Event<\"u\"&&(Object.setPrototypeOf(Event.prototype,window.Event.prototype),wrappers.set(window.Event.prototype,Event));function defineRedirectDescriptor(c){return{get(){return pd(this).event[c]},set(l){pd(this).event[c]=l},configurable:!0,enumerable:!0}}u(defineRedirectDescriptor,\"defineRedirectDescriptor\");function defineCallDescriptor(c){return{value(){const l=pd(this).event;return l[c].apply(l,arguments)},configurable:!0,enumerable:!0}}u(defineCallDescriptor,\"defineCallDescriptor\");function defineWrapper(c,l){const d=Object.keys(l);if(d.length===0)return c;function y(b,R){c.call(this,b,R)}u(y,\"CustomEvent\"),y.prototype=Object.create(c.prototype,{constructor:{value:y,configurable:!0,writable:!0}});for(let b=0;b<d.length;++b){const R=d[b];if(!(R in c.prototype)){const v=typeof Object.getOwnPropertyDescriptor(l,R).value==\"function\";Object.defineProperty(y.prototype,R,v?defineCallDescriptor(R):defineRedirectDescriptor(R))}}return y}u(defineWrapper,\"defineWrapper\");function getWrapper(c){if(c==null||c===Object.prototype)return Event;let l=wrappers.get(c);return l==null&&(l=defineWrapper(getWrapper(Object.getPrototypeOf(c)),c),wrappers.set(c,l)),l}u(getWrapper,\"getWrapper\");function wrapEvent(c,l){const d=getWrapper(Object.getPrototypeOf(l));return new d(c,l)}u(wrapEvent,\"wrapEvent\");function isStopped(c){return pd(c).immediateStopped}u(isStopped,\"isStopped\");function setEventPhase(c,l){pd(c).eventPhase=l}u(setEventPhase,\"setEventPhase\");function setCurrentTarget(c,l){pd(c).currentTarget=l}u(setCurrentTarget,\"setCurrentTarget\");function setPassiveListener(c,l){pd(c).passiveListener=l}u(setPassiveListener,\"setPassiveListener\");const listenersMap=new WeakMap,CAPTURE=1,BUBBLE=2,ATTRIBUTE=3;function isObject(c){return c!==null&&typeof c==\"object\"}u(isObject,\"isObject\");function getListeners(c){const l=listenersMap.get(c);if(l==null)throw new TypeError(\"'this' is expected an EventTarget object, but got another value.\");return l}u(getListeners,\"getListeners\");function defineEventAttributeDescriptor(c){return{get(){let d=getListeners(this).get(c);for(;d!=null;){if(d.listenerType===ATTRIBUTE)return d.listener;d=d.next}return null},set(l){typeof l!=\"function\"&&!isObject(l)&&(l=null);const d=getListeners(this);let y=null,b=d.get(c);for(;b!=null;)b.listenerType===ATTRIBUTE?y!==null?y.next=b.next:b.next!==null?d.set(c,b.next):d.delete(c):y=b,b=b.next;if(l!==null){const R={listener:l,listenerType:ATTRIBUTE,passive:!1,once:!1,next:null};y===null?d.set(c,R):y.next=R}},configurable:!0,enumerable:!0}}u(defineEventAttributeDescriptor,\"defineEventAttributeDescriptor\");function defineEventAttribute(c,l){Object.defineProperty(c,`on${l}`,defineEventAttributeDescriptor(l))}u(defineEventAttribute,\"defineEventAttribute\");function defineCustomEventTarget(c){function l(){EventTarget.call(this)}u(l,\"CustomEventTarget\"),l.prototype=Object.create(EventTarget.prototype,{constructor:{value:l,configurable:!0,writable:!0}});for(let d=0;d<c.length;++d)defineEventAttribute(l.prototype,c[d]);return l}u(defineCustomEventTarget,\"defineCustomEventTarget\");function EventTarget(){if(this instanceof EventTarget){listenersMap.set(this,new Map);return}if(arguments.length===1&&Array.isArray(arguments[0]))return defineCustomEventTarget(arguments[0]);if(arguments.length>0){const c=new Array(arguments.length);for(let l=0;l<arguments.length;++l)c[l]=arguments[l];return defineCustomEventTarget(c)}throw new TypeError(\"Cannot call a class as a function\")}u(EventTarget,\"EventTarget\"),EventTarget.prototype={addEventListener(c,l,d){if(l==null)return;if(typeof l!=\"function\"&&!isObject(l))throw new TypeError(\"'listener' should be a function or an object.\");const y=getListeners(this),b=isObject(d),w=(b?!!d.capture:!!d)?CAPTURE:BUBBLE,v={listener:l,listenerType:w,passive:b&&!!d.passive,once:b&&!!d.once,next:null};let I=y.get(c);if(I===void 0){y.set(c,v);return}let B=null;for(;I!=null;){if(I.listener===l&&I.listenerType===w)return;B=I,I=I.next}B.next=v},removeEventListener(c,l,d){if(l==null)return;const y=getListeners(this),R=(isObject(d)?!!d.capture:!!d)?CAPTURE:BUBBLE;let w=null,v=y.get(c);for(;v!=null;){if(v.listener===l&&v.listenerType===R){w!==null?w.next=v.next:v.next!==null?y.set(c,v.next):y.delete(c);return}w=v,v=v.next}},dispatchEvent(c){if(c==null||typeof c.type!=\"string\")throw new TypeError('\"event.type\" should be a string.');const l=getListeners(this),d=c.type;let y=l.get(d);if(y==null)return!0;const b=wrapEvent(this,c);let R=null;for(;y!=null;){if(y.once?R!==null?R.next=y.next:y.next!==null?l.set(d,y.next):l.delete(d):R=y,setPassiveListener(b,y.passive?y.listener:null),typeof y.listener==\"function\")try{y.listener.call(this,b)}catch(w){typeof console<\"u\"&&typeof console.error==\"function\"&&console.error(w)}else y.listenerType!==ATTRIBUTE&&typeof y.listener.handleEvent==\"function\"&&y.listener.handleEvent(b);if(isStopped(b))break;y=y.next}return setPassiveListener(b,null),setEventPhase(b,0),setCurrentTarget(b,null),!b.defaultPrevented}},Object.defineProperty(EventTarget.prototype,\"constructor\",{value:EventTarget,configurable:!0,writable:!0}),typeof window<\"u\"&&typeof window.EventTarget<\"u\"&&Object.setPrototypeOf(EventTarget.prototype,window.EventTarget.prototype);const an=class an extends EventTarget{constructor(){throw super(),new TypeError(\"AbortSignal cannot be constructed directly\")}get aborted(){const l=abortedFlags.get(this);if(typeof l!=\"boolean\")throw new TypeError(`Expected 'this' to be an 'AbortSignal' object, but got ${this===null?\"null\":typeof this}`);return l}};u(an,\"AbortSignal\");let AbortSignal=an;defineEventAttribute(AbortSignal.prototype,\"abort\");function createAbortSignal(){const c=Object.create(AbortSignal.prototype);return EventTarget.call(c),abortedFlags.set(c,!1),c}u(createAbortSignal,\"createAbortSignal\");function abortSignal(c){abortedFlags.get(c)===!1&&(abortedFlags.set(c,!0),c.dispatchEvent({type:\"abort\"}))}u(abortSignal,\"abortSignal\");const abortedFlags=new WeakMap;Object.defineProperties(AbortSignal.prototype,{aborted:{enumerable:!0}}),typeof Symbol==\"function\"&&typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(AbortSignal.prototype,Symbol.toStringTag,{configurable:!0,value:\"AbortSignal\"});let AbortController$1=(St=class{constructor(){signals.set(this,createAbortSignal())}get signal(){return getSignal(this)}abort(){abortSignal(getSignal(this))}},u(St,\"AbortController\"),St);const signals=new WeakMap;function getSignal(c){const l=signals.get(c);if(l==null)throw new TypeError(`Expected 'this' to be an 'AbortController' object, but got ${c===null?\"null\":typeof c}`);return l}u(getSignal,\"getSignal\"),Object.defineProperties(AbortController$1.prototype,{signal:{enumerable:!0},abort:{enumerable:!0}}),typeof Symbol==\"function\"&&typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(AbortController$1.prototype,Symbol.toStringTag,{configurable:!0,value:\"AbortController\"});var t=Object.defineProperty,e=u((c,l)=>t(c,\"name\",{value:l,configurable:!0}),\"e\");const fetch=fetch$1;s();function s(){!globalThis.process?.versions?.node&&!globalThis.process?.env.DISABLE_NODE_FETCH_NATIVE_WARN&&console.warn(\"[node-fetch-native] Node.js compatible build of `node-fetch-native` is being used in a non-Node.js environment. Please make sure you are using proper export conditions or report this issue to https://github.com/unjs/node-fetch-native. You can set `process.env.DISABLE_NODE_FETCH_NATIVE_WARN` to disable this warning.\")}u(s,\"s\"),e(s,\"checkNodeEnvironment\"),exports.AbortController=AbortController$1,exports.AbortError=AbortError,exports.Blob=r$1,exports.FetchError=FetchError,exports.File=File$1,exports.FormData=FormData,exports.Headers=Headers,exports.Request=Request,exports.Response=Response,exports.blobFrom=blobFrom,exports.blobFromSync=blobFromSync,exports[\"default\"]=fetch,exports.fetch=fetch,exports.fileFrom=fileFrom,exports.fileFromSync=fileFromSync,exports.isRedirect=isRedirect;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native-with-agent/dist/node.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch-native-with-agent/dist/shared/node-fetch-native-with-agent.61758d11.cjs":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/node-fetch-native-with-agent/dist/shared/node-fetch-native-with-agent.61758d11.cjs ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("var l=Object.defineProperty;var o=(e,t)=>l(e,\"name\",{value:t,configurable:!0});var commonjsGlobal=typeof globalThis<\"u\"?globalThis:typeof window<\"u\"?window:typeof global<\"u\"?global:typeof self<\"u\"?self:{};function getDefaultExportFromCjs(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,\"default\")?e.default:e}o(getDefaultExportFromCjs,\"getDefaultExportFromCjs\"),exports.commonjsGlobal=commonjsGlobal,exports.getDefaultExportFromCjs=getDefaultExportFromCjs;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC1uYXRpdmUtd2l0aC1hZ2VudC9kaXN0L3NoYXJlZC9ub2RlLWZldGNoLW5hdGl2ZS13aXRoLWFnZW50LjYxNzU4ZDExLmNqcyIsIm1hcHBpbmdzIjoiQUFBYSw0QkFBNEIseUJBQXlCLHdCQUF3QixFQUFFLDhIQUE4SCxvQ0FBb0Msc0ZBQXNGLHFEQUFxRCxzQkFBc0IsZ0JBQWdCLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9ub2RlLWZldGNoLW5hdGl2ZS13aXRoLWFnZW50L2Rpc3Qvc2hhcmVkL25vZGUtZmV0Y2gtbmF0aXZlLXdpdGgtYWdlbnQuNjE3NThkMTEuY2pzP2JkMWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7dmFyIGw9T2JqZWN0LmRlZmluZVByb3BlcnR5O3ZhciBvPShlLHQpPT5sKGUsXCJuYW1lXCIse3ZhbHVlOnQsY29uZmlndXJhYmxlOiEwfSk7dmFyIGNvbW1vbmpzR2xvYmFsPXR5cGVvZiBnbG9iYWxUaGlzPFwidVwiP2dsb2JhbFRoaXM6dHlwZW9mIHdpbmRvdzxcInVcIj93aW5kb3c6dHlwZW9mIGdsb2JhbDxcInVcIj9nbG9iYWw6dHlwZW9mIHNlbGY8XCJ1XCI/c2VsZjp7fTtmdW5jdGlvbiBnZXREZWZhdWx0RXhwb3J0RnJvbUNqcyhlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlJiZPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxcImRlZmF1bHRcIik/ZS5kZWZhdWx0OmV9byhnZXREZWZhdWx0RXhwb3J0RnJvbUNqcyxcImdldERlZmF1bHRFeHBvcnRGcm9tQ2pzXCIpLGV4cG9ydHMuY29tbW9uanNHbG9iYWw9Y29tbW9uanNHbG9iYWwsZXhwb3J0cy5nZXREZWZhdWx0RXhwb3J0RnJvbUNqcz1nZXREZWZhdWx0RXhwb3J0RnJvbUNqcztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native-with-agent/dist/shared/node-fetch-native-with-agent.61758d11.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch-native-with-agent/dist/shared/node-fetch-native-with-agent.df7e6bd6.cjs":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/node-fetch-native-with-agent/dist/shared/node-fetch-native-with-agent.df7e6bd6.cjs ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("var Dt=Object.defineProperty;var Ft=(e,A,t)=>A in e?Dt(e,A,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[A]=t;var o=(e,A)=>Dt(e,\"name\",{value:A,configurable:!0});var NA=(e,A,t)=>(Ft(e,typeof A!=\"symbol\"?A+\"\":A,t),t),ze=(e,A,t)=>{if(!A.has(e))throw TypeError(\"Cannot \"+t)},yt=(e,A)=>{if(Object(A)!==A)throw TypeError('Cannot use the \"in\" operator on this value');return e.has(A)},p=(e,A,t)=>(ze(e,A,\"read from private field\"),t?t.call(e):A.get(e)),CA=(e,A,t)=>{if(A.has(e))throw TypeError(\"Cannot add the same private member more than once\");A instanceof WeakSet?A.add(e):A.set(e,t)},EA=(e,A,t,n)=>(ze(e,A,\"write to private field\"),n?n.call(e,t):A.set(e,t),t);var kA=(e,A,t)=>(ze(e,A,\"access private method\"),t);var ne,se,oe,ie,Qe,Ee,ge,Be,Ce,Ie,ae,ce,he,le,ue,de,fe,De,ye,Re,we,ke,_A,Ne,Fe,pe,Se,Ue,be,me,Le,Me,Ye,Je,Oe,Rt,Ge,Ae,Te;const require$$0=__webpack_require__(/*! node:assert */ \"node:assert\"),require$$4=__webpack_require__(/*! node:net */ \"node:net\"),http$1=__webpack_require__(/*! node:http */ \"node:http\"),Stream=__webpack_require__(/*! node:stream */ \"node:stream\"),require$$6=__webpack_require__(/*! node:buffer */ \"node:buffer\"),require$$0$1=__webpack_require__(/*! node:util */ \"node:util\"),require$$8=__webpack_require__(/*! node:querystring */ \"node:querystring\"),require$$0$2=__webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\"),require$$0$3=__webpack_require__(/*! node:events */ \"node:events\"),_commonjsHelpers=__webpack_require__(/*! ./node-fetch-native-with-agent.61758d11.cjs */ \"(rsc)/./node_modules/node-fetch-native-with-agent/dist/shared/node-fetch-native-with-agent.61758d11.cjs\"),require$$4$1=__webpack_require__(/*! node:tls */ \"node:tls\"),zlib=__webpack_require__(/*! node:zlib */ \"node:zlib\"),require$$5=__webpack_require__(/*! node:perf_hooks */ \"node:perf_hooks\"),require$$8$1=__webpack_require__(/*! node:util/types */ \"node:util/types\"),require$$0$4=__webpack_require__(/*! node:os */ \"node:os\"),require$$1=__webpack_require__(/*! node:url */ \"node:url\"),require$$5$1=__webpack_require__(/*! node:async_hooks */ \"node:async_hooks\");__webpack_require__(/*! node:console */ \"node:console\");const require$$5$2=__webpack_require__(/*! string_decoder */ \"string_decoder\"),require$$2=__webpack_require__(/*! node:worker_threads */ \"node:worker_threads\");function _interopDefaultCompat(e){return e&&typeof e==\"object\"&&\"default\"in e?e.default:e}o(_interopDefaultCompat,\"_interopDefaultCompat\");const require$$0__default=_interopDefaultCompat(require$$0),require$$4__default=_interopDefaultCompat(require$$4),http__default=_interopDefaultCompat(http$1),Stream__default=_interopDefaultCompat(Stream),require$$6__default=_interopDefaultCompat(require$$6),require$$0__default$1=_interopDefaultCompat(require$$0$1),require$$8__default=_interopDefaultCompat(require$$8),require$$0__default$2=_interopDefaultCompat(require$$0$2),require$$0__default$3=_interopDefaultCompat(require$$0$3),require$$4__default$1=_interopDefaultCompat(require$$4$1),zlib__default=_interopDefaultCompat(zlib),require$$5__default=_interopDefaultCompat(require$$5),require$$8__default$1=_interopDefaultCompat(require$$8$1),require$$0__default$4=_interopDefaultCompat(require$$0$4),require$$1__default=_interopDefaultCompat(require$$1),require$$5__default$1=_interopDefaultCompat(require$$5$1),require$$5__default$2=_interopDefaultCompat(require$$5$2),require$$2__default=_interopDefaultCompat(require$$2);var symbols$4={kClose:Symbol(\"close\"),kDestroy:Symbol(\"destroy\"),kDispatch:Symbol(\"dispatch\"),kUrl:Symbol(\"url\"),kWriting:Symbol(\"writing\"),kResuming:Symbol(\"resuming\"),kQueue:Symbol(\"queue\"),kConnect:Symbol(\"connect\"),kConnecting:Symbol(\"connecting\"),kHeadersList:Symbol(\"headers list\"),kKeepAliveDefaultTimeout:Symbol(\"default keep alive timeout\"),kKeepAliveMaxTimeout:Symbol(\"max keep alive timeout\"),kKeepAliveTimeoutThreshold:Symbol(\"keep alive timeout threshold\"),kKeepAliveTimeoutValue:Symbol(\"keep alive timeout\"),kKeepAlive:Symbol(\"keep alive\"),kHeadersTimeout:Symbol(\"headers timeout\"),kBodyTimeout:Symbol(\"body timeout\"),kServerName:Symbol(\"server name\"),kLocalAddress:Symbol(\"local address\"),kHost:Symbol(\"host\"),kNoRef:Symbol(\"no ref\"),kBodyUsed:Symbol(\"used\"),kRunning:Symbol(\"running\"),kBlocking:Symbol(\"blocking\"),kPending:Symbol(\"pending\"),kSize:Symbol(\"size\"),kBusy:Symbol(\"busy\"),kQueued:Symbol(\"queued\"),kFree:Symbol(\"free\"),kConnected:Symbol(\"connected\"),kClosed:Symbol(\"closed\"),kNeedDrain:Symbol(\"need drain\"),kReset:Symbol(\"reset\"),kDestroyed:Symbol.for(\"nodejs.stream.destroyed\"),kResume:Symbol(\"resume\"),kOnError:Symbol(\"on error\"),kMaxHeadersSize:Symbol(\"max headers size\"),kRunningIdx:Symbol(\"running index\"),kPendingIdx:Symbol(\"pending index\"),kError:Symbol(\"error\"),kClients:Symbol(\"clients\"),kClient:Symbol(\"client\"),kParser:Symbol(\"parser\"),kOnDestroyed:Symbol(\"destroy callbacks\"),kPipelining:Symbol(\"pipelining\"),kSocket:Symbol(\"socket\"),kHostHeader:Symbol(\"host header\"),kConnector:Symbol(\"connector\"),kStrictContentLength:Symbol(\"strict content length\"),kMaxRedirections:Symbol(\"maxRedirections\"),kMaxRequests:Symbol(\"maxRequestsPerClient\"),kProxy:Symbol(\"proxy agent options\"),kCounter:Symbol(\"socket request counter\"),kInterceptors:Symbol(\"dispatch interceptors\"),kMaxResponseSize:Symbol(\"max response size\"),kHTTP2Session:Symbol(\"http2Session\"),kHTTP2SessionState:Symbol(\"http2Session state\"),kRetryHandlerDefaultRetry:Symbol(\"retry agent default retry\"),kConstruct:Symbol(\"constructable\"),kListeners:Symbol(\"listeners\"),kHTTPContext:Symbol(\"http context\"),kMaxConcurrentStreams:Symbol(\"max concurrent streams\")};let UndiciError$1=(ne=class extends Error{constructor(A){super(A),this.name=\"UndiciError\",this.code=\"UND_ERR\"}},o(ne,\"UndiciError\"),ne),ConnectTimeoutError$1=(se=class extends UndiciError$1{constructor(A){super(A),this.name=\"ConnectTimeoutError\",this.message=A||\"Connect Timeout Error\",this.code=\"UND_ERR_CONNECT_TIMEOUT\"}},o(se,\"ConnectTimeoutError\"),se),HeadersTimeoutError$1=(oe=class extends UndiciError$1{constructor(A){super(A),this.name=\"HeadersTimeoutError\",this.message=A||\"Headers Timeout Error\",this.code=\"UND_ERR_HEADERS_TIMEOUT\"}},o(oe,\"HeadersTimeoutError\"),oe),HeadersOverflowError$1=(ie=class extends UndiciError$1{constructor(A){super(A),this.name=\"HeadersOverflowError\",this.message=A||\"Headers Overflow Error\",this.code=\"UND_ERR_HEADERS_OVERFLOW\"}},o(ie,\"HeadersOverflowError\"),ie),BodyTimeoutError$1=(Qe=class extends UndiciError$1{constructor(A){super(A),this.name=\"BodyTimeoutError\",this.message=A||\"Body Timeout Error\",this.code=\"UND_ERR_BODY_TIMEOUT\"}},o(Qe,\"BodyTimeoutError\"),Qe),ResponseStatusCodeError$1=(Ee=class extends UndiciError$1{constructor(A,t,n,r){super(A),this.name=\"ResponseStatusCodeError\",this.message=A||\"Response Status Code Error\",this.code=\"UND_ERR_RESPONSE_STATUS_CODE\",this.body=r,this.status=t,this.statusCode=t,this.headers=n}},o(Ee,\"ResponseStatusCodeError\"),Ee),InvalidArgumentError$k=(ge=class extends UndiciError$1{constructor(A){super(A),this.name=\"InvalidArgumentError\",this.message=A||\"Invalid Argument Error\",this.code=\"UND_ERR_INVALID_ARG\"}},o(ge,\"InvalidArgumentError\"),ge),InvalidReturnValueError$2=(Be=class extends UndiciError$1{constructor(A){super(A),this.name=\"InvalidReturnValueError\",this.message=A||\"Invalid Return Value Error\",this.code=\"UND_ERR_INVALID_RETURN_VALUE\"}},o(Be,\"InvalidReturnValueError\"),Be),AbortError$1=(Ce=class extends UndiciError$1{constructor(A){super(A),this.name=\"AbortError\",this.message=A||\"The operation was aborted\"}},o(Ce,\"AbortError\"),Ce),RequestAbortedError$6=(Ie=class extends AbortError$1{constructor(A){super(A),this.name=\"AbortError\",this.message=A||\"Request aborted\",this.code=\"UND_ERR_ABORTED\"}},o(Ie,\"RequestAbortedError\"),Ie),InformationalError$3=(ae=class extends UndiciError$1{constructor(A){super(A),this.name=\"InformationalError\",this.message=A||\"Request information\",this.code=\"UND_ERR_INFO\"}},o(ae,\"InformationalError\"),ae),RequestContentLengthMismatchError$2=(ce=class extends UndiciError$1{constructor(A){super(A),this.name=\"RequestContentLengthMismatchError\",this.message=A||\"Request body length does not match content-length header\",this.code=\"UND_ERR_REQ_CONTENT_LENGTH_MISMATCH\"}},o(ce,\"RequestContentLengthMismatchError\"),ce),ResponseContentLengthMismatchError$1=(he=class extends UndiciError$1{constructor(A){super(A),this.name=\"ResponseContentLengthMismatchError\",this.message=A||\"Response body length does not match content-length header\",this.code=\"UND_ERR_RES_CONTENT_LENGTH_MISMATCH\"}},o(he,\"ResponseContentLengthMismatchError\"),he),ClientDestroyedError$2=(le=class extends UndiciError$1{constructor(A){super(A),this.name=\"ClientDestroyedError\",this.message=A||\"The client is destroyed\",this.code=\"UND_ERR_DESTROYED\"}},o(le,\"ClientDestroyedError\"),le),ClientClosedError$1=(ue=class extends UndiciError$1{constructor(A){super(A),this.name=\"ClientClosedError\",this.message=A||\"The client is closed\",this.code=\"UND_ERR_CLOSED\"}},o(ue,\"ClientClosedError\"),ue),SocketError$4=(de=class extends UndiciError$1{constructor(A,t){super(A),this.name=\"SocketError\",this.message=A||\"Socket error\",this.code=\"UND_ERR_SOCKET\",this.socket=t}},o(de,\"SocketError\"),de),NotSupportedError$2=(fe=class extends UndiciError$1{constructor(A){super(A),this.name=\"NotSupportedError\",this.message=A||\"Not supported error\",this.code=\"UND_ERR_NOT_SUPPORTED\"}},o(fe,\"NotSupportedError\"),fe);const At=class At extends UndiciError$1{constructor(A){super(A),this.name=\"MissingUpstreamError\",this.message=A||\"No upstream has been added to the BalancedPool\",this.code=\"UND_ERR_BPL_MISSING_UPSTREAM\"}};o(At,\"BalancedPoolMissingUpstreamError\");let BalancedPoolMissingUpstreamError=At,HTTPParserError$1=(De=class extends Error{constructor(A,t,n){super(A),this.name=\"HTTPParserError\",this.code=t?`HPE_${t}`:void 0,this.data=n?n.toString():void 0}},o(De,\"HTTPParserError\"),De),ResponseExceededMaxSizeError$1=(ye=class extends UndiciError$1{constructor(A){super(A),this.name=\"ResponseExceededMaxSizeError\",this.message=A||\"Response content exceeded max size\",this.code=\"UND_ERR_RES_EXCEEDED_MAX_SIZE\"}},o(ye,\"ResponseExceededMaxSizeError\"),ye);const et=class et extends UndiciError$1{constructor(A,t,{headers:n,data:r}){super(A),this.name=\"RequestRetryError\",this.message=A||\"Request retry error\",this.code=\"UND_ERR_REQ_RETRY\",this.statusCode=t,this.data=r,this.headers=n}};o(et,\"RequestRetryError\");let RequestRetryError=et,SecureProxyConnectionError$1=(Re=class extends UndiciError$1{constructor(A,t,n){super(t,{cause:A,...n??{}}),this.name=\"SecureProxyConnectionError\",this.message=t||\"Secure Proxy Connection failed\",this.code=\"UND_ERR_PRX_TLS\",this.cause=A}},o(Re,\"SecureProxyConnectionError\"),Re);var errors$1={AbortError:AbortError$1,HTTPParserError:HTTPParserError$1,UndiciError:UndiciError$1,HeadersTimeoutError:HeadersTimeoutError$1,HeadersOverflowError:HeadersOverflowError$1,BodyTimeoutError:BodyTimeoutError$1,RequestContentLengthMismatchError:RequestContentLengthMismatchError$2,ConnectTimeoutError:ConnectTimeoutError$1,ResponseStatusCodeError:ResponseStatusCodeError$1,InvalidArgumentError:InvalidArgumentError$k,InvalidReturnValueError:InvalidReturnValueError$2,RequestAbortedError:RequestAbortedError$6,ClientDestroyedError:ClientDestroyedError$2,ClientClosedError:ClientClosedError$1,InformationalError:InformationalError$3,SocketError:SocketError$4,NotSupportedError:NotSupportedError$2,ResponseContentLengthMismatchError:ResponseContentLengthMismatchError$1,BalancedPoolMissingUpstreamError,ResponseExceededMaxSizeError:ResponseExceededMaxSizeError$1,RequestRetryError,SecureProxyConnectionError:SecureProxyConnectionError$1};const headerNameLowerCasedRecord$3={},wellknownHeaderNames$1=[\"Accept\",\"Accept-Encoding\",\"Accept-Language\",\"Accept-Ranges\",\"Access-Control-Allow-Credentials\",\"Access-Control-Allow-Headers\",\"Access-Control-Allow-Methods\",\"Access-Control-Allow-Origin\",\"Access-Control-Expose-Headers\",\"Access-Control-Max-Age\",\"Access-Control-Request-Headers\",\"Access-Control-Request-Method\",\"Age\",\"Allow\",\"Alt-Svc\",\"Alt-Used\",\"Authorization\",\"Cache-Control\",\"Clear-Site-Data\",\"Connection\",\"Content-Disposition\",\"Content-Encoding\",\"Content-Language\",\"Content-Length\",\"Content-Location\",\"Content-Range\",\"Content-Security-Policy\",\"Content-Security-Policy-Report-Only\",\"Content-Type\",\"Cookie\",\"Cross-Origin-Embedder-Policy\",\"Cross-Origin-Opener-Policy\",\"Cross-Origin-Resource-Policy\",\"Date\",\"Device-Memory\",\"Downlink\",\"ECT\",\"ETag\",\"Expect\",\"Expect-CT\",\"Expires\",\"Forwarded\",\"From\",\"Host\",\"If-Match\",\"If-Modified-Since\",\"If-None-Match\",\"If-Range\",\"If-Unmodified-Since\",\"Keep-Alive\",\"Last-Modified\",\"Link\",\"Location\",\"Max-Forwards\",\"Origin\",\"Permissions-Policy\",\"Pragma\",\"Proxy-Authenticate\",\"Proxy-Authorization\",\"RTT\",\"Range\",\"Referer\",\"Referrer-Policy\",\"Refresh\",\"Retry-After\",\"Sec-WebSocket-Accept\",\"Sec-WebSocket-Extensions\",\"Sec-WebSocket-Key\",\"Sec-WebSocket-Protocol\",\"Sec-WebSocket-Version\",\"Server\",\"Server-Timing\",\"Service-Worker-Allowed\",\"Service-Worker-Navigation-Preload\",\"Set-Cookie\",\"SourceMap\",\"Strict-Transport-Security\",\"Supports-Loading-Mode\",\"TE\",\"Timing-Allow-Origin\",\"Trailer\",\"Transfer-Encoding\",\"Upgrade\",\"Upgrade-Insecure-Requests\",\"User-Agent\",\"Vary\",\"Via\",\"WWW-Authenticate\",\"X-Content-Type-Options\",\"X-DNS-Prefetch-Control\",\"X-Frame-Options\",\"X-Permitted-Cross-Domain-Policies\",\"X-Powered-By\",\"X-Requested-With\",\"X-XSS-Protection\"];for(let e=0;e<wellknownHeaderNames$1.length;++e){const A=wellknownHeaderNames$1[e],t=A.toLowerCase();headerNameLowerCasedRecord$3[A]=headerNameLowerCasedRecord$3[t]=t}Object.setPrototypeOf(headerNameLowerCasedRecord$3,null);var constants$5={wellknownHeaderNames:wellknownHeaderNames$1,headerNameLowerCasedRecord:headerNameLowerCasedRecord$3};const{wellknownHeaderNames,headerNameLowerCasedRecord:headerNameLowerCasedRecord$2}=constants$5,xA=class xA{constructor(A,t,n){NA(this,\"value\",null);NA(this,\"left\",null);NA(this,\"middle\",null);NA(this,\"right\",null);NA(this,\"code\");if(n===void 0||n>=A.length)throw new TypeError(\"Unreachable\");if((this.code=A.charCodeAt(n))>127)throw new TypeError(\"key must be ascii string\");A.length!==++n?this.middle=new xA(A,t,n):this.value=t}add(A,t){const n=A.length;if(n===0)throw new TypeError(\"Unreachable\");let r=0,s=this;for(;;){const i=A.charCodeAt(r);if(i>127)throw new TypeError(\"key must be ascii string\");if(s.code===i)if(n===++r){s.value=t;break}else if(s.middle!==null)s=s.middle;else{s.middle=new xA(A,t,r);break}else if(s.code<i)if(s.left!==null)s=s.left;else{s.left=new xA(A,t,r);break}else if(s.right!==null)s=s.right;else{s.right=new xA(A,t,r);break}}}search(A){const t=A.length;let n=0,r=this;for(;r!==null&&n<t;){let s=A[n];for(s<=90&&s>=65&&(s|=32);r!==null;){if(s===r.code){if(t===++n)return r;r=r.middle;break}r=r.code<s?r.left:r.right}}return null}};o(xA,\"TstNode\");let TstNode=xA;const tt=class tt{constructor(){NA(this,\"node\",null)}insert(A,t){this.node===null?this.node=new TstNode(A,t,0):this.node.add(A,t)}lookup(A){return this.node?.search(A)?.value??null}};o(tt,\"TernarySearchTree\");let TernarySearchTree=tt;const tree$1=new TernarySearchTree;for(let e=0;e<wellknownHeaderNames.length;++e){const A=headerNameLowerCasedRecord$2[wellknownHeaderNames[e]];tree$1.insert(A,A)}var tree_1={TernarySearchTree,tree:tree$1};const assert$d=require$$0__default,{kDestroyed:kDestroyed$1,kBodyUsed:kBodyUsed$1,kListeners}=symbols$4,{IncomingMessage}=http__default,stream$1=Stream__default,net$2=require$$4__default,{InvalidArgumentError:InvalidArgumentError$j}=errors$1,{Blob:Blob$1}=require$$6__default,nodeUtil=require$$0__default$1,{stringify}=require$$8__default,{headerNameLowerCasedRecord:headerNameLowerCasedRecord$1}=constants$5,{tree}=tree_1,[nodeMajor,nodeMinor]=process.versions.node.split(\".\").map(e=>Number(e));function nop(){}o(nop,\"nop\");function isStream$1(e){return e&&typeof e==\"object\"&&typeof e.pipe==\"function\"&&typeof e.on==\"function\"}o(isStream$1,\"isStream$1\");function isBlobLike$1(e){if(e===null)return!1;if(e instanceof Blob$1)return!0;if(typeof e!=\"object\")return!1;{const A=e[Symbol.toStringTag];return(A===\"Blob\"||A===\"File\")&&(\"stream\"in e&&typeof e.stream==\"function\"||\"arrayBuffer\"in e&&typeof e.arrayBuffer==\"function\")}}o(isBlobLike$1,\"isBlobLike$1\");function buildURL$3(e,A){if(e.includes(\"?\")||e.includes(\"#\"))throw new Error('Query params cannot be passed when url already contains \"?\" or \"#\".');const t=stringify(A);return t&&(e+=\"?\"+t),e}o(buildURL$3,\"buildURL$3\");function parseURL(e){if(typeof e==\"string\"){if(e=new URL(e),!/^https?:/.test(e.origin||e.protocol))throw new InvalidArgumentError$j(\"Invalid URL protocol: the URL must start with `http:` or `https:`.\");return e}if(!e||typeof e!=\"object\")throw new InvalidArgumentError$j(\"Invalid URL: The URL argument must be a non-null object.\");if(!/^https?:/.test(e.origin||e.protocol))throw new InvalidArgumentError$j(\"Invalid URL protocol: the URL must start with `http:` or `https:`.\");if(!(e instanceof URL)){if(e.port!=null&&e.port!==\"\"&&!Number.isFinite(parseInt(e.port)))throw new InvalidArgumentError$j(\"Invalid URL: port must be a valid integer or a string representation of an integer.\");if(e.path!=null&&typeof e.path!=\"string\")throw new InvalidArgumentError$j(\"Invalid URL path: the path must be a string or null/undefined.\");if(e.pathname!=null&&typeof e.pathname!=\"string\")throw new InvalidArgumentError$j(\"Invalid URL pathname: the pathname must be a string or null/undefined.\");if(e.hostname!=null&&typeof e.hostname!=\"string\")throw new InvalidArgumentError$j(\"Invalid URL hostname: the hostname must be a string or null/undefined.\");if(e.origin!=null&&typeof e.origin!=\"string\")throw new InvalidArgumentError$j(\"Invalid URL origin: the origin must be a string or null/undefined.\");const A=e.port!=null?e.port:e.protocol===\"https:\"?443:80;let t=e.origin!=null?e.origin:`${e.protocol}//${e.hostname}:${A}`,n=e.path!=null?e.path:`${e.pathname||\"\"}${e.search||\"\"}`;t.endsWith(\"/\")&&(t=t.substring(0,t.length-1)),n&&!n.startsWith(\"/\")&&(n=`/${n}`),e=new URL(t+n)}return e}o(parseURL,\"parseURL\");function parseOrigin(e){if(e=parseURL(e),e.pathname!==\"/\"||e.search||e.hash)throw new InvalidArgumentError$j(\"invalid url\");return e}o(parseOrigin,\"parseOrigin\");function getHostname(e){if(e[0]===\"[\"){const t=e.indexOf(\"]\");return assert$d(t!==-1),e.substring(1,t)}const A=e.indexOf(\":\");return A===-1?e:e.substring(0,A)}o(getHostname,\"getHostname\");function getServerName$1(e){if(!e)return null;assert$d.strictEqual(typeof e,\"string\");const A=getHostname(e);return net$2.isIP(A)?\"\":A}o(getServerName$1,\"getServerName$1\");function deepClone(e){return JSON.parse(JSON.stringify(e))}o(deepClone,\"deepClone\");function isAsyncIterable(e){return e!=null&&typeof e[Symbol.asyncIterator]==\"function\"}o(isAsyncIterable,\"isAsyncIterable\");function isIterable$1(e){return e!=null&&(typeof e[Symbol.iterator]==\"function\"||typeof e[Symbol.asyncIterator]==\"function\")}o(isIterable$1,\"isIterable$1\");function bodyLength(e){if(e==null)return 0;if(isStream$1(e)){const A=e._readableState;return A&&A.objectMode===!1&&A.ended===!0&&Number.isFinite(A.length)?A.length:null}else{if(isBlobLike$1(e))return e.size!=null?e.size:null;if(isBuffer$1(e))return e.byteLength}return null}o(bodyLength,\"bodyLength\");function isDestroyed(e){return e&&!!(e.destroyed||e[kDestroyed$1]||stream$1.isDestroyed?.(e))}o(isDestroyed,\"isDestroyed\");function isReadableAborted(e){const A=e?._readableState;return isDestroyed(e)&&A&&!A.endEmitted}o(isReadableAborted,\"isReadableAborted\");function destroy$1(e,A){e==null||!isStream$1(e)||isDestroyed(e)||(typeof e.destroy==\"function\"?(Object.getPrototypeOf(e).constructor===IncomingMessage&&(e.socket=null),e.destroy(A)):A&&queueMicrotask(()=>{e.emit(\"error\",A)}),e.destroyed!==!0&&(e[kDestroyed$1]=!0))}o(destroy$1,\"destroy$1\");const KEEPALIVE_TIMEOUT_EXPR=/timeout=(\\d+)/;function parseKeepAliveTimeout(e){const A=e.toString().match(KEEPALIVE_TIMEOUT_EXPR);return A?parseInt(A[1],10)*1e3:null}o(parseKeepAliveTimeout,\"parseKeepAliveTimeout\");function headerNameToString(e){return typeof e==\"string\"?headerNameLowerCasedRecord$1[e]??e.toLowerCase():tree.lookup(e)??e.toString(\"latin1\").toLowerCase()}o(headerNameToString,\"headerNameToString\");function bufferToLowerCasedHeaderName(e){return tree.lookup(e)??e.toString(\"latin1\").toLowerCase()}o(bufferToLowerCasedHeaderName,\"bufferToLowerCasedHeaderName\");function parseHeaders(e,A){A===void 0&&(A={});for(let t=0;t<e.length;t+=2){const n=headerNameToString(e[t]);let r=A[n];if(r)typeof r==\"string\"&&(r=[r],A[n]=r),r.push(e[t+1].toString(\"utf8\"));else{const s=e[t+1];typeof s==\"string\"?A[n]=s:A[n]=Array.isArray(s)?s.map(i=>i.toString(\"utf8\")):s.toString(\"utf8\")}}return\"content-length\"in A&&\"content-disposition\"in A&&(A[\"content-disposition\"]=Buffer.from(A[\"content-disposition\"]).toString(\"latin1\")),A}o(parseHeaders,\"parseHeaders\");function parseRawHeaders(e){const A=e.length,t=new Array(A);let n=!1,r=-1,s,i,E=0;for(let Q=0;Q<e.length;Q+=2)s=e[Q],i=e[Q+1],typeof s!=\"string\"&&(s=s.toString()),typeof i!=\"string\"&&(i=i.toString(\"utf8\")),E=s.length,E===14&&s[7]===\"-\"&&(s===\"content-length\"||s.toLowerCase()===\"content-length\")?n=!0:E===19&&s[7]===\"-\"&&(s===\"content-disposition\"||s.toLowerCase()===\"content-disposition\")&&(r=Q+1),t[Q]=s,t[Q+1]=i;return n&&r!==-1&&(t[r]=Buffer.from(t[r]).toString(\"latin1\")),t}o(parseRawHeaders,\"parseRawHeaders\");function isBuffer$1(e){return e instanceof Uint8Array||Buffer.isBuffer(e)}o(isBuffer$1,\"isBuffer$1\");function validateHandler$1(e,A,t){if(!e||typeof e!=\"object\")throw new InvalidArgumentError$j(\"handler must be an object\");if(typeof e.onConnect!=\"function\")throw new InvalidArgumentError$j(\"invalid onConnect method\");if(typeof e.onError!=\"function\")throw new InvalidArgumentError$j(\"invalid onError method\");if(typeof e.onBodySent!=\"function\"&&e.onBodySent!==void 0)throw new InvalidArgumentError$j(\"invalid onBodySent method\");if(t||A===\"CONNECT\"){if(typeof e.onUpgrade!=\"function\")throw new InvalidArgumentError$j(\"invalid onUpgrade method\")}else{if(typeof e.onHeaders!=\"function\")throw new InvalidArgumentError$j(\"invalid onHeaders method\");if(typeof e.onData!=\"function\")throw new InvalidArgumentError$j(\"invalid onData method\");if(typeof e.onComplete!=\"function\")throw new InvalidArgumentError$j(\"invalid onComplete method\")}}o(validateHandler$1,\"validateHandler$1\");function isDisturbed(e){return!!(e&&(stream$1.isDisturbed(e)||e[kBodyUsed$1]))}o(isDisturbed,\"isDisturbed\");function isErrored(e){return!!(e&&stream$1.isErrored(e))}o(isErrored,\"isErrored\");function isReadable(e){return!!(e&&stream$1.isReadable(e))}o(isReadable,\"isReadable\");function getSocketInfo(e){return{localAddress:e.localAddress,localPort:e.localPort,remoteAddress:e.remoteAddress,remotePort:e.remotePort,remoteFamily:e.remoteFamily,timeout:e.timeout,bytesWritten:e.bytesWritten,bytesRead:e.bytesRead}}o(getSocketInfo,\"getSocketInfo\");function ReadableStreamFrom$1(e){let A;return new ReadableStream({async start(){A=e[Symbol.asyncIterator]()},async pull(t){const{done:n,value:r}=await A.next();if(n)queueMicrotask(()=>{t.close(),t.byobRequest?.respond(0)});else{const s=Buffer.isBuffer(r)?r:Buffer.from(r);s.byteLength&&t.enqueue(new Uint8Array(s))}return t.desiredSize>0},async cancel(t){await A.return()},type:\"bytes\"})}o(ReadableStreamFrom$1,\"ReadableStreamFrom$1\");function isFormDataLike$1(e){return e&&typeof e==\"object\"&&typeof e.append==\"function\"&&typeof e.delete==\"function\"&&typeof e.get==\"function\"&&typeof e.getAll==\"function\"&&typeof e.has==\"function\"&&typeof e.set==\"function\"&&e[Symbol.toStringTag]===\"FormData\"}o(isFormDataLike$1,\"isFormDataLike$1\");function addAbortListener$1(e,A){return\"addEventListener\"in e?(e.addEventListener(\"abort\",A,{once:!0}),()=>e.removeEventListener(\"abort\",A)):(e.addListener(\"abort\",A),()=>e.removeListener(\"abort\",A))}o(addAbortListener$1,\"addAbortListener$1\");const hasToWellFormed=typeof String.prototype.toWellFormed==\"function\",hasIsWellFormed=typeof String.prototype.isWellFormed==\"function\";function toUSVString(e){return hasToWellFormed?`${e}`.toWellFormed():nodeUtil.toUSVString(e)}o(toUSVString,\"toUSVString\");function isUSVString(e){return hasIsWellFormed?`${e}`.isWellFormed():toUSVString(e)===`${e}`}o(isUSVString,\"isUSVString\");function isTokenCharCode(e){switch(e){case 34:case 40:case 41:case 44:case 47:case 58:case 59:case 60:case 61:case 62:case 63:case 64:case 91:case 92:case 93:case 123:case 125:return!1;default:return e>=33&&e<=126}}o(isTokenCharCode,\"isTokenCharCode\");function isValidHTTPToken$1(e){if(e.length===0)return!1;for(let A=0;A<e.length;++A)if(!isTokenCharCode(e.charCodeAt(A)))return!1;return!0}o(isValidHTTPToken$1,\"isValidHTTPToken$1\");const headerCharRegex=/[^\\t\\x20-\\x7e\\x80-\\xff]/;function isValidHeaderChar$1(e){return!headerCharRegex.test(e)}o(isValidHeaderChar$1,\"isValidHeaderChar$1\");function parseRangeHeader(e){if(e==null||e===\"\")return{start:0,end:null,size:null};const A=e?e.match(/^bytes (\\d+)-(\\d+)\\/(\\d+)?$/):null;return A?{start:parseInt(A[1]),end:A[2]?parseInt(A[2]):null,size:A[3]?parseInt(A[3]):null}:null}o(parseRangeHeader,\"parseRangeHeader\");function addListener$1(e,A,t){return(e[kListeners]??(e[kListeners]=[])).push([A,t]),e.on(A,t),e}o(addListener$1,\"addListener$1\");function removeAllListeners$1(e){for(const[A,t]of e[kListeners]??[])e.removeListener(A,t);e[kListeners]=null}o(removeAllListeners$1,\"removeAllListeners$1\");function errorRequest(e,A,t){try{A.onError(t),assert$d(A.aborted)}catch(n){e.emit(\"error\",n)}}o(errorRequest,\"errorRequest\");const kEnumerableProperty=Object.create(null);kEnumerableProperty.enumerable=!0;var util$m={kEnumerableProperty,nop,isDisturbed,isErrored,isReadable,toUSVString,isUSVString,isReadableAborted,isBlobLike:isBlobLike$1,parseOrigin,parseURL,getServerName:getServerName$1,isStream:isStream$1,isIterable:isIterable$1,isAsyncIterable,isDestroyed,headerNameToString,bufferToLowerCasedHeaderName,addListener:addListener$1,removeAllListeners:removeAllListeners$1,errorRequest,parseRawHeaders,parseHeaders,parseKeepAliveTimeout,destroy:destroy$1,bodyLength,deepClone,ReadableStreamFrom:ReadableStreamFrom$1,isBuffer:isBuffer$1,validateHandler:validateHandler$1,getSocketInfo,isFormDataLike:isFormDataLike$1,buildURL:buildURL$3,addAbortListener:addAbortListener$1,isValidHTTPToken:isValidHTTPToken$1,isValidHeaderChar:isValidHeaderChar$1,isTokenCharCode,parseRangeHeader,nodeMajor,nodeMinor,nodeHasAutoSelectFamily:nodeMajor>18||nodeMajor===18&&nodeMinor>=13,safeHTTPMethods:[\"GET\",\"HEAD\",\"OPTIONS\",\"TRACE\"]};const diagnosticsChannel=require$$0__default$2,util$l=require$$0__default$1,undiciDebugLog=util$l.debuglog(\"undici\"),fetchDebuglog=util$l.debuglog(\"fetch\"),websocketDebuglog=util$l.debuglog(\"websocket\");let isClientSet=!1;const channels$3={beforeConnect:diagnosticsChannel.channel(\"undici:client:beforeConnect\"),connected:diagnosticsChannel.channel(\"undici:client:connected\"),connectError:diagnosticsChannel.channel(\"undici:client:connectError\"),sendHeaders:diagnosticsChannel.channel(\"undici:client:sendHeaders\"),create:diagnosticsChannel.channel(\"undici:request:create\"),bodySent:diagnosticsChannel.channel(\"undici:request:bodySent\"),headers:diagnosticsChannel.channel(\"undici:request:headers\"),trailers:diagnosticsChannel.channel(\"undici:request:trailers\"),error:diagnosticsChannel.channel(\"undici:request:error\"),open:diagnosticsChannel.channel(\"undici:websocket:open\"),close:diagnosticsChannel.channel(\"undici:websocket:close\"),socketError:diagnosticsChannel.channel(\"undici:websocket:socket_error\"),ping:diagnosticsChannel.channel(\"undici:websocket:ping\"),pong:diagnosticsChannel.channel(\"undici:websocket:pong\")};if(undiciDebugLog.enabled||fetchDebuglog.enabled){const e=fetchDebuglog.enabled?fetchDebuglog:undiciDebugLog;diagnosticsChannel.channel(\"undici:client:beforeConnect\").subscribe(A=>{const{connectParams:{version:t,protocol:n,port:r,host:s}}=A;e(\"connecting to %s using %s%s\",`${s}${r?`:${r}`:\"\"}`,n,t)}),diagnosticsChannel.channel(\"undici:client:connected\").subscribe(A=>{const{connectParams:{version:t,protocol:n,port:r,host:s}}=A;e(\"connected to %s using %s%s\",`${s}${r?`:${r}`:\"\"}`,n,t)}),diagnosticsChannel.channel(\"undici:client:connectError\").subscribe(A=>{const{connectParams:{version:t,protocol:n,port:r,host:s},error:i}=A;e(\"connection to %s using %s%s errored - %s\",`${s}${r?`:${r}`:\"\"}`,n,t,i.message)}),diagnosticsChannel.channel(\"undici:client:sendHeaders\").subscribe(A=>{const{request:{method:t,path:n,origin:r}}=A;e(\"sending request to %s %s/%s\",t,r,n)}),diagnosticsChannel.channel(\"undici:request:headers\").subscribe(A=>{const{request:{method:t,path:n,origin:r},response:{statusCode:s}}=A;e(\"received response to %s %s/%s - HTTP %d\",t,r,n,s)}),diagnosticsChannel.channel(\"undici:request:trailers\").subscribe(A=>{const{request:{method:t,path:n,origin:r}}=A;e(\"trailers received from %s %s/%s\",t,r,n)}),diagnosticsChannel.channel(\"undici:request:error\").subscribe(A=>{const{request:{method:t,path:n,origin:r},error:s}=A;e(\"request to %s %s/%s errored - %s\",t,r,n,s.message)}),isClientSet=!0}if(websocketDebuglog.enabled){if(!isClientSet){const e=undiciDebugLog.enabled?undiciDebugLog:websocketDebuglog;diagnosticsChannel.channel(\"undici:client:beforeConnect\").subscribe(A=>{const{connectParams:{version:t,protocol:n,port:r,host:s}}=A;e(\"connecting to %s%s using %s%s\",s,r?`:${r}`:\"\",n,t)}),diagnosticsChannel.channel(\"undici:client:connected\").subscribe(A=>{const{connectParams:{version:t,protocol:n,port:r,host:s}}=A;e(\"connected to %s%s using %s%s\",s,r?`:${r}`:\"\",n,t)}),diagnosticsChannel.channel(\"undici:client:connectError\").subscribe(A=>{const{connectParams:{version:t,protocol:n,port:r,host:s},error:i}=A;e(\"connection to %s%s using %s%s errored - %s\",s,r?`:${r}`:\"\",n,t,i.message)}),diagnosticsChannel.channel(\"undici:client:sendHeaders\").subscribe(A=>{const{request:{method:t,path:n,origin:r}}=A;e(\"sending request to %s %s/%s\",t,r,n)})}diagnosticsChannel.channel(\"undici:websocket:open\").subscribe(e=>{const{address:{address:A,port:t}}=e;websocketDebuglog(\"connection opened %s%s\",A,t?`:${t}`:\"\")}),diagnosticsChannel.channel(\"undici:websocket:close\").subscribe(e=>{const{websocket:A,code:t,reason:n}=e;websocketDebuglog(\"closed connection to %s - %s %s\",A.url,t,n)}),diagnosticsChannel.channel(\"undici:websocket:socket_error\").subscribe(e=>{websocketDebuglog(\"connection errored - %s\",e.message)}),diagnosticsChannel.channel(\"undici:websocket:ping\").subscribe(e=>{websocketDebuglog(\"ping received\")}),diagnosticsChannel.channel(\"undici:websocket:pong\").subscribe(e=>{websocketDebuglog(\"pong received\")})}var diagnostics={channels:channels$3};const{InvalidArgumentError:InvalidArgumentError$i,NotSupportedError:NotSupportedError$1}=errors$1,assert$c=require$$0__default,{isValidHTTPToken,isValidHeaderChar,isStream,destroy,isBuffer,isFormDataLike,isIterable,isBlobLike,buildURL:buildURL$2,validateHandler,getServerName}=util$m,{channels:channels$2}=diagnostics,{headerNameLowerCasedRecord}=constants$5,invalidPathRegex=/[^\\u0021-\\u00ff]/,kHandler=Symbol(\"handler\");let Request$1=(we=class{constructor(A,{path:t,method:n,body:r,headers:s,query:i,idempotent:E,blocking:Q,upgrade:C,headersTimeout:I,bodyTimeout:a,reset:f,throwOnError:h,expectContinue:L,servername:c},l){if(typeof t!=\"string\")throw new InvalidArgumentError$i(\"path must be a string\");if(t[0]!==\"/\"&&!(t.startsWith(\"http://\")||t.startsWith(\"https://\"))&&n!==\"CONNECT\")throw new InvalidArgumentError$i(\"path must be an absolute URL or start with a slash\");if(invalidPathRegex.exec(t)!==null)throw new InvalidArgumentError$i(\"invalid request path\");if(typeof n!=\"string\")throw new InvalidArgumentError$i(\"method must be a string\");if(!isValidHTTPToken(n))throw new InvalidArgumentError$i(\"invalid request method\");if(C&&typeof C!=\"string\")throw new InvalidArgumentError$i(\"upgrade must be a string\");if(I!=null&&(!Number.isFinite(I)||I<0))throw new InvalidArgumentError$i(\"invalid headersTimeout\");if(a!=null&&(!Number.isFinite(a)||a<0))throw new InvalidArgumentError$i(\"invalid bodyTimeout\");if(f!=null&&typeof f!=\"boolean\")throw new InvalidArgumentError$i(\"invalid reset\");if(L!=null&&typeof L!=\"boolean\")throw new InvalidArgumentError$i(\"invalid expectContinue\");if(this.headersTimeout=I,this.bodyTimeout=a,this.throwOnError=h===!0,this.method=n,this.abort=null,r==null)this.body=null;else if(isStream(r)){this.body=r;const S=this.body._readableState;(!S||!S.autoDestroy)&&(this.endHandler=o(function(){destroy(this)},\"autoDestroy\"),this.body.on(\"end\",this.endHandler)),this.errorHandler=k=>{this.abort?this.abort(k):this.error=k},this.body.on(\"error\",this.errorHandler)}else if(isBuffer(r))this.body=r.byteLength?r:null;else if(ArrayBuffer.isView(r))this.body=r.buffer.byteLength?Buffer.from(r.buffer,r.byteOffset,r.byteLength):null;else if(r instanceof ArrayBuffer)this.body=r.byteLength?Buffer.from(r):null;else if(typeof r==\"string\")this.body=r.length?Buffer.from(r):null;else if(isFormDataLike(r)||isIterable(r)||isBlobLike(r))this.body=r;else throw new InvalidArgumentError$i(\"body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable\");if(this.completed=!1,this.aborted=!1,this.upgrade=C||null,this.path=i?buildURL$2(t,i):t,this.origin=A,this.idempotent=E??(n===\"HEAD\"||n===\"GET\"),this.blocking=Q??!1,this.reset=f??null,this.host=null,this.contentLength=null,this.contentType=null,this.headers=[],this.expectContinue=L??!1,Array.isArray(s)){if(s.length%2!==0)throw new InvalidArgumentError$i(\"headers array must be even\");for(let S=0;S<s.length;S+=2)processHeader(this,s[S],s[S+1])}else if(s&&typeof s==\"object\")if(s[Symbol.iterator])for(const S of s){if(!Array.isArray(S)||S.length!==2)throw new InvalidArgumentError$i(\"headers must be in key-value pair format\");processHeader(this,S[0],S[1])}else{const S=Object.keys(s);for(let k=0;k<S.length;++k)processHeader(this,S[k],s[S[k]])}else if(s!=null)throw new InvalidArgumentError$i(\"headers must be an object or an array\");validateHandler(l,n,C),this.servername=c||getServerName(this.host),this[kHandler]=l,channels$2.create.hasSubscribers&&channels$2.create.publish({request:this})}onBodySent(A){if(this[kHandler].onBodySent)try{return this[kHandler].onBodySent(A)}catch(t){this.abort(t)}}onRequestSent(){if(channels$2.bodySent.hasSubscribers&&channels$2.bodySent.publish({request:this}),this[kHandler].onRequestSent)try{return this[kHandler].onRequestSent()}catch(A){this.abort(A)}}onConnect(A){if(assert$c(!this.aborted),assert$c(!this.completed),this.error)A(this.error);else return this.abort=A,this[kHandler].onConnect(A)}onResponseStarted(){return this[kHandler].onResponseStarted?.()}onHeaders(A,t,n,r){assert$c(!this.aborted),assert$c(!this.completed),channels$2.headers.hasSubscribers&&channels$2.headers.publish({request:this,response:{statusCode:A,headers:t,statusText:r}});try{return this[kHandler].onHeaders(A,t,n,r)}catch(s){this.abort(s)}}onData(A){assert$c(!this.aborted),assert$c(!this.completed);try{return this[kHandler].onData(A)}catch(t){return this.abort(t),!1}}onUpgrade(A,t,n){return assert$c(!this.aborted),assert$c(!this.completed),this[kHandler].onUpgrade(A,t,n)}onComplete(A){this.onFinally(),assert$c(!this.aborted),this.completed=!0,channels$2.trailers.hasSubscribers&&channels$2.trailers.publish({request:this,trailers:A});try{return this[kHandler].onComplete(A)}catch(t){this.onError(t)}}onError(A){if(this.onFinally(),channels$2.error.hasSubscribers&&channels$2.error.publish({request:this,error:A}),!this.aborted)return this.aborted=!0,this[kHandler].onError(A)}onFinally(){this.errorHandler&&(this.body.off(\"error\",this.errorHandler),this.errorHandler=null),this.endHandler&&(this.body.off(\"end\",this.endHandler),this.endHandler=null)}addHeader(A,t){return processHeader(this,A,t),this}},o(we,\"Request\"),we);function processHeader(e,A,t){if(t&&typeof t==\"object\"&&!Array.isArray(t))throw new InvalidArgumentError$i(`invalid ${A} header`);if(t===void 0)return;let n=headerNameLowerCasedRecord[A];if(n===void 0&&(n=A.toLowerCase(),headerNameLowerCasedRecord[n]===void 0&&!isValidHTTPToken(n)))throw new InvalidArgumentError$i(\"invalid header key\");if(Array.isArray(t)){const r=[];for(let s=0;s<t.length;s++)if(typeof t[s]==\"string\"){if(!isValidHeaderChar(t[s]))throw new InvalidArgumentError$i(`invalid ${A} header`);r.push(t[s])}else if(t[s]===null)r.push(\"\");else{if(typeof t[s]==\"object\")throw new InvalidArgumentError$i(`invalid ${A} header`);r.push(`${t[s]}`)}t=r}else if(typeof t==\"string\"){if(!isValidHeaderChar(t))throw new InvalidArgumentError$i(`invalid ${A} header`)}else if(t===null)t=\"\";else{if(typeof t==\"object\")throw new InvalidArgumentError$i(`invalid ${A} header`);t=`${t}`}if(e.host===null&&n===\"host\"){if(typeof t!=\"string\")throw new InvalidArgumentError$i(\"invalid host header\");e.host=t}else if(e.contentLength===null&&n===\"content-length\"){if(e.contentLength=parseInt(t,10),!Number.isFinite(e.contentLength))throw new InvalidArgumentError$i(\"invalid content-length header\")}else if(e.contentType===null&&n===\"content-type\")e.contentType=t,e.headers.push(A,t);else{if(n===\"transfer-encoding\"||n===\"keep-alive\"||n===\"upgrade\")throw new InvalidArgumentError$i(`invalid ${n} header`);if(n===\"connection\"){const r=typeof t==\"string\"?t.toLowerCase():null;if(r!==\"close\"&&r!==\"keep-alive\")throw new InvalidArgumentError$i(\"invalid connection header\");r===\"close\"&&(e.reset=!0)}else{if(n===\"expect\")throw new NotSupportedError$1(\"expect header not supported\");e.headers.push(A,t)}}}o(processHeader,\"processHeader\");var request$2=Request$1;const EventEmitter=require$$0__default$3;let Dispatcher$2=(ke=class extends EventEmitter{dispatch(){throw new Error(\"not implemented\")}close(){throw new Error(\"not implemented\")}destroy(){throw new Error(\"not implemented\")}compose(...A){const t=Array.isArray(A[0])?A[0]:A;let n=this.dispatch.bind(this);for(const r of t)if(r!=null){if(typeof r!=\"function\")throw new TypeError(`invalid interceptor, expected function received ${typeof r}`);if(n=r(n),n==null||typeof n!=\"function\"||n.length!==2)throw new TypeError(\"invalid interceptor\")}return new ComposedDispatcher(this,n)}},o(ke,\"Dispatcher\"),ke);const rt=class rt extends Dispatcher$2{constructor(t,n){super();CA(this,_A,null);CA(this,Ne,null);EA(this,_A,t),EA(this,Ne,n)}dispatch(...t){p(this,Ne).call(this,...t)}close(...t){return p(this,_A).close(...t)}destroy(...t){return p(this,_A).destroy(...t)}};_A=new WeakMap,Ne=new WeakMap,o(rt,\"ComposedDispatcher\");let ComposedDispatcher=rt;var dispatcher=Dispatcher$2;const Dispatcher$1=dispatcher,{ClientDestroyedError:ClientDestroyedError$1,ClientClosedError,InvalidArgumentError:InvalidArgumentError$h}=errors$1,{kDestroy:kDestroy$4,kClose:kClose$6,kDispatch:kDispatch$3,kInterceptors:kInterceptors$4}=symbols$4,kDestroyed=Symbol(\"destroyed\"),kClosed=Symbol(\"closed\"),kOnDestroyed=Symbol(\"onDestroyed\"),kOnClosed=Symbol(\"onClosed\"),kInterceptedDispatch=Symbol(\"Intercepted Dispatch\");let DispatcherBase$4=(Fe=class extends Dispatcher$1{constructor(){super(),this[kDestroyed]=!1,this[kOnDestroyed]=null,this[kClosed]=!1,this[kOnClosed]=[]}get destroyed(){return this[kDestroyed]}get closed(){return this[kClosed]}get interceptors(){return this[kInterceptors$4]}set interceptors(A){if(A){for(let t=A.length-1;t>=0;t--)if(typeof this[kInterceptors$4][t]!=\"function\")throw new InvalidArgumentError$h(\"interceptor must be an function\")}this[kInterceptors$4]=A}close(A){if(A===void 0)return new Promise((n,r)=>{this.close((s,i)=>s?r(s):n(i))});if(typeof A!=\"function\")throw new InvalidArgumentError$h(\"invalid callback\");if(this[kDestroyed]){queueMicrotask(()=>A(new ClientDestroyedError$1,null));return}if(this[kClosed]){this[kOnClosed]?this[kOnClosed].push(A):queueMicrotask(()=>A(null,null));return}this[kClosed]=!0,this[kOnClosed].push(A);const t=o(()=>{const n=this[kOnClosed];this[kOnClosed]=null;for(let r=0;r<n.length;r++)n[r](null,null)},\"onClosed\");this[kClose$6]().then(()=>this.destroy()).then(()=>{queueMicrotask(t)})}destroy(A,t){if(typeof A==\"function\"&&(t=A,A=null),t===void 0)return new Promise((r,s)=>{this.destroy(A,(i,E)=>i?s(i):r(E))});if(typeof t!=\"function\")throw new InvalidArgumentError$h(\"invalid callback\");if(this[kDestroyed]){this[kOnDestroyed]?this[kOnDestroyed].push(t):queueMicrotask(()=>t(null,null));return}A||(A=new ClientDestroyedError$1),this[kDestroyed]=!0,this[kOnDestroyed]=this[kOnDestroyed]||[],this[kOnDestroyed].push(t);const n=o(()=>{const r=this[kOnDestroyed];this[kOnDestroyed]=null;for(let s=0;s<r.length;s++)r[s](null,null)},\"onDestroyed\");this[kDestroy$4](A).then(()=>{queueMicrotask(n)})}[kInterceptedDispatch](A,t){if(!this[kInterceptors$4]||this[kInterceptors$4].length===0)return this[kInterceptedDispatch]=this[kDispatch$3],this[kDispatch$3](A,t);let n=this[kDispatch$3].bind(this);for(let r=this[kInterceptors$4].length-1;r>=0;r--)n=this[kInterceptors$4][r](n);return this[kInterceptedDispatch]=n,n(A,t)}dispatch(A,t){if(!t||typeof t!=\"object\")throw new InvalidArgumentError$h(\"handler must be an object\");try{if(!A||typeof A!=\"object\")throw new InvalidArgumentError$h(\"opts must be an object.\");if(this[kDestroyed]||this[kOnDestroyed])throw new ClientDestroyedError$1;if(this[kClosed])throw new ClientClosedError;return this[kInterceptedDispatch](A,t)}catch(n){if(typeof t.onError!=\"function\")throw new InvalidArgumentError$h(\"invalid onError method\");return t.onError(n),!1}}},o(Fe,\"DispatcherBase\"),Fe);var dispatcherBase=DispatcherBase$4;const net$1=require$$4__default,assert$b=require$$0__default,util$k=util$m,{InvalidArgumentError:InvalidArgumentError$g,ConnectTimeoutError}=errors$1;let tls,SessionCache;_commonjsHelpers.commonjsGlobal.FinalizationRegistry&&!(process.env.NODE_V8_COVERAGE||process.env.UNDICI_NO_FG)?SessionCache=(pe=class{constructor(A){this._maxCachedSessions=A,this._sessionCache=new Map,this._sessionRegistry=new _commonjsHelpers.commonjsGlobal.FinalizationRegistry(t=>{if(this._sessionCache.size<this._maxCachedSessions)return;const n=this._sessionCache.get(t);n!==void 0&&n.deref()===void 0&&this._sessionCache.delete(t)})}get(A){const t=this._sessionCache.get(A);return t?t.deref():null}set(A,t){this._maxCachedSessions!==0&&(this._sessionCache.set(A,new WeakRef(t)),this._sessionRegistry.register(t,A))}},o(pe,\"WeakSessionCache\"),pe):SessionCache=(Se=class{constructor(A){this._maxCachedSessions=A,this._sessionCache=new Map}get(A){return this._sessionCache.get(A)}set(A,t){if(this._maxCachedSessions!==0){if(this._sessionCache.size>=this._maxCachedSessions){const{value:n}=this._sessionCache.keys().next();this._sessionCache.delete(n)}this._sessionCache.set(A,t)}}},o(Se,\"SimpleSessionCache\"),Se);function buildConnector$3({allowH2:e,maxCachedSessions:A,socketPath:t,timeout:n,...r}){if(A!=null&&(!Number.isInteger(A)||A<0))throw new InvalidArgumentError$g(\"maxCachedSessions must be a positive integer or zero\");const s={path:t,...r},i=new SessionCache(A??100);return n=n??1e4,e=e??!1,o(function({hostname:Q,host:C,protocol:I,port:a,servername:f,localAddress:h,httpSocket:L},c){let l;if(I===\"https:\"){tls||(tls=require$$4__default$1),f=f||s.servername||util$k.getServerName(C)||null;const k=f||Q,w=i.get(k)||null;assert$b(k),l=tls.connect({highWaterMark:16384,...s,servername:f,session:w,localAddress:h,ALPNProtocols:e?[\"http/1.1\",\"h2\"]:[\"http/1.1\"],socket:L,port:a||443,host:Q}),l.on(\"session\",function(U){i.set(k,U)})}else assert$b(!L,\"httpSocket can only be sent on TLS update\"),l=net$1.connect({highWaterMark:64*1024,...s,localAddress:h,port:a||80,host:Q});if(s.keepAlive==null||s.keepAlive){const k=s.keepAliveInitialDelay===void 0?6e4:s.keepAliveInitialDelay;l.setKeepAlive(!0,k)}const S=setupTimeout(()=>onConnectTimeout(l),n);return l.setNoDelay(!0).once(I===\"https:\"?\"secureConnect\":\"connect\",function(){if(S(),c){const k=c;c=null,k(null,this)}}).on(\"error\",function(k){if(S(),c){const w=c;c=null,w(k)}}),l},\"connect\")}o(buildConnector$3,\"buildConnector$3\");function setupTimeout(e,A){if(!A)return()=>{};let t=null,n=null;const r=setTimeout(()=>{t=setImmediate(()=>{process.platform===\"win32\"?n=setImmediate(()=>e()):e()})},A);return()=>{clearTimeout(r),clearImmediate(t),clearImmediate(n)}}o(setupTimeout,\"setupTimeout\");function onConnectTimeout(e){let A=\"Connect Timeout Error\";Array.isArray(e.autoSelectFamilyAttemptedAddresses)&&(A+=` (attempted addresses: ${e.autoSelectFamilyAttemptedAddresses.join(\", \")})`),util$k.destroy(e,new ConnectTimeoutError(A))}o(onConnectTimeout,\"onConnectTimeout\");var connect$2=buildConnector$3;let fastNow=Date.now(),fastNowTimeout;const fastTimers=[];function onTimeout(){fastNow=Date.now();let e=fastTimers.length,A=0;for(;A<e;){const t=fastTimers[A];t.state===0?t.state=fastNow+t.delay:t.state>0&&fastNow>=t.state&&(t.state=-1,t.callback(t.opaque)),t.state===-1?(t.state=-2,A!==e-1?fastTimers[A]=fastTimers.pop():fastTimers.pop(),e-=1):A+=1}fastTimers.length>0&&refreshTimeout()}o(onTimeout,\"onTimeout\");function refreshTimeout(){fastNowTimeout?.refresh?fastNowTimeout.refresh():(clearTimeout(fastNowTimeout),fastNowTimeout=setTimeout(onTimeout,1e3),fastNowTimeout.unref&&fastNowTimeout.unref())}o(refreshTimeout,\"refreshTimeout\");const nt=class nt{constructor(A,t,n){this.callback=A,this.delay=t,this.opaque=n,this.state=-2,this.refresh()}refresh(){this.state===-2&&(fastTimers.push(this),(!fastNowTimeout||fastTimers.length===1)&&refreshTimeout()),this.state=0}clear(){this.state=-1}};o(nt,\"Timeout\");let Timeout=nt;var timers$1={setTimeout(e,A,t){return A<1e3?setTimeout(e,A,t):new Timeout(e,A,t)},clearTimeout(e){e instanceof Timeout?e.clear():clearTimeout(e)}},constants$4={},utils={};Object.defineProperty(utils,\"__esModule\",{value:!0}),utils.enumToMap=void 0;function enumToMap(e){const A={};return Object.keys(e).forEach(t=>{const n=e[t];typeof n==\"number\"&&(A[t]=n)}),A}o(enumToMap,\"enumToMap\"),utils.enumToMap=enumToMap,function(e){Object.defineProperty(e,\"__esModule\",{value:!0}),e.SPECIAL_HEADERS=e.HEADER_STATE=e.MINOR=e.MAJOR=e.CONNECTION_TOKEN_CHARS=e.HEADER_CHARS=e.TOKEN=e.STRICT_TOKEN=e.HEX=e.URL_CHAR=e.STRICT_URL_CHAR=e.USERINFO_CHARS=e.MARK=e.ALPHANUM=e.NUM=e.HEX_MAP=e.NUM_MAP=e.ALPHA=e.FINISH=e.H_METHOD_MAP=e.METHOD_MAP=e.METHODS_RTSP=e.METHODS_ICE=e.METHODS_HTTP=e.METHODS=e.LENIENT_FLAGS=e.FLAGS=e.TYPE=e.ERROR=void 0;const A=utils;(function(r){r[r.OK=0]=\"OK\",r[r.INTERNAL=1]=\"INTERNAL\",r[r.STRICT=2]=\"STRICT\",r[r.LF_EXPECTED=3]=\"LF_EXPECTED\",r[r.UNEXPECTED_CONTENT_LENGTH=4]=\"UNEXPECTED_CONTENT_LENGTH\",r[r.CLOSED_CONNECTION=5]=\"CLOSED_CONNECTION\",r[r.INVALID_METHOD=6]=\"INVALID_METHOD\",r[r.INVALID_URL=7]=\"INVALID_URL\",r[r.INVALID_CONSTANT=8]=\"INVALID_CONSTANT\",r[r.INVALID_VERSION=9]=\"INVALID_VERSION\",r[r.INVALID_HEADER_TOKEN=10]=\"INVALID_HEADER_TOKEN\",r[r.INVALID_CONTENT_LENGTH=11]=\"INVALID_CONTENT_LENGTH\",r[r.INVALID_CHUNK_SIZE=12]=\"INVALID_CHUNK_SIZE\",r[r.INVALID_STATUS=13]=\"INVALID_STATUS\",r[r.INVALID_EOF_STATE=14]=\"INVALID_EOF_STATE\",r[r.INVALID_TRANSFER_ENCODING=15]=\"INVALID_TRANSFER_ENCODING\",r[r.CB_MESSAGE_BEGIN=16]=\"CB_MESSAGE_BEGIN\",r[r.CB_HEADERS_COMPLETE=17]=\"CB_HEADERS_COMPLETE\",r[r.CB_MESSAGE_COMPLETE=18]=\"CB_MESSAGE_COMPLETE\",r[r.CB_CHUNK_HEADER=19]=\"CB_CHUNK_HEADER\",r[r.CB_CHUNK_COMPLETE=20]=\"CB_CHUNK_COMPLETE\",r[r.PAUSED=21]=\"PAUSED\",r[r.PAUSED_UPGRADE=22]=\"PAUSED_UPGRADE\",r[r.PAUSED_H2_UPGRADE=23]=\"PAUSED_H2_UPGRADE\",r[r.USER=24]=\"USER\"})(e.ERROR||(e.ERROR={})),function(r){r[r.BOTH=0]=\"BOTH\",r[r.REQUEST=1]=\"REQUEST\",r[r.RESPONSE=2]=\"RESPONSE\"}(e.TYPE||(e.TYPE={})),function(r){r[r.CONNECTION_KEEP_ALIVE=1]=\"CONNECTION_KEEP_ALIVE\",r[r.CONNECTION_CLOSE=2]=\"CONNECTION_CLOSE\",r[r.CONNECTION_UPGRADE=4]=\"CONNECTION_UPGRADE\",r[r.CHUNKED=8]=\"CHUNKED\",r[r.UPGRADE=16]=\"UPGRADE\",r[r.CONTENT_LENGTH=32]=\"CONTENT_LENGTH\",r[r.SKIPBODY=64]=\"SKIPBODY\",r[r.TRAILING=128]=\"TRAILING\",r[r.TRANSFER_ENCODING=512]=\"TRANSFER_ENCODING\"}(e.FLAGS||(e.FLAGS={})),function(r){r[r.HEADERS=1]=\"HEADERS\",r[r.CHUNKED_LENGTH=2]=\"CHUNKED_LENGTH\",r[r.KEEP_ALIVE=4]=\"KEEP_ALIVE\"}(e.LENIENT_FLAGS||(e.LENIENT_FLAGS={}));var t;(function(r){r[r.DELETE=0]=\"DELETE\",r[r.GET=1]=\"GET\",r[r.HEAD=2]=\"HEAD\",r[r.POST=3]=\"POST\",r[r.PUT=4]=\"PUT\",r[r.CONNECT=5]=\"CONNECT\",r[r.OPTIONS=6]=\"OPTIONS\",r[r.TRACE=7]=\"TRACE\",r[r.COPY=8]=\"COPY\",r[r.LOCK=9]=\"LOCK\",r[r.MKCOL=10]=\"MKCOL\",r[r.MOVE=11]=\"MOVE\",r[r.PROPFIND=12]=\"PROPFIND\",r[r.PROPPATCH=13]=\"PROPPATCH\",r[r.SEARCH=14]=\"SEARCH\",r[r.UNLOCK=15]=\"UNLOCK\",r[r.BIND=16]=\"BIND\",r[r.REBIND=17]=\"REBIND\",r[r.UNBIND=18]=\"UNBIND\",r[r.ACL=19]=\"ACL\",r[r.REPORT=20]=\"REPORT\",r[r.MKACTIVITY=21]=\"MKACTIVITY\",r[r.CHECKOUT=22]=\"CHECKOUT\",r[r.MERGE=23]=\"MERGE\",r[r[\"M-SEARCH\"]=24]=\"M-SEARCH\",r[r.NOTIFY=25]=\"NOTIFY\",r[r.SUBSCRIBE=26]=\"SUBSCRIBE\",r[r.UNSUBSCRIBE=27]=\"UNSUBSCRIBE\",r[r.PATCH=28]=\"PATCH\",r[r.PURGE=29]=\"PURGE\",r[r.MKCALENDAR=30]=\"MKCALENDAR\",r[r.LINK=31]=\"LINK\",r[r.UNLINK=32]=\"UNLINK\",r[r.SOURCE=33]=\"SOURCE\",r[r.PRI=34]=\"PRI\",r[r.DESCRIBE=35]=\"DESCRIBE\",r[r.ANNOUNCE=36]=\"ANNOUNCE\",r[r.SETUP=37]=\"SETUP\",r[r.PLAY=38]=\"PLAY\",r[r.PAUSE=39]=\"PAUSE\",r[r.TEARDOWN=40]=\"TEARDOWN\",r[r.GET_PARAMETER=41]=\"GET_PARAMETER\",r[r.SET_PARAMETER=42]=\"SET_PARAMETER\",r[r.REDIRECT=43]=\"REDIRECT\",r[r.RECORD=44]=\"RECORD\",r[r.FLUSH=45]=\"FLUSH\"})(t=e.METHODS||(e.METHODS={})),e.METHODS_HTTP=[t.DELETE,t.GET,t.HEAD,t.POST,t.PUT,t.CONNECT,t.OPTIONS,t.TRACE,t.COPY,t.LOCK,t.MKCOL,t.MOVE,t.PROPFIND,t.PROPPATCH,t.SEARCH,t.UNLOCK,t.BIND,t.REBIND,t.UNBIND,t.ACL,t.REPORT,t.MKACTIVITY,t.CHECKOUT,t.MERGE,t[\"M-SEARCH\"],t.NOTIFY,t.SUBSCRIBE,t.UNSUBSCRIBE,t.PATCH,t.PURGE,t.MKCALENDAR,t.LINK,t.UNLINK,t.PRI,t.SOURCE],e.METHODS_ICE=[t.SOURCE],e.METHODS_RTSP=[t.OPTIONS,t.DESCRIBE,t.ANNOUNCE,t.SETUP,t.PLAY,t.PAUSE,t.TEARDOWN,t.GET_PARAMETER,t.SET_PARAMETER,t.REDIRECT,t.RECORD,t.FLUSH,t.GET,t.POST],e.METHOD_MAP=A.enumToMap(t),e.H_METHOD_MAP={},Object.keys(e.METHOD_MAP).forEach(r=>{/^H/.test(r)&&(e.H_METHOD_MAP[r]=e.METHOD_MAP[r])}),function(r){r[r.SAFE=0]=\"SAFE\",r[r.SAFE_WITH_CB=1]=\"SAFE_WITH_CB\",r[r.UNSAFE=2]=\"UNSAFE\"}(e.FINISH||(e.FINISH={})),e.ALPHA=[];for(let r=65;r<=90;r++)e.ALPHA.push(String.fromCharCode(r)),e.ALPHA.push(String.fromCharCode(r+32));e.NUM_MAP={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9},e.HEX_MAP={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},e.NUM=[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"],e.ALPHANUM=e.ALPHA.concat(e.NUM),e.MARK=[\"-\",\"_\",\".\",\"!\",\"~\",\"*\",\"'\",\"(\",\")\"],e.USERINFO_CHARS=e.ALPHANUM.concat(e.MARK).concat([\"%\",\";\",\":\",\"&\",\"=\",\"+\",\"$\",\",\"]),e.STRICT_URL_CHAR=[\"!\",'\"',\"$\",\"%\",\"&\",\"'\",\"(\",\")\",\"*\",\"+\",\",\",\"-\",\".\",\"/\",\":\",\";\",\"<\",\"=\",\">\",\"@\",\"[\",\"\\\\\",\"]\",\"^\",\"_\",\"`\",\"{\",\"|\",\"}\",\"~\"].concat(e.ALPHANUM),e.URL_CHAR=e.STRICT_URL_CHAR.concat([\"\t\",\"\\f\"]);for(let r=128;r<=255;r++)e.URL_CHAR.push(r);e.HEX=e.NUM.concat([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]),e.STRICT_TOKEN=[\"!\",\"#\",\"$\",\"%\",\"&\",\"'\",\"*\",\"+\",\"-\",\".\",\"^\",\"_\",\"`\",\"|\",\"~\"].concat(e.ALPHANUM),e.TOKEN=e.STRICT_TOKEN.concat([\" \"]),e.HEADER_CHARS=[\"\t\"];for(let r=32;r<=255;r++)r!==127&&e.HEADER_CHARS.push(r);e.CONNECTION_TOKEN_CHARS=e.HEADER_CHARS.filter(r=>r!==44),e.MAJOR=e.NUM_MAP,e.MINOR=e.MAJOR;var n;(function(r){r[r.GENERAL=0]=\"GENERAL\",r[r.CONNECTION=1]=\"CONNECTION\",r[r.CONTENT_LENGTH=2]=\"CONTENT_LENGTH\",r[r.TRANSFER_ENCODING=3]=\"TRANSFER_ENCODING\",r[r.UPGRADE=4]=\"UPGRADE\",r[r.CONNECTION_KEEP_ALIVE=5]=\"CONNECTION_KEEP_ALIVE\",r[r.CONNECTION_CLOSE=6]=\"CONNECTION_CLOSE\",r[r.CONNECTION_UPGRADE=7]=\"CONNECTION_UPGRADE\",r[r.TRANSFER_ENCODING_CHUNKED=8]=\"TRANSFER_ENCODING_CHUNKED\"})(n=e.HEADER_STATE||(e.HEADER_STATE={})),e.SPECIAL_HEADERS={connection:n.CONNECTION,\"content-length\":n.CONTENT_LENGTH,\"proxy-connection\":n.CONNECTION,\"transfer-encoding\":n.TRANSFER_ENCODING,upgrade:n.UPGRADE}}(constants$4);var llhttpWasm,hasRequiredLlhttpWasm;function requireLlhttpWasm(){if(hasRequiredLlhttpWasm)return llhttpWasm;hasRequiredLlhttpWasm=1;const{Buffer:e}=require$$6__default;return llhttpWasm=e.from(\"\",\"base64\"),llhttpWasm}o(requireLlhttpWasm,\"requireLlhttpWasm\");var llhttp_simdWasm,hasRequiredLlhttp_simdWasm;function requireLlhttp_simdWasm(){if(hasRequiredLlhttp_simdWasm)return llhttp_simdWasm;hasRequiredLlhttp_simdWasm=1;const{Buffer:e}=require$$6__default;return llhttp_simdWasm=e.from(\"\",\"base64\"),llhttp_simdWasm}o(requireLlhttp_simdWasm,\"requireLlhttp_simdWasm\");var constants$3,hasRequiredConstants$2;function requireConstants$2(){if(hasRequiredConstants$2)return constants$3;hasRequiredConstants$2=1;const e=[\"GET\",\"HEAD\",\"POST\"],A=new Set(e),t=[101,204,205,304],n=[301,302,303,307,308],r=new Set(n),s=[\"1\",\"7\",\"9\",\"11\",\"13\",\"15\",\"17\",\"19\",\"20\",\"21\",\"22\",\"23\",\"25\",\"37\",\"42\",\"43\",\"53\",\"69\",\"77\",\"79\",\"87\",\"95\",\"101\",\"102\",\"103\",\"104\",\"109\",\"110\",\"111\",\"113\",\"115\",\"117\",\"119\",\"123\",\"135\",\"137\",\"139\",\"143\",\"161\",\"179\",\"389\",\"427\",\"465\",\"512\",\"513\",\"514\",\"515\",\"526\",\"530\",\"531\",\"532\",\"540\",\"548\",\"554\",\"556\",\"563\",\"587\",\"601\",\"636\",\"989\",\"990\",\"993\",\"995\",\"1719\",\"1720\",\"1723\",\"2049\",\"3659\",\"4045\",\"4190\",\"5060\",\"5061\",\"6000\",\"6566\",\"6665\",\"6666\",\"6667\",\"6668\",\"6669\",\"6679\",\"6697\",\"10080\"],i=new Set(s),E=[\"\",\"no-referrer\",\"no-referrer-when-downgrade\",\"same-origin\",\"origin\",\"strict-origin\",\"origin-when-cross-origin\",\"strict-origin-when-cross-origin\",\"unsafe-url\"],Q=new Set(E),C=[\"follow\",\"manual\",\"error\"],I=[\"GET\",\"HEAD\",\"OPTIONS\",\"TRACE\"],a=new Set(I),f=[\"navigate\",\"same-origin\",\"no-cors\",\"cors\"],h=[\"omit\",\"same-origin\",\"include\"],L=[\"default\",\"no-store\",\"reload\",\"no-cache\",\"force-cache\",\"only-if-cached\"],c=[\"content-encoding\",\"content-language\",\"content-location\",\"content-type\",\"content-length\"],l=[\"half\"],S=[\"CONNECT\",\"TRACE\",\"TRACK\"],k=new Set(S),w=[\"audio\",\"audioworklet\",\"font\",\"image\",\"manifest\",\"paintworklet\",\"script\",\"style\",\"track\",\"video\",\"xslt\",\"\"],U=new Set(w);return constants$3={subresource:w,forbiddenMethods:S,requestBodyHeader:c,referrerPolicy:E,requestRedirect:C,requestMode:f,requestCredentials:h,requestCache:L,redirectStatus:n,corsSafeListedMethods:e,nullBodyStatus:t,safeMethods:I,badPorts:s,requestDuplex:l,subresourceSet:U,badPortsSet:i,redirectStatusSet:r,corsSafeListedMethodsSet:A,safeMethodsSet:a,forbiddenMethodsSet:k,referrerPolicySet:Q},constants$3}o(requireConstants$2,\"requireConstants$2\");var global$1,hasRequiredGlobal;function requireGlobal(){if(hasRequiredGlobal)return global$1;hasRequiredGlobal=1;const e=Symbol.for(\"undici.globalOrigin.1\");function A(){return globalThis[e]}o(A,\"getGlobalOrigin\");function t(n){if(n===void 0){Object.defineProperty(globalThis,e,{value:void 0,writable:!0,enumerable:!1,configurable:!1});return}const r=new URL(n);if(r.protocol!==\"http:\"&&r.protocol!==\"https:\")throw new TypeError(`Only http & https urls are allowed, received ${r.protocol}`);Object.defineProperty(globalThis,e,{value:r,writable:!0,enumerable:!1,configurable:!1})}return o(t,\"setGlobalOrigin\"),global$1={getGlobalOrigin:A,setGlobalOrigin:t},global$1}o(requireGlobal,\"requireGlobal\");var dataUrl,hasRequiredDataUrl;function requireDataUrl(){if(hasRequiredDataUrl)return dataUrl;hasRequiredDataUrl=1;const e=require$$0__default,A=new TextEncoder,t=/^[!#$%&'*+-.^_|~A-Za-z0-9]+$/,n=/[\\u000A\\u000D\\u0009\\u0020]/,r=/[\\u0009\\u000A\\u000C\\u000D\\u0020]/g,s=/[\\u0009\\u0020-\\u007E\\u0080-\\u00FF]/;function i(g){e(g.protocol===\"data:\");let d=E(g,!0);d=d.slice(5);const F={position:0};let N=C(\",\",d,F);const u=N.length;if(N=M(N,!0,!0),F.position>=d.length)return\"failure\";F.position++;const b=d.slice(u+1);let m=I(b);if(/;(\\u0020){0,}base64$/i.test(N)){const v=D(m);if(m=c(v),m===\"failure\")return\"failure\";N=N.slice(0,-6),N=N.replace(/(\\u0020)+$/,\"\"),N=N.slice(0,-1)}N.startsWith(\";\")&&(N=\"text/plain\"+N);let T=L(N);return T===\"failure\"&&(T=L(\"text/plain;charset=US-ASCII\")),{mimeType:T,body:m}}o(i,\"dataURLProcessor\");function E(g,d=!1){if(!d)return g.href;const F=g.href,N=g.hash.length,u=N===0?F:F.substring(0,F.length-N);return!N&&F.endsWith(\"#\")?u.slice(0,-1):u}o(E,\"URLSerializer\");function Q(g,d,F){let N=\"\";for(;F.position<d.length&&g(d[F.position]);)N+=d[F.position],F.position++;return N}o(Q,\"collectASequenceOfCodePoints\");function C(g,d,F){const N=d.indexOf(g,F.position),u=F.position;return N===-1?(F.position=d.length,d.slice(u)):(F.position=N,d.slice(u,F.position))}o(C,\"collectASequenceOfCodePointsFast\");function I(g){const d=A.encode(g);return h(d)}o(I,\"stringPercentDecode\");function a(g){return g>=48&&g<=57||g>=65&&g<=70||g>=97&&g<=102}o(a,\"isHexCharByte\");function f(g){return g>=48&&g<=57?g-48:(g&223)-55}o(f,\"hexByteToNumber\");function h(g){const d=g.length,F=new Uint8Array(d);let N=0;for(let u=0;u<d;++u){const b=g[u];b!==37?F[N++]=b:b===37&&!(a(g[u+1])&&a(g[u+2]))?F[N++]=37:(F[N++]=f(g[u+1])<<4|f(g[u+2]),u+=2)}return d===N?F:F.subarray(0,N)}o(h,\"percentDecode\");function L(g){g=w(g,!0,!0);const d={position:0},F=C(\"/\",g,d);if(F.length===0||!t.test(F)||d.position>g.length)return\"failure\";d.position++;let N=C(\";\",g,d);if(N=w(N,!1,!0),N.length===0||!t.test(N))return\"failure\";const u=F.toLowerCase(),b=N.toLowerCase(),m={type:u,subtype:b,parameters:new Map,essence:`${u}/${b}`};for(;d.position<g.length;){d.position++,Q(Z=>n.test(Z),g,d);let T=Q(Z=>Z!==\";\"&&Z!==\"=\",g,d);if(T=T.toLowerCase(),d.position<g.length){if(g[d.position]===\";\")continue;d.position++}if(d.position>g.length)break;let v=null;if(g[d.position]==='\"')v=l(g,d,!0),C(\";\",g,d);else if(v=C(\";\",g,d),v=w(v,!1,!0),v.length===0)continue;T.length!==0&&t.test(T)&&(v.length===0||s.test(v))&&!m.parameters.has(T)&&m.parameters.set(T,v)}return m}o(L,\"parseMIMEType\");function c(g){g=g.replace(r,\"\");let d=g.length;if(d%4===0&&g.charCodeAt(d-1)===61&&(--d,g.charCodeAt(d-1)===61&&--d),d%4===1||/[^+/0-9A-Za-z]/.test(g.length===d?g:g.substring(0,d)))return\"failure\";const F=Buffer.from(g,\"base64\");return new Uint8Array(F.buffer,F.byteOffset,F.byteLength)}o(c,\"forgivingBase64\");function l(g,d,F){const N=d.position;let u=\"\";for(e(g[d.position]==='\"'),d.position++;u+=Q(m=>m!=='\"'&&m!==\"\\\\\",g,d),!(d.position>=g.length);){const b=g[d.position];if(d.position++,b===\"\\\\\"){if(d.position>=g.length){u+=\"\\\\\";break}u+=g[d.position],d.position++}else{e(b==='\"');break}}return F?u:g.slice(N,d.position)}o(l,\"collectAnHTTPQuotedString\");function S(g){e(g!==\"failure\");const{parameters:d,essence:F}=g;let N=F;for(let[u,b]of d.entries())N+=\";\",N+=u,N+=\"=\",t.test(b)||(b=b.replace(/(\\\\|\")/g,\"\\\\$1\"),b='\"'+b,b+='\"'),N+=b;return N}o(S,\"serializeAMimeType\");function k(g){return g===13||g===10||g===9||g===32}o(k,\"isHTTPWhiteSpace\");function w(g,d=!0,F=!0){return B(g,d,F,k)}o(w,\"removeHTTPWhitespace\");function U(g){return g===13||g===10||g===9||g===12||g===32}o(U,\"isASCIIWhitespace\");function M(g,d=!0,F=!0){return B(g,d,F,U)}o(M,\"removeASCIIWhitespace\");function B(g,d,F,N){let u=0,b=g.length-1;if(d)for(;u<g.length&&N(g.charCodeAt(u));)u++;if(F)for(;b>0&&N(g.charCodeAt(b));)b--;return u===0&&b===g.length-1?g:g.slice(u,b+1)}o(B,\"removeChars\");function D(g){const d=g.length;if(65535>d)return String.fromCharCode.apply(null,g);let F=\"\",N=0,u=65535;for(;N<d;)N+u>d&&(u=d-N),F+=String.fromCharCode.apply(null,g.subarray(N,N+=u));return F}o(D,\"isomorphicDecode\");function G(g){switch(g.essence){case\"application/ecmascript\":case\"application/javascript\":case\"application/x-ecmascript\":case\"application/x-javascript\":case\"text/ecmascript\":case\"text/javascript\":case\"text/javascript1.0\":case\"text/javascript1.1\":case\"text/javascript1.2\":case\"text/javascript1.3\":case\"text/javascript1.4\":case\"text/javascript1.5\":case\"text/jscript\":case\"text/livescript\":case\"text/x-ecmascript\":case\"text/x-javascript\":return\"text/javascript\";case\"application/json\":case\"text/json\":return\"application/json\";case\"image/svg+xml\":return\"image/svg+xml\";case\"text/xml\":case\"application/xml\":return\"application/xml\"}return g.subtype.endsWith(\"+json\")?\"application/json\":g.subtype.endsWith(\"+xml\")?\"application/xml\":\"\"}return o(G,\"minimizeSupportedMimeType\"),dataUrl={dataURLProcessor:i,URLSerializer:E,collectASequenceOfCodePoints:Q,collectASequenceOfCodePointsFast:C,stringPercentDecode:I,parseMIMEType:L,collectAnHTTPQuotedString:l,serializeAMimeType:S,removeChars:B,minimizeSupportedMimeType:G,HTTP_TOKEN_CODEPOINTS:t,isomorphicDecode:D},dataUrl}o(requireDataUrl,\"requireDataUrl\");var webidl_1,hasRequiredWebidl;function requireWebidl(){if(hasRequiredWebidl)return webidl_1;hasRequiredWebidl=1;const{types:e,inspect:A}=require$$0__default$1,{toUSVString:t}=util$m,n={};return n.converters={},n.util={},n.errors={},n.errors.exception=function(r){return new TypeError(`${r.header}: ${r.message}`)},n.errors.conversionFailed=function(r){const s=r.types.length===1?\"\":\" one of\",i=`${r.argument} could not be converted to${s}: ${r.types.join(\", \")}.`;return n.errors.exception({header:r.prefix,message:i})},n.errors.invalidArgument=function(r){return n.errors.exception({header:r.prefix,message:`\"${r.value}\" is an invalid ${r.type}.`})},n.brandCheck=function(r,s,i=void 0){if(i?.strict!==!1){if(!(r instanceof s))throw new TypeError(\"Illegal invocation\")}else if(r?.[Symbol.toStringTag]!==s.prototype[Symbol.toStringTag])throw new TypeError(\"Illegal invocation\")},n.argumentLengthCheck=function({length:r},s,i){if(r<s)throw n.errors.exception({message:`${s} argument${s!==1?\"s\":\"\"} required, but${r?\" only\":\"\"} ${r} found.`,...i})},n.illegalConstructor=function(){throw n.errors.exception({header:\"TypeError\",message:\"Illegal constructor\"})},n.util.Type=function(r){switch(typeof r){case\"undefined\":return\"Undefined\";case\"boolean\":return\"Boolean\";case\"string\":return\"String\";case\"symbol\":return\"Symbol\";case\"number\":return\"Number\";case\"bigint\":return\"BigInt\";case\"function\":case\"object\":return r===null?\"Null\":\"Object\"}},n.util.ConvertToInt=function(r,s,i,E={}){let Q,C;s===64?(Q=Math.pow(2,53)-1,i===\"unsigned\"?C=0:C=Math.pow(-2,53)+1):i===\"unsigned\"?(C=0,Q=Math.pow(2,s)-1):(C=Math.pow(-2,s)-1,Q=Math.pow(2,s-1)-1);let I=Number(r);if(I===0&&(I=0),E.enforceRange===!0){if(Number.isNaN(I)||I===Number.POSITIVE_INFINITY||I===Number.NEGATIVE_INFINITY)throw n.errors.exception({header:\"Integer conversion\",message:`Could not convert ${n.util.Stringify(r)} to an integer.`});if(I=n.util.IntegerPart(I),I<C||I>Q)throw n.errors.exception({header:\"Integer conversion\",message:`Value must be between ${C}-${Q}, got ${I}.`});return I}return!Number.isNaN(I)&&E.clamp===!0?(I=Math.min(Math.max(I,C),Q),Math.floor(I)%2===0?I=Math.floor(I):I=Math.ceil(I),I):Number.isNaN(I)||I===0&&Object.is(0,I)||I===Number.POSITIVE_INFINITY||I===Number.NEGATIVE_INFINITY?0:(I=n.util.IntegerPart(I),I=I%Math.pow(2,s),i===\"signed\"&&I>=Math.pow(2,s)-1?I-Math.pow(2,s):I)},n.util.IntegerPart=function(r){const s=Math.floor(Math.abs(r));return r<0?-1*s:s},n.util.Stringify=function(r){switch(n.util.Type(r)){case\"Symbol\":return`Symbol(${r.description})`;case\"Object\":return A(r);case\"String\":return`\"${r}\"`;default:return`${r}`}},n.sequenceConverter=function(r){return(s,i)=>{if(n.util.Type(s)!==\"Object\")throw n.errors.exception({header:\"Sequence\",message:`Value of type ${n.util.Type(s)} is not an Object.`});const E=typeof i==\"function\"?i():s?.[Symbol.iterator]?.(),Q=[];if(E===void 0||typeof E.next!=\"function\")throw n.errors.exception({header:\"Sequence\",message:\"Object is not an iterator.\"});for(;;){const{done:C,value:I}=E.next();if(C)break;Q.push(r(I))}return Q}},n.recordConverter=function(r,s){return i=>{if(n.util.Type(i)!==\"Object\")throw n.errors.exception({header:\"Record\",message:`Value of type ${n.util.Type(i)} is not an Object.`});const E={};if(!e.isProxy(i)){const C=[...Object.getOwnPropertyNames(i),...Object.getOwnPropertySymbols(i)];for(const I of C){const a=r(I),f=s(i[I]);E[a]=f}return E}const Q=Reflect.ownKeys(i);for(const C of Q)if(Reflect.getOwnPropertyDescriptor(i,C)?.enumerable){const a=r(C),f=s(i[C]);E[a]=f}return E}},n.interfaceConverter=function(r){return(s,i={})=>{if(i.strict!==!1&&!(s instanceof r))throw n.errors.exception({header:r.name,message:`Expected ${n.util.Stringify(s)} to be an instance of ${r.name}.`});return s}},n.dictionaryConverter=function(r){return s=>{const i=n.util.Type(s),E={};if(i===\"Null\"||i===\"Undefined\")return E;if(i!==\"Object\")throw n.errors.exception({header:\"Dictionary\",message:`Expected ${s} to be one of: Null, Undefined, Object.`});for(const Q of r){const{key:C,defaultValue:I,required:a,converter:f}=Q;if(a===!0&&!Object.hasOwn(s,C))throw n.errors.exception({header:\"Dictionary\",message:`Missing required key \"${C}\".`});let h=s[C];const L=Object.hasOwn(Q,\"defaultValue\");if(L&&h!==null&&(h=h??I),a||L||h!==void 0){if(h=f(h),Q.allowedValues&&!Q.allowedValues.includes(h))throw n.errors.exception({header:\"Dictionary\",message:`${h} is not an accepted type. Expected one of ${Q.allowedValues.join(\", \")}.`});E[C]=h}}return E}},n.nullableConverter=function(r){return s=>s===null?s:r(s)},n.converters.DOMString=function(r,s={}){if(r===null&&s.legacyNullToEmptyString)return\"\";if(typeof r==\"symbol\")throw new TypeError(\"Could not convert argument of type symbol to string.\");return String(r)},n.converters.ByteString=function(r){const s=n.converters.DOMString(r);for(let i=0;i<s.length;i++)if(s.charCodeAt(i)>255)throw new TypeError(`Cannot convert argument to a ByteString because the character at index ${i} has a value of ${s.charCodeAt(i)} which is greater than 255.`);return s},n.converters.USVString=t,n.converters.boolean=function(r){return!!r},n.converters.any=function(r){return r},n.converters[\"long long\"]=function(r){return n.util.ConvertToInt(r,64,\"signed\")},n.converters[\"unsigned long long\"]=function(r){return n.util.ConvertToInt(r,64,\"unsigned\")},n.converters[\"unsigned long\"]=function(r){return n.util.ConvertToInt(r,32,\"unsigned\")},n.converters[\"unsigned short\"]=function(r,s){return n.util.ConvertToInt(r,16,\"unsigned\",s)},n.converters.ArrayBuffer=function(r,s={}){if(n.util.Type(r)!==\"Object\"||!e.isAnyArrayBuffer(r))throw n.errors.conversionFailed({prefix:n.util.Stringify(r),argument:n.util.Stringify(r),types:[\"ArrayBuffer\"]});if(s.allowShared===!1&&e.isSharedArrayBuffer(r))throw n.errors.exception({header:\"ArrayBuffer\",message:\"SharedArrayBuffer is not allowed.\"});if(r.resizable||r.growable)throw n.errors.exception({header:\"ArrayBuffer\",message:\"Received a resizable ArrayBuffer.\"});return r},n.converters.TypedArray=function(r,s,i={}){if(n.util.Type(r)!==\"Object\"||!e.isTypedArray(r)||r.constructor.name!==s.name)throw n.errors.conversionFailed({prefix:`${s.name}`,argument:n.util.Stringify(r),types:[s.name]});if(i.allowShared===!1&&e.isSharedArrayBuffer(r.buffer))throw n.errors.exception({header:\"ArrayBuffer\",message:\"SharedArrayBuffer is not allowed.\"});if(r.buffer.resizable||r.buffer.growable)throw n.errors.exception({header:\"ArrayBuffer\",message:\"Received a resizable ArrayBuffer.\"});return r},n.converters.DataView=function(r,s={}){if(n.util.Type(r)!==\"Object\"||!e.isDataView(r))throw n.errors.exception({header:\"DataView\",message:\"Object is not a DataView.\"});if(s.allowShared===!1&&e.isSharedArrayBuffer(r.buffer))throw n.errors.exception({header:\"ArrayBuffer\",message:\"SharedArrayBuffer is not allowed.\"});if(r.buffer.resizable||r.buffer.growable)throw n.errors.exception({header:\"ArrayBuffer\",message:\"Received a resizable ArrayBuffer.\"});return r},n.converters.BufferSource=function(r,s={}){if(e.isAnyArrayBuffer(r))return n.converters.ArrayBuffer(r,{...s,allowShared:!1});if(e.isTypedArray(r))return n.converters.TypedArray(r,r.constructor,{...s,allowShared:!1});if(e.isDataView(r))return n.converters.DataView(r,s,{...s,allowShared:!1});throw new TypeError(`Could not convert ${n.util.Stringify(r)} to a BufferSource.`)},n.converters[\"sequence<ByteString>\"]=n.sequenceConverter(n.converters.ByteString),n.converters[\"sequence<sequence<ByteString>>\"]=n.sequenceConverter(n.converters[\"sequence<ByteString>\"]),n.converters[\"record<ByteString, ByteString>\"]=n.recordConverter(n.converters.ByteString,n.converters.ByteString),webidl_1={webidl:n},webidl_1}o(requireWebidl,\"requireWebidl\");var util$j,hasRequiredUtil$5;function requireUtil$5(){if(hasRequiredUtil$5)return util$j;hasRequiredUtil$5=1;const{Transform:e}=Stream__default,A=zlib__default,{redirectStatusSet:t,referrerPolicySet:n,badPortsSet:r}=requireConstants$2(),{getGlobalOrigin:s}=requireGlobal(),{collectASequenceOfCodePoints:i,collectAnHTTPQuotedString:E,removeChars:Q,parseMIMEType:C}=requireDataUrl(),{performance:I}=require$$5__default,{isBlobLike:a,ReadableStreamFrom:f,isValidHTTPToken:h}=util$m,L=require$$0__default,{isUint8Array:c}=require$$8__default$1,{webidl:l}=requireWebidl();let S=[],k;try{k=__webpack_require__(/*! node:crypto */ \"node:crypto\");const y=[\"sha256\",\"sha384\",\"sha512\"];S=k.getHashes().filter(Y=>y.includes(Y))}catch{}function w(y){const Y=y.urlList,W=Y.length;return W===0?null:Y[W-1].toString()}o(w,\"responseURL\");function U(y,Y){if(!t.has(y.status))return null;let W=y.headersList.get(\"location\",!0);return W!==null&&N(W)&&(M(W)||(W=B(W)),W=new URL(W,w(y))),W&&!W.hash&&(W.hash=Y),W}o(U,\"responseLocationURL\");function M(y){for(const Y of y){const W=Y.charCodeAt(0);if(W>=128||W>=0&&W<=31||W===127)return!1}return!0}o(M,\"isValidEncodedURL\");function B(y){return Buffer.from(y,\"binary\").toString(\"utf8\")}o(B,\"normalizeBinaryStringToUtf8\");function D(y){return y.urlList[y.urlList.length-1]}o(D,\"requestCurrentURL\");function G(y){const Y=D(y);return ZA(Y)&&r.has(Y.port)?\"blocked\":\"allowed\"}o(G,\"requestBadPort\");function g(y){return y instanceof Error||y?.constructor?.name===\"Error\"||y?.constructor?.name===\"DOMException\"}o(g,\"isErrorLike\");function d(y){for(let Y=0;Y<y.length;++Y){const W=y.charCodeAt(Y);if(!(W===9||W>=32&&W<=126||W>=128&&W<=255))return!1}return!0}o(d,\"isValidReasonPhrase\");const F=h;function N(y){return!(y.startsWith(\"\t\")||y.startsWith(\" \")||y.endsWith(\"\t\")||y.endsWith(\" \")||y.includes(\"\\0\")||y.includes(\"\\r\")||y.includes(`\n`))}o(N,\"isValidHeaderValue\");function u(y,Y){const{headersList:W}=Y,j=(W.get(\"referrer-policy\",!0)??\"\").split(\",\");let nA=\"\";if(j.length>0)for(let R=j.length;R!==0;R--){const O=j[R-1].trim();if(n.has(O)){nA=O;break}}nA!==\"\"&&(y.referrerPolicy=nA)}o(u,\"setRequestReferrerPolicyOnRedirect\");function b(){return\"allowed\"}o(b,\"crossOriginResourcePolicyCheck\");function m(){return\"success\"}o(m,\"corsCheck\");function T(){return\"success\"}o(T,\"TAOCheck\");function v(y){let Y=null;Y=y.mode,y.headersList.set(\"sec-fetch-mode\",Y,!0)}o(v,\"appendFetchMetadata\");function Z(y){let Y=y.origin;if(y.responseTainting===\"cors\"||y.mode===\"websocket\")Y&&y.headersList.append(\"origin\",Y,!0);else if(y.method!==\"GET\"&&y.method!==\"HEAD\"){switch(y.referrerPolicy){case\"no-referrer\":Y=null;break;case\"no-referrer-when-downgrade\":case\"strict-origin\":case\"strict-origin-when-cross-origin\":y.origin&&ee(y.origin)&&!ee(D(y))&&(Y=null);break;case\"same-origin\":yA(y,D(y))||(Y=null);break}Y&&y.headersList.append(\"origin\",Y,!0)}}o(Z,\"appendRequestOriginHeader\");function P(y,Y){return y}o(P,\"coarsenTime\");function AA(y,Y,W){return!y?.startTime||y.startTime<Y?{domainLookupStartTime:Y,domainLookupEndTime:Y,connectionStartTime:Y,connectionEndTime:Y,secureConnectionStartTime:Y,ALPNNegotiatedProtocol:y?.ALPNNegotiatedProtocol}:{domainLookupStartTime:P(y.domainLookupStartTime),domainLookupEndTime:P(y.domainLookupEndTime),connectionStartTime:P(y.connectionStartTime),connectionEndTime:P(y.connectionEndTime),secureConnectionStartTime:P(y.secureConnectionStartTime),ALPNNegotiatedProtocol:y.ALPNNegotiatedProtocol}}o(AA,\"clampAndCoarsenConnectionTimingInfo\");function K(y){return P(I.now())}o(K,\"coarsenedSharedCurrentTime\");function tA(y){return{startTime:y.startTime??0,redirectStartTime:0,redirectEndTime:0,postRedirectStartTime:y.startTime??0,finalServiceWorkerStartTime:0,finalNetworkResponseStartTime:0,finalNetworkRequestStartTime:0,endTime:0,encodedBodySize:0,decodedBodySize:0,finalConnectionTimingInfo:null}}o(tA,\"createOpaqueTimingInfo\");function aA(){return{referrerPolicy:\"strict-origin-when-cross-origin\"}}o(aA,\"makePolicyContainer\");function X(y){return{referrerPolicy:y.referrerPolicy}}o(X,\"clonePolicyContainer\");function $(y){const Y=y.referrerPolicy;L(Y);let W=null;if(y.referrer===\"client\"){const H=s();if(!H||H.origin===\"null\")return\"no-referrer\";W=new URL(H)}else y.referrer instanceof URL&&(W=y.referrer);let j=V(W);const nA=V(W,!0);j.toString().length>4096&&(j=nA);const R=yA(y,j),O=q(j)&&!q(y.url);switch(Y){case\"origin\":return nA??V(W,!0);case\"unsafe-url\":return j;case\"same-origin\":return R?nA:\"no-referrer\";case\"origin-when-cross-origin\":return R?j:nA;case\"strict-origin-when-cross-origin\":{const H=D(y);return yA(j,H)?j:q(j)&&!q(H)?\"no-referrer\":nA}case\"strict-origin\":case\"no-referrer-when-downgrade\":default:return O?\"no-referrer\":nA}}o($,\"determineRequestsReferrer\");function V(y,Y){return L(y instanceof URL),y=new URL(y),y.protocol===\"file:\"||y.protocol===\"about:\"||y.protocol===\"blank:\"?\"no-referrer\":(y.username=\"\",y.password=\"\",y.hash=\"\",Y&&(y.pathname=\"\",y.search=\"\"),y)}o(V,\"stripURLForReferrer\");function q(y){if(!(y instanceof URL))return!1;if(y.href===\"about:blank\"||y.href===\"about:srcdoc\"||y.protocol===\"data:\"||y.protocol===\"file:\")return!0;return Y(y.origin);function Y(W){if(W==null||W===\"null\")return!1;const j=new URL(W);return!!(j.protocol===\"https:\"||j.protocol===\"wss:\"||/^127(?:\\.[0-9]+){0,2}\\.[0-9]+$|^\\[(?:0*:)*?:?0*1\\]$/.test(j.hostname)||j.hostname===\"localhost\"||j.hostname.includes(\"localhost.\")||j.hostname.endsWith(\".localhost\"))}}o(q,\"isURLPotentiallyTrustworthy\");function z(y,Y){if(k===void 0)return!0;const W=iA(Y);if(W===\"no metadata\"||W.length===0)return!0;const j=gA(W),nA=BA(W,j);for(const R of nA){const O=R.algo,H=R.hash;let J=k.createHash(O).update(y).digest(\"base64\");if(J[J.length-1]===\"=\"&&(J[J.length-2]===\"=\"?J=J.slice(0,-2):J=J.slice(0,-1)),sA(J,H))return!0}return!1}o(z,\"bytesMatch\");const rA=/(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\\s|$)( +[!-~]*)?)?/i;function iA(y){const Y=[];let W=!0;for(const j of y.split(\" \")){W=!1;const nA=rA.exec(j);if(nA===null||nA.groups===void 0||nA.groups.algo===void 0)continue;const R=nA.groups.algo.toLowerCase();S.includes(R)&&Y.push(nA.groups)}return W===!0?\"no metadata\":Y}o(iA,\"parseMetadata\");function gA(y){let Y=y[0].algo;if(Y[3]===\"5\")return Y;for(let W=1;W<y.length;++W){const j=y[W];if(j.algo[3]===\"5\"){Y=\"sha512\";break}else{if(Y[3]===\"3\")continue;j.algo[3]===\"3\"&&(Y=\"sha384\")}}return Y}o(gA,\"getStrongestMetadata\");function BA(y,Y){if(y.length===1)return y;let W=0;for(let j=0;j<y.length;++j)y[j].algo===Y&&(y[W++]=y[j]);return y.length=W,y}o(BA,\"filterMetadataListByAlgorithm\");function sA(y,Y){if(y.length!==Y.length)return!1;for(let W=0;W<y.length;++W)if(y[W]!==Y[W]){if(y[W]===\"+\"&&Y[W]===\"-\"||y[W]===\"/\"&&Y[W]===\"_\")continue;return!1}return!0}o(sA,\"compareBase64Mixed\");function eA(y){}o(eA,\"tryUpgradeRequestToAPotentiallyTrustworthyURL\");function yA(y,Y){return y.origin===Y.origin&&y.origin===\"null\"||y.protocol===Y.protocol&&y.hostname===Y.hostname&&y.port===Y.port}o(yA,\"sameOrigin\");function WA(){let y,Y;return{promise:new Promise((j,nA)=>{y=j,Y=nA}),resolve:y,reject:Y}}o(WA,\"createDeferredPromise\");function wA(y){return y.controller.state===\"aborted\"}o(wA,\"isAborted\");function qA(y){return y.controller.state===\"aborted\"||y.controller.state===\"terminated\"}o(qA,\"isCancelled\");const MA={delete:\"DELETE\",DELETE:\"DELETE\",get:\"GET\",GET:\"GET\",head:\"HEAD\",HEAD:\"HEAD\",options:\"OPTIONS\",OPTIONS:\"OPTIONS\",post:\"POST\",POST:\"POST\",put:\"PUT\",PUT:\"PUT\"},HA={...MA,patch:\"patch\",PATCH:\"PATCH\"};Object.setPrototypeOf(MA,null),Object.setPrototypeOf(HA,null);function pA(y){return MA[y.toLowerCase()]??y}o(pA,\"normalizeMethod\");function YA(y){const Y=JSON.stringify(y);if(Y===void 0)throw new TypeError(\"Value is not JSON serializable\");return L(typeof Y==\"string\"),Y}o(YA,\"serializeJavascriptValueToJSONString\");const UA=Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));function JA(y,Y,W=0,j=1){var R,O,H;const J=class J{constructor(x,QA){CA(this,R,void 0);CA(this,O,void 0);CA(this,H,void 0);EA(this,R,x),EA(this,O,QA),EA(this,H,0)}next(){if(typeof this!=\"object\"||this===null||!yt(R,this))throw new TypeError(`'next' called on an object that does not implement interface ${y} Iterator.`);const x=p(this,H),QA=p(this,R)[Y],lA=QA.length;if(x>=lA)return{value:void 0,done:!0};const{[W]:uA,[j]:cA}=QA[x];EA(this,H,x+1);let fA;switch(p(this,O)){case\"key\":fA=uA;break;case\"value\":fA=cA;break;case\"key+value\":fA=[uA,cA];break}return{value:fA,done:!1}}};R=new WeakMap,O=new WeakMap,H=new WeakMap,o(J,\"FastIterableIterator\");let nA=J;return delete nA.prototype.constructor,Object.setPrototypeOf(nA.prototype,UA),Object.defineProperties(nA.prototype,{[Symbol.toStringTag]:{writable:!1,enumerable:!1,configurable:!0,value:`${y} Iterator`},next:{writable:!0,enumerable:!0,configurable:!0}}),function(_,x){return new nA(_,x)}}o(JA,\"createIterator\");function VA(y,Y,W,j=0,nA=1){const R=JA(y,W,j,nA),O={keys:{writable:!0,enumerable:!0,configurable:!0,value:o(function(){return l.brandCheck(this,Y),R(this,\"key\")},\"keys\")},values:{writable:!0,enumerable:!0,configurable:!0,value:o(function(){return l.brandCheck(this,Y),R(this,\"value\")},\"values\")},entries:{writable:!0,enumerable:!0,configurable:!0,value:o(function(){return l.brandCheck(this,Y),R(this,\"key+value\")},\"entries\")},forEach:{writable:!0,enumerable:!0,configurable:!0,value:o(function(J,_=globalThis){if(l.brandCheck(this,Y),l.argumentLengthCheck(arguments,1,{header:`${y}.forEach`}),typeof J!=\"function\")throw new TypeError(`Failed to execute 'forEach' on '${y}': parameter 1 is not of type 'Function'.`);for(const{0:x,1:QA}of R(this,\"key+value\"))J.call(_,QA,x,this)},\"forEach\")}};return Object.defineProperties(Y.prototype,{...O,[Symbol.iterator]:{writable:!0,enumerable:!1,configurable:!0,value:O.entries.value}})}o(VA,\"iteratorMixin\");async function OA(y,Y,W){const j=Y,nA=W;let R;try{R=y.stream.getReader()}catch(O){nA(O);return}try{const O=await PA(R);j(O)}catch(O){nA(O)}}o(OA,\"fullyReadBody\");function IA(y){return y instanceof ReadableStream||y[Symbol.toStringTag]===\"ReadableStream\"&&typeof y.tee==\"function\"}o(IA,\"isReadableStreamLike\");function hA(y){try{y.close(),y.byobRequest?.respond(0)}catch(Y){if(!Y.message.includes(\"Controller is already closed\")&&!Y.message.includes(\"ReadableStream is already closed\"))throw Y}}o(hA,\"readableStreamClose\");function SA(y){for(let Y=0;Y<y.length;Y++)L(y.charCodeAt(Y)<=255);return y}o(SA,\"isomorphicEncode\");async function PA(y){const Y=[];let W=0;for(;;){const{done:j,value:nA}=await y.read();if(j)return Buffer.concat(Y,W);if(!c(nA))throw new TypeError(\"Received non-Uint8Array chunk\");Y.push(nA),W+=nA.length}}o(PA,\"readAllBytes\");function Pe(y){L(\"protocol\"in y);const Y=y.protocol;return Y===\"about:\"||Y===\"blob:\"||Y===\"data:\"}o(Pe,\"urlIsLocal\");function ee(y){return typeof y==\"string\"?y.startsWith(\"https:\"):y.protocol===\"https:\"}o(ee,\"urlHasHttpsScheme\");function ZA(y){L(\"protocol\"in y);const Y=y.protocol;return Y===\"http:\"||Y===\"https:\"}o(ZA,\"urlIsHttpHttpsScheme\");function XA(y,Y){const W=y;if(!W.startsWith(\"bytes\"))return\"failure\";const j={position:5};if(Y&&i(J=>J===\"\t\"||J===\" \",W,j),W.charCodeAt(j.position)!==61)return\"failure\";j.position++,Y&&i(J=>J===\"\t\"||J===\" \",W,j);const nA=i(J=>{const _=J.charCodeAt(0);return _>=48&&_<=57},W,j),R=nA.length?Number(nA):null;if(Y&&i(J=>J===\"\t\"||J===\" \",W,j),W.charCodeAt(j.position)!==45)return\"failure\";j.position++,Y&&i(J=>J===\"\t\"||J===\" \",W,j);const O=i(J=>{const _=J.charCodeAt(0);return _>=48&&_<=57},W,j),H=O.length?Number(O):null;return j.position<W.length||H===null&&R===null||R>H?\"failure\":{rangeStartValue:R,rangeEndValue:H}}o(XA,\"simpleRangeHeaderValue\");function Ze(y,Y,W){let j=\"bytes \";return j+=SA(`${y}`),j+=\"-\",j+=SA(`${Y}`),j+=\"/\",j+=SA(`${W}`),j}o(Ze,\"buildContentRange\");const vA=class vA extends e{_transform(Y,W,j){if(!this._inflateStream){if(Y.length===0){j();return}this._inflateStream=(Y[0]&15)===8?A.createInflate():A.createInflateRaw(),this._inflateStream.on(\"data\",this.push.bind(this)),this._inflateStream.on(\"end\",()=>this.push(null)),this._inflateStream.on(\"error\",nA=>this.destroy(nA))}this._inflateStream.write(Y,W,j)}_final(Y){this._inflateStream&&(this._inflateStream.end(),this._inflateStream=null),Y()}};o(vA,\"InflateStream\");let KA=vA;function He(){return new KA}o(He,\"createInflate\");function te(y){let Y=null,W=null,j=null;const nA=re(\"content-type\",y);if(nA===null)return\"failure\";for(const R of nA){const O=C(R);O===\"failure\"||O.essence===\"*/*\"||(j=O,j.essence!==W?(Y=null,j.parameters.has(\"charset\")&&(Y=j.parameters.get(\"charset\")),W=j.essence):!j.parameters.has(\"charset\")&&Y!==null&&j.parameters.set(\"charset\",Y))}return j??\"failure\"}o(te,\"extractMimeType\");function Ve(y){const Y=y,W={position:0},j=[];let nA=\"\";for(;W.position<Y.length;){if(nA+=i(R=>R!=='\"'&&R!==\",\",Y,W),W.position<Y.length)if(Y.charCodeAt(W.position)===34){if(nA+=E(Y,W),W.position<Y.length)continue}else L(Y.charCodeAt(W.position)===44),W.position++;nA=Q(nA,!0,!0,R=>R===9||R===32),j.push(nA),nA=\"\"}return j}o(Ve,\"gettingDecodingSplitting\");function re(y,Y){const W=Y.get(y,!0);return W===null?null:Ve(W)}o(re,\"getDecodeSplit\");const ve=new TextDecoder;function Xe(y){return y.length===0?\"\":(y[0]===239&&y[1]===187&&y[2]===191&&(y=y.subarray(3)),ve.decode(y))}return o(Xe,\"utf8DecodeBytes\"),util$j={isAborted:wA,isCancelled:qA,createDeferredPromise:WA,ReadableStreamFrom:f,tryUpgradeRequestToAPotentiallyTrustworthyURL:eA,clampAndCoarsenConnectionTimingInfo:AA,coarsenedSharedCurrentTime:K,determineRequestsReferrer:$,makePolicyContainer:aA,clonePolicyContainer:X,appendFetchMetadata:v,appendRequestOriginHeader:Z,TAOCheck:T,corsCheck:m,crossOriginResourcePolicyCheck:b,createOpaqueTimingInfo:tA,setRequestReferrerPolicyOnRedirect:u,isValidHTTPToken:h,requestBadPort:G,requestCurrentURL:D,responseURL:w,responseLocationURL:U,isBlobLike:a,isURLPotentiallyTrustworthy:q,isValidReasonPhrase:d,sameOrigin:yA,normalizeMethod:pA,serializeJavascriptValueToJSONString:YA,iteratorMixin:VA,createIterator:JA,isValidHeaderName:F,isValidHeaderValue:N,isErrorLike:g,fullyReadBody:OA,bytesMatch:z,isReadableStreamLike:IA,readableStreamClose:hA,isomorphicEncode:SA,urlIsLocal:Pe,urlHasHttpsScheme:ee,urlIsHttpHttpsScheme:ZA,readAllBytes:PA,normalizeMethodRecord:HA,simpleRangeHeaderValue:XA,buildContentRange:Ze,parseMetadata:iA,createInflate:He,extractMimeType:te,getDecodeSplit:re,utf8DecodeBytes:Xe},util$j}o(requireUtil$5,\"requireUtil$5\");var symbols$3,hasRequiredSymbols$3;function requireSymbols$3(){return hasRequiredSymbols$3||(hasRequiredSymbols$3=1,symbols$3={kUrl:Symbol(\"url\"),kHeaders:Symbol(\"headers\"),kSignal:Symbol(\"signal\"),kState:Symbol(\"state\"),kGuard:Symbol(\"guard\"),kRealm:Symbol(\"realm\"),kDispatcher:Symbol(\"dispatcher\")}),symbols$3}o(requireSymbols$3,\"requireSymbols$3\");var file,hasRequiredFile;function requireFile(){if(hasRequiredFile)return file;hasRequiredFile=1;const{EOL:e}=require$$0__default$4,{Blob:A,File:t}=require$$6__default,{types:n}=require$$0__default$1,{kState:r}=requireSymbols$3(),{isBlobLike:s}=requireUtil$5(),{webidl:i}=requireWebidl(),{parseMIMEType:E,serializeAMimeType:Q}=requireDataUrl(),{kEnumerableProperty:C}=util$m,I=new TextEncoder,l=class l extends A{constructor(w,U,M={}){i.argumentLengthCheck(arguments,2,{header:\"File constructor\"}),w=i.converters[\"sequence<BlobPart>\"](w),U=i.converters.USVString(U),M=i.converters.FilePropertyBag(M);const B=U;let D=M.type,G;A:{if(D){if(D=E(D),D===\"failure\"){D=\"\";break A}D=Q(D).toLowerCase()}G=M.lastModified}super(h(w,M),{type:D}),this[r]={name:B,lastModified:G,type:D}}get name(){return i.brandCheck(this,l),this[r].name}get lastModified(){return i.brandCheck(this,l),this[r].lastModified}get type(){return i.brandCheck(this,l),this[r].type}};o(l,\"File\");let a=l;const S=class S{constructor(w,U,M={}){const B=U,D=M.type,G=M.lastModified??Date.now();this[r]={blobLike:w,name:B,type:D,lastModified:G}}stream(...w){return i.brandCheck(this,S),this[r].blobLike.stream(...w)}arrayBuffer(...w){return i.brandCheck(this,S),this[r].blobLike.arrayBuffer(...w)}slice(...w){return i.brandCheck(this,S),this[r].blobLike.slice(...w)}text(...w){return i.brandCheck(this,S),this[r].blobLike.text(...w)}get size(){return i.brandCheck(this,S),this[r].blobLike.size}get type(){return i.brandCheck(this,S),this[r].blobLike.type}get name(){return i.brandCheck(this,S),this[r].name}get lastModified(){return i.brandCheck(this,S),this[r].lastModified}get[Symbol.toStringTag](){return\"File\"}};o(S,\"FileLike\");let f=S;Object.defineProperties(a.prototype,{[Symbol.toStringTag]:{value:\"File\",configurable:!0},name:C,lastModified:C}),i.converters.Blob=i.interfaceConverter(A),i.converters.BlobPart=function(k,w){if(i.util.Type(k)===\"Object\"){if(s(k))return i.converters.Blob(k,{strict:!1});if(ArrayBuffer.isView(k)||n.isAnyArrayBuffer(k))return i.converters.BufferSource(k,w)}return i.converters.USVString(k,w)},i.converters[\"sequence<BlobPart>\"]=i.sequenceConverter(i.converters.BlobPart),i.converters.FilePropertyBag=i.dictionaryConverter([{key:\"lastModified\",converter:i.converters[\"long long\"],get defaultValue(){return Date.now()}},{key:\"type\",converter:i.converters.DOMString,defaultValue:\"\"},{key:\"endings\",converter:k=>(k=i.converters.DOMString(k),k=k.toLowerCase(),k!==\"native\"&&(k=\"transparent\"),k),defaultValue:\"transparent\"}]);function h(k,w){const U=[];for(const M of k)if(typeof M==\"string\"){let B=M;w.endings===\"native\"&&(B=L(B)),U.push(I.encode(B))}else ArrayBuffer.isView(M)||n.isArrayBuffer(M)?M.buffer?U.push(new Uint8Array(M.buffer,M.byteOffset,M.byteLength)):U.push(new Uint8Array(M)):s(M)&&U.push(M);return U}o(h,\"processBlobParts\");function L(k){return k.replace(/\\r?\\n/g,e)}o(L,\"convertLineEndingsNative\");function c(k){return t&&k instanceof t||k instanceof a||k&&(typeof k.stream==\"function\"||typeof k.arrayBuffer==\"function\")&&k[Symbol.toStringTag]===\"File\"}return o(c,\"isFileLike\"),file={File:a,FileLike:f,isFileLike:c},file}o(requireFile,\"requireFile\");var formdata,hasRequiredFormdata;function requireFormdata(){if(hasRequiredFormdata)return formdata;hasRequiredFormdata=1;const{isBlobLike:e,iteratorMixin:A}=requireUtil$5(),{kState:t}=requireSymbols$3(),{kEnumerableProperty:n}=util$m,{File:r,FileLike:s,isFileLike:i}=requireFile(),{webidl:E}=requireWebidl(),{File:Q}=require$$6__default,C=require$$0__default$1,I=Q??r,h=class h{constructor(c){if(c!==void 0)throw E.errors.conversionFailed({prefix:\"FormData constructor\",argument:\"Argument 1\",types:[\"undefined\"]});this[t]=[]}append(c,l,S=void 0){if(E.brandCheck(this,h),E.argumentLengthCheck(arguments,2,{header:\"FormData.append\"}),arguments.length===3&&!e(l))throw new TypeError(\"Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'\");c=E.converters.USVString(c),l=e(l)?E.converters.Blob(l,{strict:!1}):E.converters.USVString(l),S=arguments.length===3?E.converters.USVString(S):void 0;const k=f(c,l,S);this[t].push(k)}delete(c){E.brandCheck(this,h),E.argumentLengthCheck(arguments,1,{header:\"FormData.delete\"}),c=E.converters.USVString(c),this[t]=this[t].filter(l=>l.name!==c)}get(c){E.brandCheck(this,h),E.argumentLengthCheck(arguments,1,{header:\"FormData.get\"}),c=E.converters.USVString(c);const l=this[t].findIndex(S=>S.name===c);return l===-1?null:this[t][l].value}getAll(c){return E.brandCheck(this,h),E.argumentLengthCheck(arguments,1,{header:\"FormData.getAll\"}),c=E.converters.USVString(c),this[t].filter(l=>l.name===c).map(l=>l.value)}has(c){return E.brandCheck(this,h),E.argumentLengthCheck(arguments,1,{header:\"FormData.has\"}),c=E.converters.USVString(c),this[t].findIndex(l=>l.name===c)!==-1}set(c,l,S=void 0){if(E.brandCheck(this,h),E.argumentLengthCheck(arguments,2,{header:\"FormData.set\"}),arguments.length===3&&!e(l))throw new TypeError(\"Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'\");c=E.converters.USVString(c),l=e(l)?E.converters.Blob(l,{strict:!1}):E.converters.USVString(l),S=arguments.length===3?E.converters.USVString(S):void 0;const k=f(c,l,S),w=this[t].findIndex(U=>U.name===c);w!==-1?this[t]=[...this[t].slice(0,w),k,...this[t].slice(w+1).filter(U=>U.name!==c)]:this[t].push(k)}[C.inspect.custom](c,l){const S=this[t].reduce((w,U)=>(w[U.name]?Array.isArray(w[U.name])?w[U.name].push(U.value):w[U.name]=[w[U.name],U.value]:w[U.name]=U.value,w),{__proto__:null});l.depth??(l.depth=c),l.colors??(l.colors=!0);const k=C.formatWithOptions(l,S);return`FormData ${k.slice(k.indexOf(\"]\")+2)}`}};o(h,\"FormData\");let a=h;A(\"FormData\",a,t,\"name\",\"value\"),Object.defineProperties(a.prototype,{append:n,delete:n,get:n,getAll:n,has:n,set:n,[Symbol.toStringTag]:{value:\"FormData\",configurable:!0}});function f(L,c,l){if(typeof c!=\"string\"){if(i(c)||(c=c instanceof Blob?new I([c],\"blob\",{type:c.type}):new s(c,\"blob\",{type:c.type})),l!==void 0){const S={type:c.type,lastModified:c.lastModified};c=Q&&c instanceof Q||c instanceof r?new I([c],l,S):new s(c,l,S)}}return{name:L,value:c}}return o(f,\"makeEntry\"),formdata={FormData:a,makeEntry:f},formdata}o(requireFormdata,\"requireFormdata\");var formdataParser,hasRequiredFormdataParser;function requireFormdataParser(){if(hasRequiredFormdataParser)return formdataParser;hasRequiredFormdataParser=1;const{toUSVString:e,isUSVString:A,bufferToLowerCasedHeaderName:t}=util$m,{utf8DecodeBytes:n}=requireUtil$5(),{HTTP_TOKEN_CODEPOINTS:r,isomorphicDecode:s}=requireDataUrl(),{isFileLike:i,File:E}=requireFile(),{makeEntry:Q}=requireFormdata(),C=require$$0__default,{File:I}=require$$6__default,a=globalThis.File??I??E,f=Buffer.from('form-data; name=\"'),h=Buffer.from(\"; filename\"),L=Buffer.from(\"--\"),c=Buffer.from(`--\\r\n`);function l(g){for(let d=0;d<g.length;++d)if(g.charCodeAt(d)&-128)return!1;return!0}o(l,\"isAsciiString\");function S(g){const d=g.length;if(d<27||d>70)return!1;for(let F=0;F<d;++F){const N=g.charCodeAt(F);if(!(N>=48&&N<=57||N>=65&&N<=90||N>=97&&N<=122||N===39||N===45||N===95))return!1}return!0}o(S,\"validateBoundary\");function k(g,d=\"utf-8\",F=!1){return F?g=e(g):(C(A(g)),g=g.replace(/\\r\\n?|\\r?\\n/g,`\\r\n`)),C(Buffer.isEncoding(d)),g=g.replace(/\\n/g,\"%0A\").replace(/\\r/g,\"%0D\").replace(/\"/g,\"%22\"),Buffer.from(g,d)}o(k,\"escapeFormDataName\");function w(g,d){C(d!==\"failure\"&&d.essence===\"multipart/form-data\");const F=d.parameters.get(\"boundary\");if(F===void 0)return\"failure\";const N=Buffer.from(`--${F}`,\"utf8\"),u=[],b={position:0};for(g[0]===13&&g[1]===10&&(b.position+=2);;){if(g.subarray(b.position,b.position+N.length).equals(N))b.position+=N.length;else return\"failure\";if(b.position===g.length-2&&G(g,L,b)||b.position===g.length-4&&G(g,c,b))return u;if(g[b.position]!==13||g[b.position+1]!==10)return\"failure\";b.position+=2;const m=U(g,b);if(m===\"failure\")return\"failure\";let{name:T,filename:v,contentType:Z,encoding:P}=m;b.position+=2;let AA;{const tA=g.indexOf(N.subarray(2),b.position);if(tA===-1)return\"failure\";AA=g.subarray(b.position,tA-4),b.position+=AA.length,P===\"base64\"&&(AA=Buffer.from(AA.toString(),\"base64\"))}if(g[b.position]!==13||g[b.position+1]!==10)return\"failure\";b.position+=2;let K;v!==null?(Z??(Z=\"text/plain\"),l(Z)||(Z=\"\"),K=new a([AA],v,{type:Z})):K=n(Buffer.from(AA)),C(A(T)),C(typeof K==\"string\"&&A(K)||i(K)),u.push(Q(T,K,v))}}o(w,\"multipartFormDataParser\");function U(g,d){let F=null,N=null,u=null,b=null;for(;;){if(g[d.position]===13&&g[d.position+1]===10)return F===null?\"failure\":{name:F,filename:N,contentType:u,encoding:b};let m=B(T=>T!==10&&T!==13&&T!==58,g,d);if(m=D(m,!0,!0,T=>T===9||T===32),!r.test(m.toString())||g[d.position]!==58)return\"failure\";switch(d.position++,B(T=>T===32||T===9,g,d),t(m)){case\"content-disposition\":{if(F=N=null,!G(g,f,d)||(d.position+=17,F=M(g,d),F===null))return\"failure\";if(G(g,h,d)){let T=d.position+h.length;if(g[T]===42&&(d.position+=1,T+=1),g[T]!==61||g[T+1]!==34||(d.position+=12,N=M(g,d),N===null))return\"failure\"}break}case\"content-type\":{let T=B(v=>v!==10&&v!==13,g,d);T=D(T,!1,!0,v=>v===9||v===32),u=s(T);break}case\"content-transfer-encoding\":{let T=B(v=>v!==10&&v!==13,g,d);T=D(T,!1,!0,v=>v===9||v===32),b=s(T);break}default:B(T=>T!==10&&T!==13,g,d)}if(g[d.position]!==13&&g[d.position+1]!==10)return\"failure\";d.position+=2}}o(U,\"parseMultipartFormDataHeaders\");function M(g,d){C(g[d.position-1]===34);let F=B(N=>N!==10&&N!==13&&N!==34,g,d);return g[d.position]!==34?null:(d.position++,F=new TextDecoder().decode(F).replace(/%0A/ig,`\n`).replace(/%0D/ig,\"\\r\").replace(/%22/g,'\"'),F)}o(M,\"parseMultipartFormDataName\");function B(g,d,F){let N=F.position;for(;N<d.length&&g(d[N]);)++N;return d.subarray(F.position,F.position=N)}o(B,\"collectASequenceOfBytes\");function D(g,d,F,N){let u=0,b=g.length-1;if(d)for(;u<g.length&&N(g[u]);)u++;if(F)for(;b>0&&N(g[b]);)b--;return u===0&&b===g.length-1?g:g.subarray(u,b+1)}o(D,\"removeChars\");function G(g,d,F){if(g.length<d.length)return!1;for(let N=0;N<d.length;N++)if(d[N]!==g[F.position+N])return!1;return!0}return o(G,\"bufferStartsWith\"),formdataParser={multipartFormDataParser:w,validateBoundary:S,escapeFormDataName:k},formdataParser}o(requireFormdataParser,\"requireFormdataParser\");var body,hasRequiredBody;function requireBody(){if(hasRequiredBody)return body;hasRequiredBody=1;const e=util$m,{ReadableStreamFrom:A,isBlobLike:t,isReadableStreamLike:n,readableStreamClose:r,createDeferredPromise:s,fullyReadBody:i,extractMimeType:E,utf8DecodeBytes:Q}=requireUtil$5(),{FormData:C}=requireFormdata(),{kState:I}=requireSymbols$3(),{webidl:a}=requireWebidl(),{Blob:f}=require$$6__default,h=require$$0__default,{isErrored:L}=util$m,{isArrayBuffer:c}=require$$8__default$1,{serializeAMimeType:l}=requireDataUrl(),{multipartFormDataParser:S}=requireFormdataParser(),k=new TextEncoder;function w(u,b=!1){let m=null;u instanceof ReadableStream?m=u:t(u)?m=u.stream():m=new ReadableStream({async pull(K){const tA=typeof v==\"string\"?k.encode(v):v;tA.byteLength&&K.enqueue(tA),queueMicrotask(()=>r(K))},start(){},type:\"bytes\"}),h(n(m));let T=null,v=null,Z=null,P=null;if(typeof u==\"string\")v=u,P=\"text/plain;charset=UTF-8\";else if(u instanceof URLSearchParams)v=u.toString(),P=\"application/x-www-form-urlencoded;charset=UTF-8\";else if(c(u))v=new Uint8Array(u.slice());else if(ArrayBuffer.isView(u))v=new Uint8Array(u.buffer.slice(u.byteOffset,u.byteOffset+u.byteLength));else if(e.isFormDataLike(u)){const K=`----formdata-undici-0${`${Math.floor(Math.random()*1e11)}`.padStart(11,\"0\")}`,tA=`--${K}\\r\nContent-Disposition: form-data`;/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */const aA=o(rA=>rA.replace(/\\n/g,\"%0A\").replace(/\\r/g,\"%0D\").replace(/\"/g,\"%22\"),\"escape\"),X=o(rA=>rA.replace(/\\r?\\n|\\r/g,`\\r\n`),\"normalizeLinefeeds\"),$=[],V=new Uint8Array([13,10]);Z=0;let q=!1;for(const[rA,iA]of u)if(typeof iA==\"string\"){const gA=k.encode(tA+`; name=\"${aA(X(rA))}\"\\r\n\\r\n${X(iA)}\\r\n`);$.push(gA),Z+=gA.byteLength}else{const gA=k.encode(`${tA}; name=\"${aA(X(rA))}\"`+(iA.name?`; filename=\"${aA(iA.name)}\"`:\"\")+`\\r\nContent-Type: ${iA.type||\"application/octet-stream\"}\\r\n\\r\n`);$.push(gA,iA,V),typeof iA.size==\"number\"?Z+=gA.byteLength+iA.size+V.byteLength:q=!0}const z=k.encode(`--${K}--`);$.push(z),Z+=z.byteLength,q&&(Z=null),v=u,T=o(async function*(){for(const rA of $)rA.stream?yield*rA.stream():yield rA},\"action\"),P=`multipart/form-data; boundary=${K}`}else if(t(u))v=u,Z=u.size,u.type&&(P=u.type);else if(typeof u[Symbol.asyncIterator]==\"function\"){if(b)throw new TypeError(\"keepalive\");if(e.isDisturbed(u)||u.locked)throw new TypeError(\"Response body object should not be disturbed or locked\");m=u instanceof ReadableStream?u:A(u)}if((typeof v==\"string\"||e.isBuffer(v))&&(Z=Buffer.byteLength(v)),T!=null){let K;m=new ReadableStream({async start(){K=T(u)[Symbol.asyncIterator]()},async pull(tA){const{value:aA,done:X}=await K.next();if(X)queueMicrotask(()=>{tA.close(),tA.byobRequest?.respond(0)});else if(!L(m)){const $=new Uint8Array(aA);$.byteLength&&tA.enqueue($)}return tA.desiredSize>0},async cancel(tA){await K.return()},type:\"bytes\"})}return[{stream:m,source:v,length:Z},P]}o(w,\"extractBody\");function U(u,b=!1){return u instanceof ReadableStream&&(h(!e.isDisturbed(u),\"The body has already been consumed.\"),h(!u.locked,\"The stream is locked.\")),w(u,b)}o(U,\"safelyExtractBody\");function M(u){const[b,m]=u.stream.tee();return u.stream=b,{stream:m,length:u.length,source:u.source}}o(M,\"cloneBody\");function B(u){if(u.aborted)throw new DOMException(\"The operation was aborted.\",\"AbortError\")}o(B,\"throwIfAborted\");function D(u){return{blob(){return g(this,m=>{let T=N(this);return T===null?T=\"\":T&&(T=l(T)),new f([m],{type:T})},u)},arrayBuffer(){return g(this,m=>new Uint8Array(m).buffer,u)},text(){return g(this,Q,u)},json(){return g(this,F,u)},formData(){return g(this,m=>{const T=N(this);if(T!==null)switch(T.essence){case\"multipart/form-data\":{const v=S(m,T);if(v===\"failure\")throw new TypeError(\"Failed to parse body as FormData.\");const Z=new C;return Z[I]=v,Z}case\"application/x-www-form-urlencoded\":{const v=new URLSearchParams(m.toString()),Z=new C;for(const[P,AA]of v)Z.append(P,AA);return Z}}throw new TypeError('Content-Type was not one of \"multipart/form-data\" or \"application/x-www-form-urlencoded\".')},u)}}}o(D,\"bodyMixinMethods\");function G(u){Object.assign(u.prototype,D(u))}o(G,\"mixinBody\");async function g(u,b,m){if(a.brandCheck(u,m),B(u[I]),d(u[I].body))throw new TypeError(\"Body is unusable\");const T=s(),v=o(P=>T.reject(P),\"errorSteps\"),Z=o(P=>{try{T.resolve(b(P))}catch(AA){v(AA)}},\"successSteps\");return u[I].body==null?(Z(new Uint8Array),T.promise):(await i(u[I].body,Z,v),T.promise)}o(g,\"consumeBody\");function d(u){return u!=null&&(u.stream.locked||e.isDisturbed(u.stream))}o(d,\"bodyUnusable\");function F(u){return JSON.parse(Q(u))}o(F,\"parseJSONFromBytes\");function N(u){const b=u[I].headersList,m=E(b);return m===\"failure\"?null:m}return o(N,\"bodyMimeType\"),body={extractBody:w,safelyExtractBody:U,cloneBody:M,mixinBody:G},body}o(requireBody,\"requireBody\");const assert$a=require$$0__default,util$i=util$m,{channels:channels$1}=diagnostics,timers=timers$1,{RequestContentLengthMismatchError:RequestContentLengthMismatchError$1,ResponseContentLengthMismatchError,RequestAbortedError:RequestAbortedError$5,HeadersTimeoutError,HeadersOverflowError,SocketError:SocketError$3,InformationalError:InformationalError$2,BodyTimeoutError,HTTPParserError,ResponseExceededMaxSizeError}=errors$1,{kUrl:kUrl$4,kReset:kReset$1,kClient:kClient$3,kParser,kBlocking,kRunning:kRunning$5,kPending:kPending$4,kSize:kSize$4,kWriting,kQueue:kQueue$3,kNoRef,kKeepAliveDefaultTimeout:kKeepAliveDefaultTimeout$1,kHostHeader:kHostHeader$1,kPendingIdx:kPendingIdx$2,kRunningIdx:kRunningIdx$2,kError:kError$2,kPipelining:kPipelining$1,kSocket:kSocket$1,kKeepAliveTimeoutValue:kKeepAliveTimeoutValue$1,kMaxHeadersSize:kMaxHeadersSize$1,kKeepAliveMaxTimeout:kKeepAliveMaxTimeout$1,kKeepAliveTimeoutThreshold:kKeepAliveTimeoutThreshold$1,kHeadersTimeout:kHeadersTimeout$1,kBodyTimeout:kBodyTimeout$1,kStrictContentLength:kStrictContentLength$2,kMaxRequests:kMaxRequests$1,kCounter:kCounter$1,kMaxResponseSize:kMaxResponseSize$1,kOnError:kOnError$2,kResume:kResume$3,kHTTPContext:kHTTPContext$1}=symbols$4,constants$2=constants$4,EMPTY_BUF=Buffer.alloc(0),FastBuffer=Buffer[Symbol.species],addListener=util$i.addListener,removeAllListeners=util$i.removeAllListeners;let extractBody;async function lazyllhttp(){const e=process.env.JEST_WORKER_ID?requireLlhttpWasm():void 0;let A;try{A=await WebAssembly.compile(requireLlhttp_simdWasm())}catch{A=await WebAssembly.compile(e||requireLlhttpWasm())}return await WebAssembly.instantiate(A,{env:{wasm_on_url:(t,n,r)=>0,wasm_on_status:(t,n,r)=>{assert$a.strictEqual(currentParser.ptr,t);const s=n-currentBufferPtr+currentBufferRef.byteOffset;return currentParser.onStatus(new FastBuffer(currentBufferRef.buffer,s,r))||0},wasm_on_message_begin:t=>(assert$a.strictEqual(currentParser.ptr,t),currentParser.onMessageBegin()||0),wasm_on_header_field:(t,n,r)=>{assert$a.strictEqual(currentParser.ptr,t);const s=n-currentBufferPtr+currentBufferRef.byteOffset;return currentParser.onHeaderField(new FastBuffer(currentBufferRef.buffer,s,r))||0},wasm_on_header_value:(t,n,r)=>{assert$a.strictEqual(currentParser.ptr,t);const s=n-currentBufferPtr+currentBufferRef.byteOffset;return currentParser.onHeaderValue(new FastBuffer(currentBufferRef.buffer,s,r))||0},wasm_on_headers_complete:(t,n,r,s)=>(assert$a.strictEqual(currentParser.ptr,t),currentParser.onHeadersComplete(n,!!r,!!s)||0),wasm_on_body:(t,n,r)=>{assert$a.strictEqual(currentParser.ptr,t);const s=n-currentBufferPtr+currentBufferRef.byteOffset;return currentParser.onBody(new FastBuffer(currentBufferRef.buffer,s,r))||0},wasm_on_message_complete:t=>(assert$a.strictEqual(currentParser.ptr,t),currentParser.onMessageComplete()||0)}})}o(lazyllhttp,\"lazyllhttp\");let llhttpInstance=null,llhttpPromise=lazyllhttp();llhttpPromise.catch();let currentParser=null,currentBufferRef=null,currentBufferSize=0,currentBufferPtr=null;const TIMEOUT_HEADERS=1,TIMEOUT_BODY=2,TIMEOUT_IDLE=3,st=class st{constructor(A,t,{exports:n}){assert$a(Number.isFinite(A[kMaxHeadersSize$1])&&A[kMaxHeadersSize$1]>0),this.llhttp=n,this.ptr=this.llhttp.llhttp_alloc(constants$2.TYPE.RESPONSE),this.client=A,this.socket=t,this.timeout=null,this.timeoutValue=null,this.timeoutType=null,this.statusCode=null,this.statusText=\"\",this.upgrade=!1,this.headers=[],this.headersSize=0,this.headersMaxSize=A[kMaxHeadersSize$1],this.shouldKeepAlive=!1,this.paused=!1,this.resume=this.resume.bind(this),this.bytesRead=0,this.keepAlive=\"\",this.contentLength=\"\",this.connection=\"\",this.maxResponseSize=A[kMaxResponseSize$1]}setTimeout(A,t){this.timeoutType=t,A!==this.timeoutValue?(timers.clearTimeout(this.timeout),A?(this.timeout=timers.setTimeout(onParserTimeout,A,this),this.timeout.unref&&this.timeout.unref()):this.timeout=null,this.timeoutValue=A):this.timeout&&this.timeout.refresh&&this.timeout.refresh()}resume(){this.socket.destroyed||!this.paused||(assert$a(this.ptr!=null),assert$a(currentParser==null),this.llhttp.llhttp_resume(this.ptr),assert$a(this.timeoutType===TIMEOUT_BODY),this.timeout&&this.timeout.refresh&&this.timeout.refresh(),this.paused=!1,this.execute(this.socket.read()||EMPTY_BUF),this.readMore())}readMore(){for(;!this.paused&&this.ptr;){const A=this.socket.read();if(A===null)break;this.execute(A)}}execute(A){assert$a(this.ptr!=null),assert$a(currentParser==null),assert$a(!this.paused);const{socket:t,llhttp:n}=this;A.length>currentBufferSize&&(currentBufferPtr&&n.free(currentBufferPtr),currentBufferSize=Math.ceil(A.length/4096)*4096,currentBufferPtr=n.malloc(currentBufferSize)),new Uint8Array(n.memory.buffer,currentBufferPtr,currentBufferSize).set(A);try{let r;try{currentBufferRef=A,currentParser=this,r=n.llhttp_execute(this.ptr,currentBufferPtr,A.length)}catch(i){throw i}finally{currentParser=null,currentBufferRef=null}const s=n.llhttp_get_error_pos(this.ptr)-currentBufferPtr;if(r===constants$2.ERROR.PAUSED_UPGRADE)this.onUpgrade(A.slice(s));else if(r===constants$2.ERROR.PAUSED)this.paused=!0,t.unshift(A.slice(s));else if(r!==constants$2.ERROR.OK){const i=n.llhttp_get_error_reason(this.ptr);let E=\"\";if(i){const Q=new Uint8Array(n.memory.buffer,i).indexOf(0);E=\"Response does not match the HTTP/1.1 protocol (\"+Buffer.from(n.memory.buffer,i,Q).toString()+\")\"}throw new HTTPParserError(E,constants$2.ERROR[r],A.slice(s))}}catch(r){util$i.destroy(t,r)}}destroy(){assert$a(this.ptr!=null),assert$a(currentParser==null),this.llhttp.llhttp_free(this.ptr),this.ptr=null,timers.clearTimeout(this.timeout),this.timeout=null,this.timeoutValue=null,this.timeoutType=null,this.paused=!1}onStatus(A){this.statusText=A.toString()}onMessageBegin(){const{socket:A,client:t}=this;if(A.destroyed)return-1;const n=t[kQueue$3][t[kRunningIdx$2]];if(!n)return-1;n.onResponseStarted()}onHeaderField(A){const t=this.headers.length;t&1?this.headers[t-1]=Buffer.concat([this.headers[t-1],A]):this.headers.push(A),this.trackHeader(A.length)}onHeaderValue(A){let t=this.headers.length;(t&1)===1?(this.headers.push(A),t+=1):this.headers[t-1]=Buffer.concat([this.headers[t-1],A]);const n=this.headers[t-2];if(n.length===10){const r=util$i.bufferToLowerCasedHeaderName(n);r===\"keep-alive\"?this.keepAlive+=A.toString():r===\"connection\"&&(this.connection+=A.toString())}else n.length===14&&util$i.bufferToLowerCasedHeaderName(n)===\"content-length\"&&(this.contentLength+=A.toString());this.trackHeader(A.length)}trackHeader(A){this.headersSize+=A,this.headersSize>=this.headersMaxSize&&util$i.destroy(this.socket,new HeadersOverflowError)}onUpgrade(A){const{upgrade:t,client:n,socket:r,headers:s,statusCode:i}=this;assert$a(t);const E=n[kQueue$3][n[kRunningIdx$2]];assert$a(E),assert$a(!r.destroyed),assert$a(r===n[kSocket$1]),assert$a(!this.paused),assert$a(E.upgrade||E.method===\"CONNECT\"),this.statusCode=null,this.statusText=\"\",this.shouldKeepAlive=null,assert$a(this.headers.length%2===0),this.headers=[],this.headersSize=0,r.unshift(A),r[kParser].destroy(),r[kParser]=null,r[kClient$3]=null,r[kError$2]=null,removeAllListeners(r),n[kSocket$1]=null,n[kHTTPContext$1]=null,n[kQueue$3][n[kRunningIdx$2]++]=null,n.emit(\"disconnect\",n[kUrl$4],[n],new InformationalError$2(\"upgrade\"));try{E.onUpgrade(i,s,r)}catch(Q){util$i.destroy(r,Q)}n[kResume$3]()}onHeadersComplete(A,t,n){const{client:r,socket:s,headers:i,statusText:E}=this;if(s.destroyed)return-1;const Q=r[kQueue$3][r[kRunningIdx$2]];if(!Q)return-1;if(assert$a(!this.upgrade),assert$a(this.statusCode<200),A===100)return util$i.destroy(s,new SocketError$3(\"bad response\",util$i.getSocketInfo(s))),-1;if(t&&!Q.upgrade)return util$i.destroy(s,new SocketError$3(\"bad upgrade\",util$i.getSocketInfo(s))),-1;if(assert$a.strictEqual(this.timeoutType,TIMEOUT_HEADERS),this.statusCode=A,this.shouldKeepAlive=n||Q.method===\"HEAD\"&&!s[kReset$1]&&this.connection.toLowerCase()===\"keep-alive\",this.statusCode>=200){const I=Q.bodyTimeout!=null?Q.bodyTimeout:r[kBodyTimeout$1];this.setTimeout(I,TIMEOUT_BODY)}else this.timeout&&this.timeout.refresh&&this.timeout.refresh();if(Q.method===\"CONNECT\")return assert$a(r[kRunning$5]===1),this.upgrade=!0,2;if(t)return assert$a(r[kRunning$5]===1),this.upgrade=!0,2;if(assert$a(this.headers.length%2===0),this.headers=[],this.headersSize=0,this.shouldKeepAlive&&r[kPipelining$1]){const I=this.keepAlive?util$i.parseKeepAliveTimeout(this.keepAlive):null;if(I!=null){const a=Math.min(I-r[kKeepAliveTimeoutThreshold$1],r[kKeepAliveMaxTimeout$1]);a<=0?s[kReset$1]=!0:r[kKeepAliveTimeoutValue$1]=a}else r[kKeepAliveTimeoutValue$1]=r[kKeepAliveDefaultTimeout$1]}else s[kReset$1]=!0;const C=Q.onHeaders(A,i,this.resume,E)===!1;return Q.aborted?-1:Q.method===\"HEAD\"||A<200?1:(s[kBlocking]&&(s[kBlocking]=!1,r[kResume$3]()),C?constants$2.ERROR.PAUSED:0)}onBody(A){const{client:t,socket:n,statusCode:r,maxResponseSize:s}=this;if(n.destroyed)return-1;const i=t[kQueue$3][t[kRunningIdx$2]];if(assert$a(i),assert$a.strictEqual(this.timeoutType,TIMEOUT_BODY),this.timeout&&this.timeout.refresh&&this.timeout.refresh(),assert$a(r>=200),s>-1&&this.bytesRead+A.length>s)return util$i.destroy(n,new ResponseExceededMaxSizeError),-1;if(this.bytesRead+=A.length,i.onData(A)===!1)return constants$2.ERROR.PAUSED}onMessageComplete(){const{client:A,socket:t,statusCode:n,upgrade:r,headers:s,contentLength:i,bytesRead:E,shouldKeepAlive:Q}=this;if(t.destroyed&&(!n||Q))return-1;if(r)return;const C=A[kQueue$3][A[kRunningIdx$2]];if(assert$a(C),assert$a(n>=100),this.statusCode=null,this.statusText=\"\",this.bytesRead=0,this.contentLength=\"\",this.keepAlive=\"\",this.connection=\"\",assert$a(this.headers.length%2===0),this.headers=[],this.headersSize=0,!(n<200)){if(C.method!==\"HEAD\"&&i&&E!==parseInt(i,10))return util$i.destroy(t,new ResponseContentLengthMismatchError),-1;if(C.onComplete(s),A[kQueue$3][A[kRunningIdx$2]++]=null,t[kWriting])return assert$a.strictEqual(A[kRunning$5],0),util$i.destroy(t,new InformationalError$2(\"reset\")),constants$2.ERROR.PAUSED;if(Q){if(t[kReset$1]&&A[kRunning$5]===0)return util$i.destroy(t,new InformationalError$2(\"reset\")),constants$2.ERROR.PAUSED;A[kPipelining$1]==null||A[kPipelining$1]===1?setImmediate(()=>A[kResume$3]()):A[kResume$3]()}else return util$i.destroy(t,new InformationalError$2(\"reset\")),constants$2.ERROR.PAUSED}}};o(st,\"Parser\");let Parser=st;function onParserTimeout(e){const{socket:A,timeoutType:t,client:n}=e;t===TIMEOUT_HEADERS?(!A[kWriting]||A.writableNeedDrain||n[kRunning$5]>1)&&(assert$a(!e.paused,\"cannot be paused while waiting for headers\"),util$i.destroy(A,new HeadersTimeoutError)):t===TIMEOUT_BODY?e.paused||util$i.destroy(A,new BodyTimeoutError):t===TIMEOUT_IDLE&&(assert$a(n[kRunning$5]===0&&n[kKeepAliveTimeoutValue$1]),util$i.destroy(A,new InformationalError$2(\"socket idle timeout\")))}o(onParserTimeout,\"onParserTimeout\");async function connectH1$1(e,A){e[kSocket$1]=A,llhttpInstance||(llhttpInstance=await llhttpPromise,llhttpPromise=null),A[kNoRef]=!1,A[kWriting]=!1,A[kReset$1]=!1,A[kBlocking]=!1,A[kParser]=new Parser(e,A,llhttpInstance),addListener(A,\"error\",function(n){const r=this[kParser];if(assert$a(n.code!==\"ERR_TLS_CERT_ALTNAME_INVALID\"),n.code===\"ECONNRESET\"&&r.statusCode&&!r.shouldKeepAlive){r.onMessageComplete();return}this[kError$2]=n,this[kClient$3][kOnError$2](n)}),addListener(A,\"readable\",function(){const n=this[kParser];n&&n.readMore()}),addListener(A,\"end\",function(){const n=this[kParser];if(n.statusCode&&!n.shouldKeepAlive){n.onMessageComplete();return}util$i.destroy(this,new SocketError$3(\"other side closed\",util$i.getSocketInfo(this)))}),addListener(A,\"close\",function(){const n=this[kClient$3],r=this[kParser];r&&(!this[kError$2]&&r.statusCode&&!r.shouldKeepAlive&&r.onMessageComplete(),this[kParser].destroy(),this[kParser]=null);const s=this[kError$2]||new SocketError$3(\"closed\",util$i.getSocketInfo(this));if(n[kSocket$1]=null,n[kHTTPContext$1]=null,n.destroyed){assert$a(n[kPending$4]===0);const i=n[kQueue$3].splice(n[kRunningIdx$2]);for(let E=0;E<i.length;E++){const Q=i[E];util$i.errorRequest(n,Q,s)}}else if(n[kRunning$5]>0&&s.code!==\"UND_ERR_INFO\"){const i=n[kQueue$3][n[kRunningIdx$2]];n[kQueue$3][n[kRunningIdx$2]++]=null,util$i.errorRequest(n,i,s)}n[kPendingIdx$2]=n[kRunningIdx$2],assert$a(n[kRunning$5]===0),n.emit(\"disconnect\",n[kUrl$4],[n],s),n[kResume$3]()});let t=!1;return A.on(\"close\",()=>{t=!0}),{version:\"h1\",defaultPipelining:1,write(...n){return writeH1(e,...n)},resume(){resumeH1(e)},destroy(n,r){t?queueMicrotask(r):A.destroy(n).on(\"close\",r)},get destroyed(){return A.destroyed},busy(n){return!!(A[kWriting]||A[kReset$1]||A[kBlocking]||n&&(e[kRunning$5]>0&&!n.idempotent||e[kRunning$5]>0&&(n.upgrade||n.method===\"CONNECT\")||e[kRunning$5]>0&&util$i.bodyLength(n.body)!==0&&(util$i.isStream(n.body)||util$i.isAsyncIterable(n.body)||util$i.isFormDataLike(n.body))))}}}o(connectH1$1,\"connectH1$1\");function resumeH1(e){const A=e[kSocket$1];if(A&&!A.destroyed){if(e[kSize$4]===0?!A[kNoRef]&&A.unref&&(A.unref(),A[kNoRef]=!0):A[kNoRef]&&A.ref&&(A.ref(),A[kNoRef]=!1),e[kSize$4]===0)A[kParser].timeoutType!==TIMEOUT_IDLE&&A[kParser].setTimeout(e[kKeepAliveTimeoutValue$1],TIMEOUT_IDLE);else if(e[kRunning$5]>0&&A[kParser].statusCode<200&&A[kParser].timeoutType!==TIMEOUT_HEADERS){const t=e[kQueue$3][e[kRunningIdx$2]],n=t.headersTimeout!=null?t.headersTimeout:e[kHeadersTimeout$1];A[kParser].setTimeout(n,TIMEOUT_HEADERS)}}}o(resumeH1,\"resumeH1\");function shouldSendContentLength$1(e){return e!==\"GET\"&&e!==\"HEAD\"&&e!==\"OPTIONS\"&&e!==\"TRACE\"&&e!==\"CONNECT\"}o(shouldSendContentLength$1,\"shouldSendContentLength$1\");function writeH1(e,A){const{method:t,path:n,host:r,upgrade:s,blocking:i,reset:E}=A;let{body:Q,headers:C,contentLength:I}=A;const a=t===\"PUT\"||t===\"POST\"||t===\"PATCH\";if(util$i.isFormDataLike(Q)){extractBody||(extractBody=requireBody().extractBody);const[l,S]=extractBody(Q);A.contentType==null&&C.push(\"content-type\",S),Q=l.stream,I=l.length}else util$i.isBlobLike(Q)&&A.contentType==null&&Q.type&&C.push(\"content-type\",Q.type);Q&&typeof Q.read==\"function\"&&Q.read(0);const f=util$i.bodyLength(Q);if(I=f??I,I===null&&(I=A.contentLength),I===0&&!a&&(I=null),shouldSendContentLength$1(t)&&I>0&&A.contentLength!==null&&A.contentLength!==I){if(e[kStrictContentLength$2])return util$i.errorRequest(e,A,new RequestContentLengthMismatchError$1),!1;process.emitWarning(new RequestContentLengthMismatchError$1)}const h=e[kSocket$1],L=o(l=>{A.aborted||A.completed||(util$i.errorRequest(e,A,l||new RequestAbortedError$5),util$i.destroy(Q),util$i.destroy(h,new InformationalError$2(\"aborted\")))},\"abort\");try{A.onConnect(L)}catch(l){util$i.errorRequest(e,A,l)}if(A.aborted)return!1;t===\"HEAD\"&&(h[kReset$1]=!0),(s||t===\"CONNECT\")&&(h[kReset$1]=!0),E!=null&&(h[kReset$1]=E),e[kMaxRequests$1]&&h[kCounter$1]++>=e[kMaxRequests$1]&&(h[kReset$1]=!0),i&&(h[kBlocking]=!0);let c=`${t} ${n} HTTP/1.1\\r\n`;if(typeof r==\"string\"?c+=`host: ${r}\\r\n`:c+=e[kHostHeader$1],s?c+=`connection: upgrade\\r\nupgrade: ${s}\\r\n`:e[kPipelining$1]&&!h[kReset$1]?c+=`connection: keep-alive\\r\n`:c+=`connection: close\\r\n`,Array.isArray(C))for(let l=0;l<C.length;l+=2){const S=C[l+0],k=C[l+1];if(Array.isArray(k))for(let w=0;w<k.length;w++)c+=`${S}: ${k[w]}\\r\n`;else c+=`${S}: ${k}\\r\n`}return channels$1.sendHeaders.hasSubscribers&&channels$1.sendHeaders.publish({request:A,headers:c,socket:h}),!Q||f===0?writeBuffer({abort:L,body:null,client:e,request:A,socket:h,contentLength:I,header:c,expectsPayload:a}):util$i.isBuffer(Q)?writeBuffer({abort:L,body:Q,client:e,request:A,socket:h,contentLength:I,header:c,expectsPayload:a}):util$i.isBlobLike(Q)?typeof Q.stream==\"function\"?writeIterable$1({abort:L,body:Q.stream(),client:e,request:A,socket:h,contentLength:I,header:c,expectsPayload:a}):writeBlob$1({abort:L,body:Q,client:e,request:A,socket:h,contentLength:I,header:c,expectsPayload:a}):util$i.isStream(Q)?writeStream$1({abort:L,body:Q,client:e,request:A,socket:h,contentLength:I,header:c,expectsPayload:a}):util$i.isIterable(Q)?writeIterable$1({abort:L,body:Q,client:e,request:A,socket:h,contentLength:I,header:c,expectsPayload:a}):assert$a(!1),!0}o(writeH1,\"writeH1\");function writeStream$1({abort:e,body:A,client:t,request:n,socket:r,contentLength:s,header:i,expectsPayload:E}){assert$a(s!==0||t[kRunning$5]===0,\"stream body cannot be pipelined\");let Q=!1;const C=new AsyncWriter({abort:e,socket:r,request:n,contentLength:s,client:t,expectsPayload:E,header:i}),I=o(function(L){if(!Q)try{!C.write(L)&&this.pause&&this.pause()}catch(c){util$i.destroy(this,c)}},\"onData\"),a=o(function(){Q||A.resume&&A.resume()},\"onDrain\"),f=o(function(){if(queueMicrotask(()=>{A.removeListener(\"error\",h)}),!Q){const L=new RequestAbortedError$5;queueMicrotask(()=>h(L))}},\"onClose\"),h=o(function(L){if(!Q){if(Q=!0,assert$a(r.destroyed||r[kWriting]&&t[kRunning$5]<=1),r.off(\"drain\",a).off(\"error\",h),A.removeListener(\"data\",I).removeListener(\"end\",h).removeListener(\"close\",f),!L)try{C.end()}catch(c){L=c}C.destroy(L),L&&(L.code!==\"UND_ERR_INFO\"||L.message!==\"reset\")?util$i.destroy(A,L):util$i.destroy(A)}},\"onFinished\");A.on(\"data\",I).on(\"end\",h).on(\"error\",h).on(\"close\",f),A.resume&&A.resume(),r.on(\"drain\",a).on(\"error\",h),A.errorEmitted??A.errored?setImmediate(()=>h(A.errored)):(A.endEmitted??A.readableEnded)&&setImmediate(()=>h(null)),(A.closeEmitted??A.closed)&&setImmediate(f)}o(writeStream$1,\"writeStream$1\");async function writeBuffer({abort:e,body:A,client:t,request:n,socket:r,contentLength:s,header:i,expectsPayload:E}){try{A?util$i.isBuffer(A)&&(assert$a(s===A.byteLength,\"buffer body must have content length\"),r.cork(),r.write(`${i}content-length: ${s}\\r\n\\r\n`,\"latin1\"),r.write(A),r.uncork(),n.onBodySent(A),E||(r[kReset$1]=!0)):s===0?r.write(`${i}content-length: 0\\r\n\\r\n`,\"latin1\"):(assert$a(s===null,\"no body must not have content length\"),r.write(`${i}\\r\n`,\"latin1\")),n.onRequestSent(),t[kResume$3]()}catch(Q){e(Q)}}o(writeBuffer,\"writeBuffer\");async function writeBlob$1({abort:e,body:A,client:t,request:n,socket:r,contentLength:s,header:i,expectsPayload:E}){assert$a(s===A.size,\"blob body must have content length\");try{if(s!=null&&s!==A.size)throw new RequestContentLengthMismatchError$1;const Q=Buffer.from(await A.arrayBuffer());r.cork(),r.write(`${i}content-length: ${s}\\r\n\\r\n`,\"latin1\"),r.write(Q),r.uncork(),n.onBodySent(Q),n.onRequestSent(),E||(r[kReset$1]=!0),t[kResume$3]()}catch(Q){e(Q)}}o(writeBlob$1,\"writeBlob$1\");async function writeIterable$1({abort:e,body:A,client:t,request:n,socket:r,contentLength:s,header:i,expectsPayload:E}){assert$a(s!==0||t[kRunning$5]===0,\"iterator body cannot be pipelined\");let Q=null;function C(){if(Q){const f=Q;Q=null,f()}}o(C,\"onDrain\");const I=o(()=>new Promise((f,h)=>{assert$a(Q===null),r[kError$2]?h(r[kError$2]):Q=f}),\"waitForDrain\");r.on(\"close\",C).on(\"drain\",C);const a=new AsyncWriter({abort:e,socket:r,request:n,contentLength:s,client:t,expectsPayload:E,header:i});try{for await(const f of A){if(r[kError$2])throw r[kError$2];a.write(f)||await I()}a.end()}catch(f){a.destroy(f)}finally{r.off(\"close\",C).off(\"drain\",C)}}o(writeIterable$1,\"writeIterable$1\");const ot=class ot{constructor({abort:A,socket:t,request:n,contentLength:r,client:s,expectsPayload:i,header:E}){this.socket=t,this.request=n,this.contentLength=r,this.client=s,this.bytesWritten=0,this.expectsPayload=i,this.header=E,this.abort=A,t[kWriting]=!0}write(A){const{socket:t,request:n,contentLength:r,client:s,bytesWritten:i,expectsPayload:E,header:Q}=this;if(t[kError$2])throw t[kError$2];if(t.destroyed)return!1;const C=Buffer.byteLength(A);if(!C)return!0;if(r!==null&&i+C>r){if(s[kStrictContentLength$2])throw new RequestContentLengthMismatchError$1;process.emitWarning(new RequestContentLengthMismatchError$1)}t.cork(),i===0&&(E||(t[kReset$1]=!0),r===null?t.write(`${Q}transfer-encoding: chunked\\r\n`,\"latin1\"):t.write(`${Q}content-length: ${r}\\r\n\\r\n`,\"latin1\")),r===null&&t.write(`\\r\n${C.toString(16)}\\r\n`,\"latin1\"),this.bytesWritten+=C;const I=t.write(A);return t.uncork(),n.onBodySent(A),I||t[kParser].timeout&&t[kParser].timeoutType===TIMEOUT_HEADERS&&t[kParser].timeout.refresh&&t[kParser].timeout.refresh(),I}end(){const{socket:A,contentLength:t,client:n,bytesWritten:r,expectsPayload:s,header:i,request:E}=this;if(E.onRequestSent(),A[kWriting]=!1,A[kError$2])throw A[kError$2];if(!A.destroyed){if(r===0?s?A.write(`${i}content-length: 0\\r\n\\r\n`,\"latin1\"):A.write(`${i}\\r\n`,\"latin1\"):t===null&&A.write(`\\r\n0\\r\n\\r\n`,\"latin1\"),t!==null&&r!==t){if(n[kStrictContentLength$2])throw new RequestContentLengthMismatchError$1;process.emitWarning(new RequestContentLengthMismatchError$1)}A[kParser].timeout&&A[kParser].timeoutType===TIMEOUT_HEADERS&&A[kParser].timeout.refresh&&A[kParser].timeout.refresh(),n[kResume$3]()}}destroy(A){const{socket:t,client:n,abort:r}=this;t[kWriting]=!1,A&&(assert$a(n[kRunning$5]<=1,\"pipeline should only contain this request\"),r(A))}};o(ot,\"AsyncWriter\");let AsyncWriter=ot;var clientH1=connectH1$1;const assert$9=require$$0__default,{pipeline:pipeline$1}=Stream__default,util$h=util$m,{RequestContentLengthMismatchError,RequestAbortedError:RequestAbortedError$4,SocketError:SocketError$2,InformationalError:InformationalError$1}=errors$1,{kUrl:kUrl$3,kReset,kClient:kClient$2,kRunning:kRunning$4,kPending:kPending$3,kQueue:kQueue$2,kPendingIdx:kPendingIdx$1,kRunningIdx:kRunningIdx$1,kError:kError$1,kSocket,kStrictContentLength:kStrictContentLength$1,kOnError:kOnError$1,kMaxConcurrentStreams:kMaxConcurrentStreams$1,kHTTP2Session,kResume:kResume$2}=symbols$4,kOpenStreams=Symbol(\"open streams\");let h2ExperimentalWarned=!1,http2;try{http2=__webpack_require__(/*! node:http2 */ \"node:http2\")}catch{http2={constants:{}}}const{constants:{HTTP2_HEADER_AUTHORITY,HTTP2_HEADER_METHOD,HTTP2_HEADER_PATH,HTTP2_HEADER_SCHEME,HTTP2_HEADER_CONTENT_LENGTH,HTTP2_HEADER_EXPECT,HTTP2_HEADER_STATUS}}=http2;function parseH2Headers(e){const A=[];for(const[t,n]of Object.entries(e))if(Array.isArray(n))for(const r of n)A.push(Buffer.from(t),Buffer.from(r));else A.push(Buffer.from(t),Buffer.from(n));return A}o(parseH2Headers,\"parseH2Headers\");async function connectH2$1(e,A){e[kSocket]=A,h2ExperimentalWarned||(h2ExperimentalWarned=!0,process.emitWarning(\"H2 support is experimental, expect them to change at any time.\",{code:\"UNDICI-H2\"}));const t=http2.connect(e[kUrl$3],{createConnection:()=>A,peerMaxConcurrentStreams:e[kMaxConcurrentStreams$1]});t[kOpenStreams]=0,t[kClient$2]=e,t[kSocket]=A,util$h.addListener(t,\"error\",onHttp2SessionError),util$h.addListener(t,\"frameError\",onHttp2FrameError),util$h.addListener(t,\"end\",onHttp2SessionEnd),util$h.addListener(t,\"goaway\",onHTTP2GoAway),util$h.addListener(t,\"close\",function(){const{[kClient$2]:r}=this,s=this[kSocket][kError$1]||new SocketError$2(\"closed\",util$h.getSocketInfo(this));r[kSocket]=null,r[kHTTP2Session]=null,assert$9(r[kPending$3]===0);const i=r[kQueue$2].splice(r[kRunningIdx$1]);for(let E=0;E<i.length;E++){const Q=i[E];util$h.errorRequest(r,Q,s)}r[kPendingIdx$1]=r[kRunningIdx$1],assert$9(r[kRunning$4]===0),r.emit(\"disconnect\",r[kUrl$3],[r],s),r[kResume$2]()}),t.unref(),e[kHTTP2Session]=t,A[kHTTP2Session]=t,util$h.addListener(A,\"error\",function(r){assert$9(r.code!==\"ERR_TLS_CERT_ALTNAME_INVALID\"),this[kError$1]=r,this[kClient$2][kOnError$1](r)}),util$h.addListener(A,\"end\",function(){util$h.destroy(this,new SocketError$2(\"other side closed\",util$h.getSocketInfo(this)))});let n=!1;return A.on(\"close\",()=>{n=!0}),{version:\"h2\",defaultPipelining:1/0,write(...r){writeH2(e,...r)},resume(){},destroy(r,s){t.destroy(r),n?queueMicrotask(s):A.destroy(r).on(\"close\",s)},get destroyed(){return A.destroyed},busy(){return!1}}}o(connectH2$1,\"connectH2$1\");function onHttp2SessionError(e){assert$9(e.code!==\"ERR_TLS_CERT_ALTNAME_INVALID\"),this[kSocket][kError$1]=e,this[kClient$2][kOnError$1](e)}o(onHttp2SessionError,\"onHttp2SessionError\");function onHttp2FrameError(e,A,t){if(t===0){const n=new InformationalError$1(`HTTP/2: \"frameError\" received - type ${e}, code ${A}`);this[kSocket][kError$1]=n,this[kClient$2][kOnError$1](n)}}o(onHttp2FrameError,\"onHttp2FrameError\");function onHttp2SessionEnd(){const e=new SocketError$2(\"other side closed\",util$h.getSocketInfo(this[kSocket]));this.destroy(e),util$h.destroy(this[kSocket],e)}o(onHttp2SessionEnd,\"onHttp2SessionEnd\");function onHTTP2GoAway(e){const A=new InformationalError$1(`HTTP/2: \"GOAWAY\" frame received with code ${e}`);this[kSocket][kError$1]=A,this[kClient$2][kOnError$1](A),this.unref(),this.destroy(),util$h.destroy(this[kSocket],A)}o(onHTTP2GoAway,\"onHTTP2GoAway\");function shouldSendContentLength(e){return e!==\"GET\"&&e!==\"HEAD\"&&e!==\"OPTIONS\"&&e!==\"TRACE\"&&e!==\"CONNECT\"}o(shouldSendContentLength,\"shouldSendContentLength\");function writeH2(e,A){const t=e[kHTTP2Session],{body:n,method:r,path:s,host:i,upgrade:E,expectContinue:Q,signal:C,headers:I}=A;if(E)return util$h.errorRequest(e,A,new Error(\"Upgrade not supported for H2\")),!1;if(A.aborted)return!1;const a={};for(let w=0;w<I.length;w+=2){const U=I[w+0],M=I[w+1];if(Array.isArray(M))for(let B=0;B<M.length;B++)a[U]?a[U]+=`,${M[B]}`:a[U]=M[B];else a[U]=M}let f;const{hostname:h,port:L}=e[kUrl$3];a[HTTP2_HEADER_AUTHORITY]=i||`${h}${L?`:${L}`:\"\"}`,a[HTTP2_HEADER_METHOD]=r;try{A.onConnect(w=>{A.aborted||A.completed||(w=w||new RequestAbortedError$4,f!=null&&(util$h.destroy(f,w),t[kOpenStreams]-=1,t[kOpenStreams]===0&&t.unref()),util$h.errorRequest(e,A,w))})}catch(w){util$h.errorRequest(e,A,w)}if(r===\"CONNECT\")return t.ref(),f=t.request(a,{endStream:!1,signal:C}),f.id&&!f.pending?(A.onUpgrade(null,null,f),++t[kOpenStreams]):f.once(\"ready\",()=>{A.onUpgrade(null,null,f),++t[kOpenStreams]}),f.once(\"close\",()=>{t[kOpenStreams]-=1,t[kOpenStreams]===0&&t.unref()}),!0;a[HTTP2_HEADER_PATH]=s,a[HTTP2_HEADER_SCHEME]=\"https\";const c=r===\"PUT\"||r===\"POST\"||r===\"PATCH\";n&&typeof n.read==\"function\"&&n.read(0);let l=util$h.bodyLength(n);if(l==null&&(l=A.contentLength),(l===0||!c)&&(l=null),shouldSendContentLength(r)&&l>0&&A.contentLength!=null&&A.contentLength!==l){if(e[kStrictContentLength$1])return util$h.errorRequest(e,A,new RequestContentLengthMismatchError),!1;process.emitWarning(new RequestContentLengthMismatchError)}l!=null&&(assert$9(n,\"no body must not have content length\"),a[HTTP2_HEADER_CONTENT_LENGTH]=`${l}`),t.ref();const S=r===\"GET\"||r===\"HEAD\"||n===null;return Q?(a[HTTP2_HEADER_EXPECT]=\"100-continue\",f=t.request(a,{endStream:S,signal:C}),f.once(\"continue\",k)):(f=t.request(a,{endStream:S,signal:C}),k()),++t[kOpenStreams],f.once(\"response\",w=>{const{[HTTP2_HEADER_STATUS]:U,...M}=w;if(A.onResponseStarted(),A.aborted||A.completed){const B=new RequestAbortedError$4;util$h.errorRequest(e,A,B),util$h.destroy(f,B);return}A.onHeaders(Number(U),parseH2Headers(M),f.resume.bind(f),\"\")===!1&&f.pause(),f.on(\"data\",B=>{A.onData(B)===!1&&f.pause()})}),f.once(\"end\",()=>{if(f.state?.state==null||f.state.state<6){A.onComplete([]);return}t[kOpenStreams]-=1,t[kOpenStreams]===0&&t.unref();const w=new InformationalError$1(\"HTTP/2: stream half-closed (remote)\");util$h.errorRequest(e,A,w),util$h.destroy(f,w)}),f.once(\"close\",()=>{t[kOpenStreams]-=1,t[kOpenStreams]===0&&t.unref()}),f.once(\"error\",function(w){e[kHTTP2Session]&&!e[kHTTP2Session].destroyed&&!this.closed&&!this.destroyed&&(t[kOpenStreams]-=1,util$h.errorRequest(e,A,w),util$h.destroy(f,w))}),f.once(\"frameError\",(w,U)=>{const M=new InformationalError$1(`HTTP/2: \"frameError\" received - type ${w}, code ${U}`);util$h.errorRequest(e,A,M),e[kHTTP2Session]&&!e[kHTTP2Session].destroyed&&!this.closed&&!this.destroyed&&(t[kOpenStreams]-=1,util$h.destroy(f,M))}),!0;function k(){n?util$h.isBuffer(n)?(assert$9(l===n.byteLength,\"buffer body must have content length\"),f.cork(),f.write(n),f.uncork(),f.end(),A.onBodySent(n),A.onRequestSent()):util$h.isBlobLike(n)?typeof n.stream==\"function\"?writeIterable({client:e,request:A,contentLength:l,h2stream:f,expectsPayload:c,body:n.stream(),socket:e[kSocket],header:\"\"}):writeBlob({body:n,client:e,request:A,contentLength:l,expectsPayload:c,h2stream:f,header:\"\",socket:e[kSocket]}):util$h.isStream(n)?writeStream({body:n,client:e,request:A,contentLength:l,expectsPayload:c,socket:e[kSocket],h2stream:f,header:\"\"}):util$h.isIterable(n)?writeIterable({body:n,client:e,request:A,contentLength:l,expectsPayload:c,header:\"\",h2stream:f,socket:e[kSocket]}):assert$9(!1):A.onRequestSent()}o(k,\"writeBodyH2\")}o(writeH2,\"writeH2\");function writeStream({h2stream:e,body:A,client:t,request:n,socket:r,contentLength:s,header:i,expectsPayload:E}){assert$9(s!==0||t[kRunning$4]===0,\"stream body cannot be pipelined\");const Q=pipeline$1(A,e,I=>{I?(util$h.destroy(A,I),util$h.destroy(e,I)):n.onRequestSent()});Q.on(\"data\",C),Q.once(\"end\",()=>{Q.removeListener(\"data\",C),util$h.destroy(Q)});function C(I){n.onBodySent(I)}o(C,\"onPipeData\")}o(writeStream,\"writeStream\");async function writeBlob({h2stream:e,body:A,client:t,request:n,socket:r,contentLength:s,header:i,expectsPayload:E}){assert$9(s===A.size,\"blob body must have content length\");try{if(s!=null&&s!==A.size)throw new RequestContentLengthMismatchError;const Q=Buffer.from(await A.arrayBuffer());e.cork(),e.write(Q),e.uncork(),n.onBodySent(Q),n.onRequestSent(),E||(r[kReset]=!0),t[kResume$2]()}catch{util$h.destroy(e)}}o(writeBlob,\"writeBlob\");async function writeIterable({h2stream:e,body:A,client:t,request:n,socket:r,contentLength:s,header:i,expectsPayload:E}){assert$9(s!==0||t[kRunning$4]===0,\"iterator body cannot be pipelined\");let Q=null;function C(){if(Q){const a=Q;Q=null,a()}}o(C,\"onDrain\");const I=o(()=>new Promise((a,f)=>{assert$9(Q===null),r[kError$1]?f(r[kError$1]):Q=a}),\"waitForDrain\");e.on(\"close\",C).on(\"drain\",C);try{for await(const a of A){if(r[kError$1])throw r[kError$1];const f=e.write(a);n.onBodySent(a),f||await I()}}catch(a){e.destroy(a)}finally{n.onRequestSent(),e.end(),e.off(\"close\",C).off(\"drain\",C)}}o(writeIterable,\"writeIterable\");var clientH2=connectH2$1;const util$g=util$m,{kBodyUsed}=symbols$4,assert$8=require$$0__default,{InvalidArgumentError:InvalidArgumentError$f}=errors$1,EE=require$$0__default$3,redirectableStatusCodes=[300,301,302,303,307,308],kBody$1=Symbol(\"body\"),it=class it{constructor(A){this[kBody$1]=A,this[kBodyUsed]=!1}async*[Symbol.asyncIterator](){assert$8(!this[kBodyUsed],\"disturbed\"),this[kBodyUsed]=!0,yield*this[kBody$1]}};o(it,\"BodyAsyncIterable\");let BodyAsyncIterable=it,RedirectHandler$1=(Ue=class{constructor(A,t,n,r){if(t!=null&&(!Number.isInteger(t)||t<0))throw new InvalidArgumentError$f(\"maxRedirections must be a positive number\");util$g.validateHandler(r,n.method,n.upgrade),this.dispatch=A,this.location=null,this.abort=null,this.opts={...n,maxRedirections:0},this.maxRedirections=t,this.handler=r,this.history=[],this.redirectionLimitReached=!1,util$g.isStream(this.opts.body)?(util$g.bodyLength(this.opts.body)===0&&this.opts.body.on(\"data\",function(){assert$8(!1)}),typeof this.opts.body.readableDidRead!=\"boolean\"&&(this.opts.body[kBodyUsed]=!1,EE.prototype.on.call(this.opts.body,\"data\",function(){this[kBodyUsed]=!0}))):this.opts.body&&typeof this.opts.body.pipeTo==\"function\"?this.opts.body=new BodyAsyncIterable(this.opts.body):this.opts.body&&typeof this.opts.body!=\"string\"&&!ArrayBuffer.isView(this.opts.body)&&util$g.isIterable(this.opts.body)&&(this.opts.body=new BodyAsyncIterable(this.opts.body))}onConnect(A){this.abort=A,this.handler.onConnect(A,{history:this.history})}onUpgrade(A,t,n){this.handler.onUpgrade(A,t,n)}onError(A){this.handler.onError(A)}onHeaders(A,t,n,r){if(this.location=this.history.length>=this.maxRedirections||util$g.isDisturbed(this.opts.body)?null:parseLocation(A,t),this.opts.throwOnMaxRedirect&&this.history.length>=this.maxRedirections){this.request&&this.request.abort(new Error(\"max redirects\")),this.redirectionLimitReached=!0,this.abort(new Error(\"max redirects\"));return}if(this.opts.origin&&this.history.push(new URL(this.opts.path,this.opts.origin)),!this.location)return this.handler.onHeaders(A,t,n,r);const{origin:s,pathname:i,search:E}=util$g.parseURL(new URL(this.location,this.opts.origin&&new URL(this.opts.path,this.opts.origin))),Q=E?`${i}${E}`:i;this.opts.headers=cleanRequestHeaders(this.opts.headers,A===303,this.opts.origin!==s),this.opts.path=Q,this.opts.origin=s,this.opts.maxRedirections=0,this.opts.query=null,A===303&&this.opts.method!==\"HEAD\"&&(this.opts.method=\"GET\",this.opts.body=null)}onData(A){if(!this.location)return this.handler.onData(A)}onComplete(A){this.location?(this.location=null,this.abort=null,this.dispatch(this.opts,this)):this.handler.onComplete(A)}onBodySent(A){this.handler.onBodySent&&this.handler.onBodySent(A)}},o(Ue,\"RedirectHandler\"),Ue);function parseLocation(e,A){if(redirectableStatusCodes.indexOf(e)===-1)return null;for(let t=0;t<A.length;t+=2)if(A[t].length===8&&util$g.headerNameToString(A[t])===\"location\")return A[t+1]}o(parseLocation,\"parseLocation\");function shouldRemoveHeader(e,A,t){if(e.length===4)return util$g.headerNameToString(e)===\"host\";if(A&&util$g.headerNameToString(e).startsWith(\"content-\"))return!0;if(t&&(e.length===13||e.length===6||e.length===19)){const n=util$g.headerNameToString(e);return n===\"authorization\"||n===\"cookie\"||n===\"proxy-authorization\"}return!1}o(shouldRemoveHeader,\"shouldRemoveHeader\");function cleanRequestHeaders(e,A,t){const n=[];if(Array.isArray(e))for(let r=0;r<e.length;r+=2)shouldRemoveHeader(e[r],A,t)||n.push(e[r],e[r+1]);else if(e&&typeof e==\"object\")for(const r of Object.keys(e))shouldRemoveHeader(r,A,t)||n.push(r,e[r]);else assert$8(e==null,\"headers must be an object or an array\");return n}o(cleanRequestHeaders,\"cleanRequestHeaders\");var redirectHandler=RedirectHandler$1;const RedirectHandler=redirectHandler;function createRedirectInterceptor$2({maxRedirections:e}){return A=>o(function(n,r){const{maxRedirections:s=e}=n;if(!s)return A(n,r);const i=new RedirectHandler(A,s,n,r);return n={...n,maxRedirections:0},A(n,i)},\"Intercept\")}o(createRedirectInterceptor$2,\"createRedirectInterceptor$2\");var redirectInterceptor=createRedirectInterceptor$2;const assert$7=require$$0__default,net=require$$4__default,http=http__default,util$f=util$m,{channels}=diagnostics,Request=request$2,DispatcherBase$3=dispatcherBase,{InvalidArgumentError:InvalidArgumentError$e,InformationalError,ClientDestroyedError}=errors$1,buildConnector$2=connect$2,{kUrl:kUrl$2,kServerName,kClient:kClient$1,kBusy:kBusy$1,kConnect,kResuming,kRunning:kRunning$3,kPending:kPending$2,kSize:kSize$3,kQueue:kQueue$1,kConnected:kConnected$4,kConnecting,kNeedDrain:kNeedDrain$2,kKeepAliveDefaultTimeout,kHostHeader,kPendingIdx,kRunningIdx,kError,kPipelining,kKeepAliveTimeoutValue,kMaxHeadersSize,kKeepAliveMaxTimeout,kKeepAliveTimeoutThreshold,kHeadersTimeout,kBodyTimeout,kStrictContentLength,kConnector,kMaxRedirections:kMaxRedirections$1,kMaxRequests,kCounter,kClose:kClose$5,kDestroy:kDestroy$3,kDispatch:kDispatch$2,kInterceptors:kInterceptors$3,kLocalAddress,kMaxResponseSize,kOnError,kHTTPContext,kMaxConcurrentStreams,kResume:kResume$1}=symbols$4,connectH1=clientH1,connectH2=clientH2;let deprecatedInterceptorWarned=!1;const kClosedResolve$1=Symbol(\"kClosedResolve\");function getPipelining(e){return e[kPipelining]??e[kHTTPContext]?.defaultPipelining??1}o(getPipelining,\"getPipelining\");let Client$3=(be=class extends DispatcherBase$3{constructor(A,{interceptors:t,maxHeaderSize:n,headersTimeout:r,socketTimeout:s,requestTimeout:i,connectTimeout:E,bodyTimeout:Q,idleTimeout:C,keepAlive:I,keepAliveTimeout:a,maxKeepAliveTimeout:f,keepAliveMaxTimeout:h,keepAliveTimeoutThreshold:L,socketPath:c,pipelining:l,tls:S,strictContentLength:k,maxCachedSessions:w,maxRedirections:U,connect:M,maxRequestsPerClient:B,localAddress:D,maxResponseSize:G,autoSelectFamily:g,autoSelectFamilyAttemptTimeout:d,maxConcurrentStreams:F,allowH2:N}={}){if(super(),I!==void 0)throw new InvalidArgumentError$e(\"unsupported keepAlive, use pipelining=0 instead\");if(s!==void 0)throw new InvalidArgumentError$e(\"unsupported socketTimeout, use headersTimeout & bodyTimeout instead\");if(i!==void 0)throw new InvalidArgumentError$e(\"unsupported requestTimeout, use headersTimeout & bodyTimeout instead\");if(C!==void 0)throw new InvalidArgumentError$e(\"unsupported idleTimeout, use keepAliveTimeout instead\");if(f!==void 0)throw new InvalidArgumentError$e(\"unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead\");if(n!=null&&!Number.isFinite(n))throw new InvalidArgumentError$e(\"invalid maxHeaderSize\");if(c!=null&&typeof c!=\"string\")throw new InvalidArgumentError$e(\"invalid socketPath\");if(E!=null&&(!Number.isFinite(E)||E<0))throw new InvalidArgumentError$e(\"invalid connectTimeout\");if(a!=null&&(!Number.isFinite(a)||a<=0))throw new InvalidArgumentError$e(\"invalid keepAliveTimeout\");if(h!=null&&(!Number.isFinite(h)||h<=0))throw new InvalidArgumentError$e(\"invalid keepAliveMaxTimeout\");if(L!=null&&!Number.isFinite(L))throw new InvalidArgumentError$e(\"invalid keepAliveTimeoutThreshold\");if(r!=null&&(!Number.isInteger(r)||r<0))throw new InvalidArgumentError$e(\"headersTimeout must be a positive integer or zero\");if(Q!=null&&(!Number.isInteger(Q)||Q<0))throw new InvalidArgumentError$e(\"bodyTimeout must be a positive integer or zero\");if(M!=null&&typeof M!=\"function\"&&typeof M!=\"object\")throw new InvalidArgumentError$e(\"connect must be a function or an object\");if(U!=null&&(!Number.isInteger(U)||U<0))throw new InvalidArgumentError$e(\"maxRedirections must be a positive number\");if(B!=null&&(!Number.isInteger(B)||B<0))throw new InvalidArgumentError$e(\"maxRequestsPerClient must be a positive number\");if(D!=null&&(typeof D!=\"string\"||net.isIP(D)===0))throw new InvalidArgumentError$e(\"localAddress must be valid string IP address\");if(G!=null&&(!Number.isInteger(G)||G<-1))throw new InvalidArgumentError$e(\"maxResponseSize must be a positive number\");if(d!=null&&(!Number.isInteger(d)||d<-1))throw new InvalidArgumentError$e(\"autoSelectFamilyAttemptTimeout must be a positive number\");if(N!=null&&typeof N!=\"boolean\")throw new InvalidArgumentError$e(\"allowH2 must be a valid boolean value\");if(F!=null&&(typeof F!=\"number\"||F<1))throw new InvalidArgumentError$e(\"maxConcurrentStreams must be a positive integer, greater than 0\");typeof M!=\"function\"&&(M=buildConnector$2({...S,maxCachedSessions:w,allowH2:N,socketPath:c,timeout:E,...util$f.nodeHasAutoSelectFamily&&g?{autoSelectFamily:g,autoSelectFamilyAttemptTimeout:d}:void 0,...M})),t?.Client&&Array.isArray(t.Client)?(this[kInterceptors$3]=t.Client,deprecatedInterceptorWarned||(deprecatedInterceptorWarned=!0,process.emitWarning(\"Client.Options#interceptor is deprecated. Use Dispatcher#compose instead.\",{code:\"UNDICI-CLIENT-INTERCEPTOR-DEPRECATED\"}))):this[kInterceptors$3]=[createRedirectInterceptor$1({maxRedirections:U})],this[kUrl$2]=util$f.parseOrigin(A),this[kConnector]=M,this[kPipelining]=l??1,this[kMaxHeadersSize]=n||http.maxHeaderSize,this[kKeepAliveDefaultTimeout]=a??4e3,this[kKeepAliveMaxTimeout]=h??6e5,this[kKeepAliveTimeoutThreshold]=L??1e3,this[kKeepAliveTimeoutValue]=this[kKeepAliveDefaultTimeout],this[kServerName]=null,this[kLocalAddress]=D??null,this[kResuming]=0,this[kNeedDrain$2]=0,this[kHostHeader]=`host: ${this[kUrl$2].hostname}${this[kUrl$2].port?`:${this[kUrl$2].port}`:\"\"}\\r\n`,this[kBodyTimeout]=Q??3e5,this[kHeadersTimeout]=r??3e5,this[kStrictContentLength]=k??!0,this[kMaxRedirections$1]=U,this[kMaxRequests]=B,this[kClosedResolve$1]=null,this[kMaxResponseSize]=G>-1?G:-1,this[kMaxConcurrentStreams]=F??100,this[kHTTPContext]=null,this[kQueue$1]=[],this[kRunningIdx]=0,this[kPendingIdx]=0,this[kResume$1]=u=>resume(this,u),this[kOnError]=u=>onError(this,u)}get pipelining(){return this[kPipelining]}set pipelining(A){this[kPipelining]=A,this[kResume$1](!0)}get[kPending$2](){return this[kQueue$1].length-this[kPendingIdx]}get[kRunning$3](){return this[kPendingIdx]-this[kRunningIdx]}get[kSize$3](){return this[kQueue$1].length-this[kRunningIdx]}get[kConnected$4](){return!!this[kHTTPContext]&&!this[kConnecting]&&!this[kHTTPContext].destroyed}get[kBusy$1](){return!!(this[kHTTPContext]?.busy(null)||this[kSize$3]>=(getPipelining(this)||1)||this[kPending$2]>0)}[kConnect](A){connect$1(this),this.once(\"connect\",A)}[kDispatch$2](A,t){const n=A.origin||this[kUrl$2].origin,r=new Request(n,A,t);return this[kQueue$1].push(r),this[kResuming]||(util$f.bodyLength(r.body)==null&&util$f.isIterable(r.body)?(this[kResuming]=1,queueMicrotask(()=>resume(this))):this[kResume$1](!0)),this[kResuming]&&this[kNeedDrain$2]!==2&&this[kBusy$1]&&(this[kNeedDrain$2]=2),this[kNeedDrain$2]<2}async[kClose$5](){return new Promise(A=>{this[kSize$3]?this[kClosedResolve$1]=A:A(null)})}async[kDestroy$3](A){return new Promise(t=>{const n=this[kQueue$1].splice(this[kPendingIdx]);for(let s=0;s<n.length;s++){const i=n[s];util$f.errorRequest(this,i,A)}const r=o(()=>{this[kClosedResolve$1]&&(this[kClosedResolve$1](),this[kClosedResolve$1]=null),t(null)},\"callback\");this[kHTTPContext]?(this[kHTTPContext].destroy(A,r),this[kHTTPContext]=null):queueMicrotask(r),this[kResume$1]()})}},o(be,\"Client\"),be);const createRedirectInterceptor$1=redirectInterceptor;function onError(e,A){if(e[kRunning$3]===0&&A.code!==\"UND_ERR_INFO\"&&A.code!==\"UND_ERR_SOCKET\"){assert$7(e[kPendingIdx]===e[kRunningIdx]);const t=e[kQueue$1].splice(e[kRunningIdx]);for(let n=0;n<t.length;n++){const r=t[n];util$f.errorRequest(e,r,A)}assert$7(e[kSize$3]===0)}}o(onError,\"onError\");async function connect$1(e){assert$7(!e[kConnecting]),assert$7(!e[kHTTPContext]);let{host:A,hostname:t,protocol:n,port:r}=e[kUrl$2];if(t[0]===\"[\"){const s=t.indexOf(\"]\");assert$7(s!==-1);const i=t.substring(1,s);assert$7(net.isIP(i)),t=i}e[kConnecting]=!0,channels.beforeConnect.hasSubscribers&&channels.beforeConnect.publish({connectParams:{host:A,hostname:t,protocol:n,port:r,version:e[kHTTPContext]?.version,servername:e[kServerName],localAddress:e[kLocalAddress]},connector:e[kConnector]});try{const s=await new Promise((i,E)=>{e[kConnector]({host:A,hostname:t,protocol:n,port:r,servername:e[kServerName],localAddress:e[kLocalAddress]},(Q,C)=>{Q?E(Q):i(C)})});if(e.destroyed){util$f.destroy(s.on(\"error\",()=>{}),new ClientDestroyedError);return}assert$7(s);try{e[kHTTPContext]=s.alpnProtocol===\"h2\"?await connectH2(e,s):await connectH1(e,s)}catch(i){throw s.destroy().on(\"error\",()=>{}),i}e[kConnecting]=!1,s[kCounter]=0,s[kMaxRequests]=e[kMaxRequests],s[kClient$1]=e,s[kError]=null,channels.connected.hasSubscribers&&channels.connected.publish({connectParams:{host:A,hostname:t,protocol:n,port:r,version:e[kHTTPContext]?.version,servername:e[kServerName],localAddress:e[kLocalAddress]},connector:e[kConnector],socket:s}),e.emit(\"connect\",e[kUrl$2],[e])}catch(s){if(e.destroyed)return;if(e[kConnecting]=!1,channels.connectError.hasSubscribers&&channels.connectError.publish({connectParams:{host:A,hostname:t,protocol:n,port:r,version:e[kHTTPContext]?.version,servername:e[kServerName],localAddress:e[kLocalAddress]},connector:e[kConnector],error:s}),s.code===\"ERR_TLS_CERT_ALTNAME_INVALID\")for(assert$7(e[kRunning$3]===0);e[kPending$2]>0&&e[kQueue$1][e[kPendingIdx]].servername===e[kServerName];){const i=e[kQueue$1][e[kPendingIdx]++];util$f.errorRequest(e,i,s)}else onError(e,s);e.emit(\"connectionError\",e[kUrl$2],[e],s)}e[kResume$1]()}o(connect$1,\"connect$1\");function emitDrain(e){e[kNeedDrain$2]=0,e.emit(\"drain\",e[kUrl$2],[e])}o(emitDrain,\"emitDrain\");function resume(e,A){e[kResuming]!==2&&(e[kResuming]=2,_resume(e,A),e[kResuming]=0,e[kRunningIdx]>256&&(e[kQueue$1].splice(0,e[kRunningIdx]),e[kPendingIdx]-=e[kRunningIdx],e[kRunningIdx]=0))}o(resume,\"resume\");function _resume(e,A){for(;;){if(e.destroyed){assert$7(e[kPending$2]===0);return}if(e[kClosedResolve$1]&&!e[kSize$3]){e[kClosedResolve$1](),e[kClosedResolve$1]=null;return}if(e[kHTTPContext]&&e[kHTTPContext].resume(),e[kBusy$1])e[kNeedDrain$2]=2;else if(e[kNeedDrain$2]===2){A?(e[kNeedDrain$2]=1,queueMicrotask(()=>emitDrain(e))):emitDrain(e);continue}if(e[kPending$2]===0||e[kRunning$3]>=(getPipelining(e)||1))return;const t=e[kQueue$1][e[kPendingIdx]];if(e[kUrl$2].protocol===\"https:\"&&e[kServerName]!==t.servername){if(e[kRunning$3]>0)return;e[kServerName]=t.servername,e[kHTTPContext]?.destroy(new InformationalError(\"servername changed\"),()=>{e[kHTTPContext]=null,resume(e)})}if(e[kConnecting])return;if(!e[kHTTPContext]){connect$1(e);return}if(e[kHTTPContext].destroyed||e[kHTTPContext].busy(t))return;!t.aborted&&e[kHTTPContext].write(t)?e[kPendingIdx]++:e[kQueue$1].splice(e[kPendingIdx],1)}}o(_resume,\"_resume\");var client=Client$3;const kSize$2=2048,kMask=kSize$2-1,Qt=class Qt{constructor(){this.bottom=0,this.top=0,this.list=new Array(kSize$2),this.next=null}isEmpty(){return this.top===this.bottom}isFull(){return(this.top+1&kMask)===this.bottom}push(A){this.list[this.top]=A,this.top=this.top+1&kMask}shift(){const A=this.list[this.bottom];return A===void 0?null:(this.list[this.bottom]=void 0,this.bottom=this.bottom+1&kMask,A)}};o(Qt,\"FixedCircularBuffer\");let FixedCircularBuffer=Qt;var fixedQueue=(me=class{constructor(){this.head=this.tail=new FixedCircularBuffer}isEmpty(){return this.head.isEmpty()}push(A){this.head.isFull()&&(this.head=this.head.next=new FixedCircularBuffer),this.head.push(A)}shift(){const A=this.tail,t=A.shift();return A.isEmpty()&&A.next!==null&&(this.tail=A.next),t}},o(me,\"FixedQueue\"),me);const{kFree:kFree$1,kConnected:kConnected$3,kPending:kPending$1,kQueued:kQueued$1,kRunning:kRunning$2,kSize:kSize$1}=symbols$4,kPool=Symbol(\"pool\");let PoolStats$1=(Le=class{constructor(A){this[kPool]=A}get connected(){return this[kPool][kConnected$3]}get free(){return this[kPool][kFree$1]}get pending(){return this[kPool][kPending$1]}get queued(){return this[kPool][kQueued$1]}get running(){return this[kPool][kRunning$2]}get size(){return this[kPool][kSize$1]}},o(Le,\"PoolStats\"),Le);var poolStats=PoolStats$1;const DispatcherBase$2=dispatcherBase,FixedQueue=fixedQueue,{kConnected:kConnected$2,kSize,kRunning:kRunning$1,kPending,kQueued,kBusy,kFree,kUrl:kUrl$1,kClose:kClose$4,kDestroy:kDestroy$2,kDispatch:kDispatch$1}=symbols$4,PoolStats=poolStats,kClients$2=Symbol(\"clients\"),kNeedDrain$1=Symbol(\"needDrain\"),kQueue=Symbol(\"queue\"),kClosedResolve=Symbol(\"closed resolve\"),kOnDrain$1=Symbol(\"onDrain\"),kOnConnect$1=Symbol(\"onConnect\"),kOnDisconnect$1=Symbol(\"onDisconnect\"),kOnConnectionError$1=Symbol(\"onConnectionError\"),kGetDispatcher$1=Symbol(\"get dispatcher\"),kAddClient$1=Symbol(\"add client\"),kRemoveClient=Symbol(\"remove client\"),kStats=Symbol(\"stats\");let PoolBase$1=(Me=class extends DispatcherBase$2{constructor(){super(),this[kQueue]=new FixedQueue,this[kClients$2]=[],this[kQueued]=0;const A=this;this[kOnDrain$1]=o(function(n,r){const s=A[kQueue];let i=!1;for(;!i;){const E=s.shift();if(!E)break;A[kQueued]--,i=!this.dispatch(E.opts,E.handler)}this[kNeedDrain$1]=i,!this[kNeedDrain$1]&&A[kNeedDrain$1]&&(A[kNeedDrain$1]=!1,A.emit(\"drain\",n,[A,...r])),A[kClosedResolve]&&s.isEmpty()&&Promise.all(A[kClients$2].map(E=>E.close())).then(A[kClosedResolve])},\"onDrain\"),this[kOnConnect$1]=(t,n)=>{A.emit(\"connect\",t,[A,...n])},this[kOnDisconnect$1]=(t,n,r)=>{A.emit(\"disconnect\",t,[A,...n],r)},this[kOnConnectionError$1]=(t,n,r)=>{A.emit(\"connectionError\",t,[A,...n],r)},this[kStats]=new PoolStats(this)}get[kBusy](){return this[kNeedDrain$1]}get[kConnected$2](){return this[kClients$2].filter(A=>A[kConnected$2]).length}get[kFree](){return this[kClients$2].filter(A=>A[kConnected$2]&&!A[kNeedDrain$1]).length}get[kPending](){let A=this[kQueued];for(const{[kPending]:t}of this[kClients$2])A+=t;return A}get[kRunning$1](){let A=0;for(const{[kRunning$1]:t}of this[kClients$2])A+=t;return A}get[kSize](){let A=this[kQueued];for(const{[kSize]:t}of this[kClients$2])A+=t;return A}get stats(){return this[kStats]}async[kClose$4](){return this[kQueue].isEmpty()?Promise.all(this[kClients$2].map(A=>A.close())):new Promise(A=>{this[kClosedResolve]=A})}async[kDestroy$2](A){for(;;){const t=this[kQueue].shift();if(!t)break;t.handler.onError(A)}return Promise.all(this[kClients$2].map(t=>t.destroy(A)))}[kDispatch$1](A,t){const n=this[kGetDispatcher$1]();return n?n.dispatch(A,t)||(n[kNeedDrain$1]=!0,this[kNeedDrain$1]=!this[kGetDispatcher$1]()):(this[kNeedDrain$1]=!0,this[kQueue].push({opts:A,handler:t}),this[kQueued]++),!this[kNeedDrain$1]}[kAddClient$1](A){return A.on(\"drain\",this[kOnDrain$1]).on(\"connect\",this[kOnConnect$1]).on(\"disconnect\",this[kOnDisconnect$1]).on(\"connectionError\",this[kOnConnectionError$1]),this[kClients$2].push(A),this[kNeedDrain$1]&&queueMicrotask(()=>{this[kNeedDrain$1]&&this[kOnDrain$1](A[kUrl$1],[this,A])}),this}[kRemoveClient](A){A.close(()=>{const t=this[kClients$2].indexOf(A);t!==-1&&this[kClients$2].splice(t,1)}),this[kNeedDrain$1]=this[kClients$2].some(t=>!t[kNeedDrain$1]&&t.closed!==!0&&t.destroyed!==!0)}},o(Me,\"PoolBase\"),Me);var poolBase={PoolBase:PoolBase$1,kClients:kClients$2,kNeedDrain:kNeedDrain$1,kAddClient:kAddClient$1,kRemoveClient,kGetDispatcher:kGetDispatcher$1};const{PoolBase,kClients:kClients$1,kNeedDrain,kAddClient,kGetDispatcher}=poolBase,Client$2=client,{InvalidArgumentError:InvalidArgumentError$d}=errors$1,util$e=util$m,{kUrl,kInterceptors:kInterceptors$2}=symbols$4,buildConnector$1=connect$2,kOptions$1=Symbol(\"options\"),kConnections=Symbol(\"connections\"),kFactory$1=Symbol(\"factory\");function defaultFactory$2(e,A){return new Client$2(e,A)}o(defaultFactory$2,\"defaultFactory$2\");let Pool$3=(Ye=class extends PoolBase{constructor(A,{connections:t,factory:n=defaultFactory$2,connect:r,connectTimeout:s,tls:i,maxCachedSessions:E,socketPath:Q,autoSelectFamily:C,autoSelectFamilyAttemptTimeout:I,allowH2:a,...f}={}){if(super(),t!=null&&(!Number.isFinite(t)||t<0))throw new InvalidArgumentError$d(\"invalid connections\");if(typeof n!=\"function\")throw new InvalidArgumentError$d(\"factory must be a function.\");if(r!=null&&typeof r!=\"function\"&&typeof r!=\"object\")throw new InvalidArgumentError$d(\"connect must be a function or an object\");typeof r!=\"function\"&&(r=buildConnector$1({...i,maxCachedSessions:E,allowH2:a,socketPath:Q,timeout:s,...util$e.nodeHasAutoSelectFamily&&C?{autoSelectFamily:C,autoSelectFamilyAttemptTimeout:I}:void 0,...r})),this[kInterceptors$2]=f.interceptors?.Pool&&Array.isArray(f.interceptors.Pool)?f.interceptors.Pool:[],this[kConnections]=t||null,this[kUrl]=util$e.parseOrigin(A),this[kOptions$1]={...util$e.deepClone(f),connect:r,allowH2:a},this[kOptions$1].interceptors=f.interceptors?{...f.interceptors}:void 0,this[kFactory$1]=n}[kGetDispatcher](){for(const A of this[kClients$1])if(!A[kNeedDrain])return A;if(!this[kConnections]||this[kClients$1].length<this[kConnections]){const A=this[kFactory$1](this[kUrl],this[kOptions$1]);return this[kAddClient](A),A}}},o(Ye,\"Pool\"),Ye);var pool=Pool$3;const{InvalidArgumentError:InvalidArgumentError$c}=errors$1,{kClients,kRunning,kClose:kClose$3,kDestroy:kDestroy$1,kDispatch,kInterceptors:kInterceptors$1}=symbols$4,DispatcherBase$1=dispatcherBase,Pool$2=pool,Client$1=client,util$d=util$m,createRedirectInterceptor=redirectInterceptor,kOnConnect=Symbol(\"onConnect\"),kOnDisconnect=Symbol(\"onDisconnect\"),kOnConnectionError=Symbol(\"onConnectionError\"),kMaxRedirections=Symbol(\"maxRedirections\"),kOnDrain=Symbol(\"onDrain\"),kFactory=Symbol(\"factory\"),kOptions=Symbol(\"options\");function defaultFactory$1(e,A){return A&&A.connections===1?new Client$1(e,A):new Pool$2(e,A)}o(defaultFactory$1,\"defaultFactory$1\");let Agent$3=(Je=class extends DispatcherBase$1{constructor({factory:A=defaultFactory$1,maxRedirections:t=0,connect:n,...r}={}){if(super(),typeof A!=\"function\")throw new InvalidArgumentError$c(\"factory must be a function.\");if(n!=null&&typeof n!=\"function\"&&typeof n!=\"object\")throw new InvalidArgumentError$c(\"connect must be a function or an object\");if(!Number.isInteger(t)||t<0)throw new InvalidArgumentError$c(\"maxRedirections must be a positive number\");n&&typeof n!=\"function\"&&(n={...n}),this[kInterceptors$1]=r.interceptors?.Agent&&Array.isArray(r.interceptors.Agent)?r.interceptors.Agent:[createRedirectInterceptor({maxRedirections:t})],this[kOptions]={...util$d.deepClone(r),connect:n},this[kOptions].interceptors=r.interceptors?{...r.interceptors}:void 0,this[kMaxRedirections]=t,this[kFactory]=A,this[kClients]=new Map,this[kOnDrain]=(s,i)=>{this.emit(\"drain\",s,[this,...i])},this[kOnConnect]=(s,i)=>{this.emit(\"connect\",s,[this,...i])},this[kOnDisconnect]=(s,i,E)=>{this.emit(\"disconnect\",s,[this,...i],E)},this[kOnConnectionError]=(s,i,E)=>{this.emit(\"connectionError\",s,[this,...i],E)}}get[kRunning](){let A=0;for(const t of this[kClients].values())A+=t[kRunning];return A}[kDispatch](A,t){let n;if(A.origin&&(typeof A.origin==\"string\"||A.origin instanceof URL))n=String(A.origin);else throw new InvalidArgumentError$c(\"opts.origin must be a non-empty string or URL.\");let r=this[kClients].get(n);return r||(r=this[kFactory](A.origin,this[kOptions]).on(\"drain\",this[kOnDrain]).on(\"connect\",this[kOnConnect]).on(\"disconnect\",this[kOnDisconnect]).on(\"connectionError\",this[kOnConnectionError]),this[kClients].set(n,r)),r.dispatch(A,t)}async[kClose$3](){const A=[];for(const t of this[kClients].values())A.push(t.close());this[kClients].clear(),await Promise.all(A)}async[kDestroy$1](A){const t=[];for(const n of this[kClients].values())t.push(n.destroy(A));this[kClients].clear(),await Promise.all(t)}},o(Je,\"Agent\"),Je);var agent=Agent$3;const{kProxy,kClose:kClose$2,kDestroy,kInterceptors}=symbols$4,{URL:URL$1}=require$$1__default,Agent$2=agent,Pool$1=pool,DispatcherBase=dispatcherBase,{InvalidArgumentError:InvalidArgumentError$b,RequestAbortedError:RequestAbortedError$3,SecureProxyConnectionError}=errors$1,buildConnector=connect$2,kAgent=Symbol(\"proxy agent\"),kClient=Symbol(\"proxy client\"),kProxyHeaders=Symbol(\"proxy headers\"),kRequestTls=Symbol(\"request tls settings\"),kProxyTls=Symbol(\"proxy tls settings\"),kConnectEndpoint=Symbol(\"connect endpoint function\");function defaultProtocolPort(e){return e===\"https:\"?443:80}o(defaultProtocolPort,\"defaultProtocolPort\");function defaultFactory(e,A){return new Pool$1(e,A)}o(defaultFactory,\"defaultFactory\");let ProxyAgent$1=(Ge=class extends DispatcherBase{constructor(t){super();CA(this,Oe);if(!t||typeof t==\"object\"&&!(t instanceof URL$1)&&!t.uri)throw new InvalidArgumentError$b(\"Proxy uri is mandatory\");const{clientFactory:n=defaultFactory}=t;if(typeof n!=\"function\")throw new InvalidArgumentError$b(\"Proxy opts.clientFactory must be a function.\");const r=kA(this,Oe,Rt).call(this,t),{href:s,origin:i,port:E,protocol:Q,username:C,password:I,hostname:a}=r;if(this[kProxy]={uri:s,protocol:Q},this[kInterceptors]=t.interceptors?.ProxyAgent&&Array.isArray(t.interceptors.ProxyAgent)?t.interceptors.ProxyAgent:[],this[kRequestTls]=t.requestTls,this[kProxyTls]=t.proxyTls,this[kProxyHeaders]=t.headers||{},t.auth&&t.token)throw new InvalidArgumentError$b(\"opts.auth cannot be used in combination with opts.token\");t.auth?this[kProxyHeaders][\"proxy-authorization\"]=`Basic ${t.auth}`:t.token?this[kProxyHeaders][\"proxy-authorization\"]=t.token:C&&I&&(this[kProxyHeaders][\"proxy-authorization\"]=`Basic ${Buffer.from(`${decodeURIComponent(C)}:${decodeURIComponent(I)}`).toString(\"base64\")}`);const f=buildConnector({...t.proxyTls});this[kConnectEndpoint]=buildConnector({...t.requestTls}),this[kClient]=n(r,{connect:f}),this[kAgent]=new Agent$2({...t,connect:async(h,L)=>{let c=h.host;h.port||(c+=`:${defaultProtocolPort(h.protocol)}`);try{const{socket:l,statusCode:S}=await this[kClient].connect({origin:i,port:E,path:c,signal:h.signal,headers:{...this[kProxyHeaders],host:h.host},servername:this[kProxyTls]?.servername||a});if(S!==200&&(l.on(\"error\",()=>{}).destroy(),L(new RequestAbortedError$3(`Proxy response (${S}) !== 200 when HTTP Tunneling`))),h.protocol!==\"https:\"){L(null,l);return}let k;this[kRequestTls]?k=this[kRequestTls].servername:k=h.servername,this[kConnectEndpoint]({...h,servername:k,httpSocket:l},L)}catch(l){l.code===\"ERR_TLS_CERT_ALTNAME_INVALID\"?L(new SecureProxyConnectionError(l)):L(l)}}})}dispatch(t,n){const r=buildHeaders(t.headers);if(throwIfProxyAuthIsSent(r),r&&!(\"host\"in r)&&!(\"Host\"in r)){const{host:s}=new URL$1(t.origin);r.host=s}return this[kAgent].dispatch({...t,headers:r},n)}async[kClose$2](){await this[kAgent].close(),await this[kClient].close()}async[kDestroy](){await this[kAgent].destroy(),await this[kClient].destroy()}},Oe=new WeakSet,Rt=o(function(t){return typeof t==\"string\"?new URL$1(t):t instanceof URL$1?t:new URL$1(t.uri)},\"#getUrl\"),o(Ge,\"ProxyAgent\"),Ge);function buildHeaders(e){if(Array.isArray(e)){const A={};for(let t=0;t<e.length;t+=2)A[e[t]]=e[t+1];return A}return e}o(buildHeaders,\"buildHeaders\");function throwIfProxyAuthIsSent(e){if(e&&Object.keys(e).find(t=>t.toLowerCase()===\"proxy-authorization\"))throw new InvalidArgumentError$b(\"Proxy-Authorization should be sent in ProxyAgent constructor\")}o(throwIfProxyAuthIsSent,\"throwIfProxyAuthIsSent\");var proxyAgent=ProxyAgent$1,api$1={},apiRequest={exports:{}};const assert$6=require$$0__default,{Readable:Readable$2}=Stream__default,{RequestAbortedError:RequestAbortedError$2,NotSupportedError,InvalidArgumentError:InvalidArgumentError$a,AbortError}=errors$1,util$c=util$m,{ReadableStreamFrom}=util$m,kConsume=Symbol(\"kConsume\"),kReading=Symbol(\"kReading\"),kBody=Symbol(\"kBody\"),kAbort=Symbol(\"kAbort\"),kContentType=Symbol(\"kContentType\"),kContentLength$1=Symbol(\"kContentLength\"),noop=o(()=>{},\"noop\"),Et=class Et extends Readable$2{constructor({resume:A,abort:t,contentType:n=\"\",contentLength:r,highWaterMark:s=64*1024}){super({autoDestroy:!0,read:A,highWaterMark:s}),this._readableState.dataEmitted=!1,this[kAbort]=t,this[kConsume]=null,this[kBody]=null,this[kContentType]=n,this[kContentLength$1]=r,this[kReading]=!1}destroy(A){return!A&&!this._readableState.endEmitted&&(A=new RequestAbortedError$2),A&&this[kAbort](),super.destroy(A)}_destroy(A,t){queueMicrotask(()=>{t(A)})}on(A,...t){return(A===\"data\"||A===\"readable\")&&(this[kReading]=!0),super.on(A,...t)}addListener(A,...t){return this.on(A,...t)}off(A,...t){const n=super.off(A,...t);return(A===\"data\"||A===\"readable\")&&(this[kReading]=this.listenerCount(\"data\")>0||this.listenerCount(\"readable\")>0),n}removeListener(A,...t){return this.off(A,...t)}push(A){return this[kConsume]&&A!==null?(consumePush(this[kConsume],A),this[kReading]?super.push(A):!0):super.push(A)}async text(){return consume(this,\"text\")}async json(){return consume(this,\"json\")}async blob(){return consume(this,\"blob\")}async arrayBuffer(){return consume(this,\"arrayBuffer\")}async formData(){throw new NotSupportedError}get bodyUsed(){return util$c.isDisturbed(this)}get body(){return this[kBody]||(this[kBody]=ReadableStreamFrom(this),this[kConsume]&&(this[kBody].getReader(),assert$6(this[kBody].locked))),this[kBody]}async dump(A){let t=Number.isFinite(A?.limit)?A.limit:131072;const n=A?.signal;if(n!=null&&(typeof n!=\"object\"||!(\"aborted\"in n)))throw new InvalidArgumentError$a(\"signal must be an AbortSignal\");return n?.throwIfAborted(),this._readableState.closeEmitted?null:await new Promise((r,s)=>{this[kContentLength$1]>t&&this.destroy(new AbortError);const i=o(()=>{this.destroy(n.reason??new AbortError)},\"onAbort\");n?.addEventListener(\"abort\",i),this.on(\"close\",function(){n?.removeEventListener(\"abort\",i),n?.aborted?s(n.reason??new AbortError):r(null)}).on(\"error\",noop).on(\"data\",function(E){t-=E.length,t<=0&&this.destroy()}).resume()})}};o(Et,\"BodyReadable\");let BodyReadable=Et;function isLocked(e){return e[kBody]&&e[kBody].locked===!0||e[kConsume]}o(isLocked,\"isLocked\");function isUnusable(e){return util$c.isDisturbed(e)||isLocked(e)}o(isUnusable,\"isUnusable\");async function consume(e,A){return assert$6(!e[kConsume]),new Promise((t,n)=>{if(isUnusable(e)){const r=e._readableState;r.destroyed&&r.closeEmitted===!1?e.on(\"error\",s=>{n(s)}).on(\"close\",()=>{n(new TypeError(\"unusable\"))}):n(r.errored??new TypeError(\"unusable\"))}else queueMicrotask(()=>{e[kConsume]={type:A,stream:e,resolve:t,reject:n,length:0,body:[]},e.on(\"error\",function(r){consumeFinish(this[kConsume],r)}).on(\"close\",function(){this[kConsume].body!==null&&consumeFinish(this[kConsume],new RequestAbortedError$2)}),consumeStart(e[kConsume])})})}o(consume,\"consume\");function consumeStart(e){if(e.body===null)return;const{_readableState:A}=e.stream;if(A.bufferIndex){const t=A.bufferIndex,n=A.buffer.length;for(let r=t;r<n;r++)consumePush(e,A.buffer[r])}else for(const t of A.buffer)consumePush(e,t);for(A.endEmitted?consumeEnd(this[kConsume]):e.stream.on(\"end\",function(){consumeEnd(this[kConsume])}),e.stream.resume();e.stream.read()!=null;);}o(consumeStart,\"consumeStart\");function chunksDecode$1(e,A){if(e.length===0||A===0)return\"\";const t=e.length===1?e[0]:Buffer.concat(e,A),n=t.length,r=n>2&&t[0]===239&&t[1]===187&&t[2]===191?3:0;return t.utf8Slice(r,n)}o(chunksDecode$1,\"chunksDecode$1\");function consumeEnd(e){const{type:A,body:t,resolve:n,stream:r,length:s}=e;try{if(A===\"text\")n(chunksDecode$1(t,s));else if(A===\"json\")n(JSON.parse(chunksDecode$1(t,s)));else if(A===\"arrayBuffer\"){const i=new Uint8Array(s);let E=0;for(const Q of t)i.set(Q,E),E+=Q.byteLength;n(i.buffer)}else A===\"blob\"&&n(new Blob(t,{type:r[kContentType]}));consumeFinish(e)}catch(i){r.destroy(i)}}o(consumeEnd,\"consumeEnd\");function consumePush(e,A){e.length+=A.length,e.body.push(A)}o(consumePush,\"consumePush\");function consumeFinish(e,A){e.body!==null&&(A?e.reject(A):e.resolve(),e.type=null,e.stream=null,e.resolve=null,e.reject=null,e.length=0,e.body=null)}o(consumeFinish,\"consumeFinish\");var readable={Readable:BodyReadable,chunksDecode:chunksDecode$1};const assert$5=require$$0__default,{ResponseStatusCodeError}=errors$1,{chunksDecode}=readable,CHUNK_LIMIT=128*1024;async function getResolveErrorBodyCallback$2({callback:e,body:A,contentType:t,statusCode:n,statusMessage:r,headers:s}){assert$5(A);let i=[],E=0;for await(const a of A)if(i.push(a),E+=a.length,E>CHUNK_LIMIT){i=null;break}const Q=`Response status code ${n}${r?`: ${r}`:\"\"}`;if(n===204||!t||!i){queueMicrotask(()=>e(new ResponseStatusCodeError(Q,n,s)));return}const C=Error.stackTraceLimit;Error.stackTraceLimit=0;let I;try{isContentTypeApplicationJson(t)?I=JSON.parse(chunksDecode(i,E)):isContentTypeText(t)&&(I=chunksDecode(i,E))}catch{}finally{Error.stackTraceLimit=C}queueMicrotask(()=>e(new ResponseStatusCodeError(Q,n,s,I)))}o(getResolveErrorBodyCallback$2,\"getResolveErrorBodyCallback$2\");const isContentTypeApplicationJson=o(e=>e.length>15&&e[11]===\"/\"&&e[0]===\"a\"&&e[1]===\"p\"&&e[2]===\"p\"&&e[3]===\"l\"&&e[4]===\"i\"&&e[5]===\"c\"&&e[6]===\"a\"&&e[7]===\"t\"&&e[8]===\"i\"&&e[9]===\"o\"&&e[10]===\"n\"&&e[12]===\"j\"&&e[13]===\"s\"&&e[14]===\"o\"&&e[15]===\"n\",\"isContentTypeApplicationJson\"),isContentTypeText=o(e=>e.length>4&&e[4]===\"/\"&&e[0]===\"t\"&&e[1]===\"e\"&&e[2]===\"x\"&&e[3]===\"t\",\"isContentTypeText\");var util$b={getResolveErrorBodyCallback:getResolveErrorBodyCallback$2,isContentTypeApplicationJson,isContentTypeText};const{addAbortListener}=util$m,{RequestAbortedError:RequestAbortedError$1}=errors$1,kListener=Symbol(\"kListener\"),kSignal=Symbol(\"kSignal\");function abort(e){e.abort?e.abort(e[kSignal]?.reason):e.reason=e[kSignal]?.reason??new RequestAbortedError$1,removeSignal$5(e)}o(abort,\"abort\");function addSignal$5(e,A){if(e.reason=null,e[kSignal]=null,e[kListener]=null,!!A){if(A.aborted){abort(e);return}e[kSignal]=A,e[kListener]=()=>{abort(e)},addAbortListener(e[kSignal],e[kListener])}}o(addSignal$5,\"addSignal$5\");function removeSignal$5(e){e[kSignal]&&(\"removeEventListener\"in e[kSignal]?e[kSignal].removeEventListener(\"abort\",e[kListener]):e[kSignal].removeListener(\"abort\",e[kListener]),e[kSignal]=null,e[kListener]=null)}o(removeSignal$5,\"removeSignal$5\");var abortSignal={addSignal:addSignal$5,removeSignal:removeSignal$5};const assert$4=require$$0__default,{Readable:Readable$1}=readable,{InvalidArgumentError:InvalidArgumentError$9}=errors$1,util$a=util$m,{getResolveErrorBodyCallback:getResolveErrorBodyCallback$1}=util$b,{AsyncResource:AsyncResource$4}=require$$5__default$1,{addSignal:addSignal$4,removeSignal:removeSignal$4}=abortSignal,gt=class gt extends AsyncResource$4{constructor(A,t){if(!A||typeof A!=\"object\")throw new InvalidArgumentError$9(\"invalid opts\");const{signal:n,method:r,opaque:s,body:i,onInfo:E,responseHeaders:Q,throwOnError:C,highWaterMark:I}=A;try{if(typeof t!=\"function\")throw new InvalidArgumentError$9(\"invalid callback\");if(I&&(typeof I!=\"number\"||I<0))throw new InvalidArgumentError$9(\"invalid highWaterMark\");if(n&&typeof n.on!=\"function\"&&typeof n.addEventListener!=\"function\")throw new InvalidArgumentError$9(\"signal must be an EventEmitter or EventTarget\");if(r===\"CONNECT\")throw new InvalidArgumentError$9(\"invalid method\");if(E&&typeof E!=\"function\")throw new InvalidArgumentError$9(\"invalid onInfo callback\");super(\"UNDICI_REQUEST\")}catch(a){throw util$a.isStream(i)&&util$a.destroy(i.on(\"error\",util$a.nop),a),a}this.responseHeaders=Q||null,this.opaque=s||null,this.callback=t,this.res=null,this.abort=null,this.body=i,this.trailers={},this.context=null,this.onInfo=E||null,this.throwOnError=C,this.highWaterMark=I,util$a.isStream(i)&&i.on(\"error\",a=>{this.onError(a)}),addSignal$4(this,n)}onConnect(A,t){if(this.reason){A(this.reason);return}assert$4(this.callback),this.abort=A,this.context=t}onHeaders(A,t,n,r){const{callback:s,opaque:i,abort:E,context:Q,responseHeaders:C,highWaterMark:I}=this,a=C===\"raw\"?util$a.parseRawHeaders(t):util$a.parseHeaders(t);if(A<200){this.onInfo&&this.onInfo({statusCode:A,headers:a});return}const f=C===\"raw\"?util$a.parseHeaders(t):a,h=f[\"content-type\"],L=f[\"content-length\"],c=new Readable$1({resume:n,abort:E,contentType:h,contentLength:L,highWaterMark:I});this.callback=null,this.res=c,s!==null&&(this.throwOnError&&A>=400?this.runInAsyncScope(getResolveErrorBodyCallback$1,null,{callback:s,body:c,contentType:h,statusCode:A,statusMessage:r,headers:a}):this.runInAsyncScope(s,null,null,{statusCode:A,headers:a,trailers:this.trailers,opaque:i,body:c,context:Q}))}onData(A){const{res:t}=this;return t.push(A)}onComplete(A){const{res:t}=this;removeSignal$4(this),util$a.parseHeaders(A,this.trailers),t.push(null)}onError(A){const{res:t,callback:n,body:r,opaque:s}=this;removeSignal$4(this),n&&(this.callback=null,queueMicrotask(()=>{this.runInAsyncScope(n,null,A,{opaque:s})})),t&&(this.res=null,queueMicrotask(()=>{util$a.destroy(t,A)})),r&&(this.body=null,util$a.destroy(r,A))}};o(gt,\"RequestHandler\");let RequestHandler=gt;function request$1(e,A){if(A===void 0)return new Promise((t,n)=>{request$1.call(this,e,(r,s)=>r?n(r):t(s))});try{this.dispatch(e,new RequestHandler(e,A))}catch(t){if(typeof A!=\"function\")throw t;const n=e?.opaque;queueMicrotask(()=>A(t,{opaque:n}))}}o(request$1,\"request$1\"),apiRequest.exports=request$1,apiRequest.exports.RequestHandler=RequestHandler;var apiRequestExports=apiRequest.exports;const assert$3=require$$0__default,{finished,PassThrough:PassThrough$1}=Stream__default,{InvalidArgumentError:InvalidArgumentError$8,InvalidReturnValueError:InvalidReturnValueError$1}=errors$1,util$9=util$m,{getResolveErrorBodyCallback}=util$b,{AsyncResource:AsyncResource$3}=require$$5__default$1,{addSignal:addSignal$3,removeSignal:removeSignal$3}=abortSignal,Bt=class Bt extends AsyncResource$3{constructor(A,t,n){if(!A||typeof A!=\"object\")throw new InvalidArgumentError$8(\"invalid opts\");const{signal:r,method:s,opaque:i,body:E,onInfo:Q,responseHeaders:C,throwOnError:I}=A;try{if(typeof n!=\"function\")throw new InvalidArgumentError$8(\"invalid callback\");if(typeof t!=\"function\")throw new InvalidArgumentError$8(\"invalid factory\");if(r&&typeof r.on!=\"function\"&&typeof r.addEventListener!=\"function\")throw new InvalidArgumentError$8(\"signal must be an EventEmitter or EventTarget\");if(s===\"CONNECT\")throw new InvalidArgumentError$8(\"invalid method\");if(Q&&typeof Q!=\"function\")throw new InvalidArgumentError$8(\"invalid onInfo callback\");super(\"UNDICI_STREAM\")}catch(a){throw util$9.isStream(E)&&util$9.destroy(E.on(\"error\",util$9.nop),a),a}this.responseHeaders=C||null,this.opaque=i||null,this.factory=t,this.callback=n,this.res=null,this.abort=null,this.context=null,this.trailers=null,this.body=E,this.onInfo=Q||null,this.throwOnError=I||!1,util$9.isStream(E)&&E.on(\"error\",a=>{this.onError(a)}),addSignal$3(this,r)}onConnect(A,t){if(this.reason){A(this.reason);return}assert$3(this.callback),this.abort=A,this.context=t}onHeaders(A,t,n,r){const{factory:s,opaque:i,context:E,callback:Q,responseHeaders:C}=this,I=C===\"raw\"?util$9.parseRawHeaders(t):util$9.parseHeaders(t);if(A<200){this.onInfo&&this.onInfo({statusCode:A,headers:I});return}this.factory=null;let a;if(this.throwOnError&&A>=400){const L=(C===\"raw\"?util$9.parseHeaders(t):I)[\"content-type\"];a=new PassThrough$1,this.callback=null,this.runInAsyncScope(getResolveErrorBodyCallback,null,{callback:Q,body:a,contentType:L,statusCode:A,statusMessage:r,headers:I})}else{if(s===null)return;if(a=this.runInAsyncScope(s,null,{statusCode:A,headers:I,opaque:i,context:E}),!a||typeof a.write!=\"function\"||typeof a.end!=\"function\"||typeof a.on!=\"function\")throw new InvalidReturnValueError$1(\"expected Writable\");finished(a,{readable:!1},h=>{const{callback:L,res:c,opaque:l,trailers:S,abort:k}=this;this.res=null,(h||!c.readable)&&util$9.destroy(c,h),this.callback=null,this.runInAsyncScope(L,null,h||null,{opaque:l,trailers:S}),h&&k()})}return a.on(\"drain\",n),this.res=a,(a.writableNeedDrain!==void 0?a.writableNeedDrain:a._writableState?.needDrain)!==!0}onData(A){const{res:t}=this;return t?t.write(A):!0}onComplete(A){const{res:t}=this;removeSignal$3(this),t&&(this.trailers=util$9.parseHeaders(A),t.end())}onError(A){const{res:t,callback:n,opaque:r,body:s}=this;removeSignal$3(this),this.factory=null,t?(this.res=null,util$9.destroy(t,A)):n&&(this.callback=null,queueMicrotask(()=>{this.runInAsyncScope(n,null,A,{opaque:r})})),s&&(this.body=null,util$9.destroy(s,A))}};o(Bt,\"StreamHandler\");let StreamHandler=Bt;function stream(e,A,t){if(t===void 0)return new Promise((n,r)=>{stream.call(this,e,A,(s,i)=>s?r(s):n(i))});try{this.dispatch(e,new StreamHandler(e,A,t))}catch(n){if(typeof t!=\"function\")throw n;const r=e?.opaque;queueMicrotask(()=>t(n,{opaque:r}))}}o(stream,\"stream\");var apiStream=stream;const{Readable,Duplex,PassThrough}=Stream__default,{InvalidArgumentError:InvalidArgumentError$7,InvalidReturnValueError,RequestAbortedError}=errors$1,util$8=util$m,{AsyncResource:AsyncResource$2}=require$$5__default$1,{addSignal:addSignal$2,removeSignal:removeSignal$2}=abortSignal,assert$2=require$$0__default,kResume=Symbol(\"resume\"),Ct=class Ct extends Readable{constructor(){super({autoDestroy:!0}),this[kResume]=null}_read(){const{[kResume]:A}=this;A&&(this[kResume]=null,A())}_destroy(A,t){this._read(),t(A)}};o(Ct,\"PipelineRequest\");let PipelineRequest=Ct;const It=class It extends Readable{constructor(A){super({autoDestroy:!0}),this[kResume]=A}_read(){this[kResume]()}_destroy(A,t){!A&&!this._readableState.endEmitted&&(A=new RequestAbortedError),t(A)}};o(It,\"PipelineResponse\");let PipelineResponse=It;const at=class at extends AsyncResource$2{constructor(A,t){if(!A||typeof A!=\"object\")throw new InvalidArgumentError$7(\"invalid opts\");if(typeof t!=\"function\")throw new InvalidArgumentError$7(\"invalid handler\");const{signal:n,method:r,opaque:s,onInfo:i,responseHeaders:E}=A;if(n&&typeof n.on!=\"function\"&&typeof n.addEventListener!=\"function\")throw new InvalidArgumentError$7(\"signal must be an EventEmitter or EventTarget\");if(r===\"CONNECT\")throw new InvalidArgumentError$7(\"invalid method\");if(i&&typeof i!=\"function\")throw new InvalidArgumentError$7(\"invalid onInfo callback\");super(\"UNDICI_PIPELINE\"),this.opaque=s||null,this.responseHeaders=E||null,this.handler=t,this.abort=null,this.context=null,this.onInfo=i||null,this.req=new PipelineRequest().on(\"error\",util$8.nop),this.ret=new Duplex({readableObjectMode:A.objectMode,autoDestroy:!0,read:()=>{const{body:Q}=this;Q?.resume&&Q.resume()},write:(Q,C,I)=>{const{req:a}=this;a.push(Q,C)||a._readableState.destroyed?I():a[kResume]=I},destroy:(Q,C)=>{const{body:I,req:a,res:f,ret:h,abort:L}=this;!Q&&!h._readableState.endEmitted&&(Q=new RequestAbortedError),L&&Q&&L(),util$8.destroy(I,Q),util$8.destroy(a,Q),util$8.destroy(f,Q),removeSignal$2(this),C(Q)}}).on(\"prefinish\",()=>{const{req:Q}=this;Q.push(null)}),this.res=null,addSignal$2(this,n)}onConnect(A,t){const{ret:n,res:r}=this;if(this.reason){A(this.reason);return}assert$2(!r,\"pipeline cannot be retried\"),assert$2(!n.destroyed),this.abort=A,this.context=t}onHeaders(A,t,n){const{opaque:r,handler:s,context:i}=this;if(A<200){if(this.onInfo){const Q=this.responseHeaders===\"raw\"?util$8.parseRawHeaders(t):util$8.parseHeaders(t);this.onInfo({statusCode:A,headers:Q})}return}this.res=new PipelineResponse(n);let E;try{this.handler=null;const Q=this.responseHeaders===\"raw\"?util$8.parseRawHeaders(t):util$8.parseHeaders(t);E=this.runInAsyncScope(s,null,{statusCode:A,headers:Q,opaque:r,body:this.res,context:i})}catch(Q){throw this.res.on(\"error\",util$8.nop),Q}if(!E||typeof E.on!=\"function\")throw new InvalidReturnValueError(\"expected Readable\");E.on(\"data\",Q=>{const{ret:C,body:I}=this;!C.push(Q)&&I.pause&&I.pause()}).on(\"error\",Q=>{const{ret:C}=this;util$8.destroy(C,Q)}).on(\"end\",()=>{const{ret:Q}=this;Q.push(null)}).on(\"close\",()=>{const{ret:Q}=this;Q._readableState.ended||util$8.destroy(Q,new RequestAbortedError)}),this.body=E}onData(A){const{res:t}=this;return t.push(A)}onComplete(A){const{res:t}=this;t.push(null)}onError(A){const{ret:t}=this;this.handler=null,util$8.destroy(t,A)}};o(at,\"PipelineHandler\");let PipelineHandler=at;function pipeline(e,A){try{const t=new PipelineHandler(e,A);return this.dispatch({...e,body:t.req},t),t.ret}catch(t){return new PassThrough().destroy(t)}}o(pipeline,\"pipeline\");var apiPipeline=pipeline;const{InvalidArgumentError:InvalidArgumentError$6,SocketError:SocketError$1}=errors$1,{AsyncResource:AsyncResource$1}=require$$5__default$1,util$7=util$m,{addSignal:addSignal$1,removeSignal:removeSignal$1}=abortSignal,assert$1=require$$0__default,ct=class ct extends AsyncResource$1{constructor(A,t){if(!A||typeof A!=\"object\")throw new InvalidArgumentError$6(\"invalid opts\");if(typeof t!=\"function\")throw new InvalidArgumentError$6(\"invalid callback\");const{signal:n,opaque:r,responseHeaders:s}=A;if(n&&typeof n.on!=\"function\"&&typeof n.addEventListener!=\"function\")throw new InvalidArgumentError$6(\"signal must be an EventEmitter or EventTarget\");super(\"UNDICI_UPGRADE\"),this.responseHeaders=s||null,this.opaque=r||null,this.callback=t,this.abort=null,this.context=null,addSignal$1(this,n)}onConnect(A,t){if(this.reason){A(this.reason);return}assert$1(this.callback),this.abort=A,this.context=null}onHeaders(){throw new SocketError$1(\"bad upgrade\",null)}onUpgrade(A,t,n){const{callback:r,opaque:s,context:i}=this;assert$1.strictEqual(A,101),removeSignal$1(this),this.callback=null;const E=this.responseHeaders===\"raw\"?util$7.parseRawHeaders(t):util$7.parseHeaders(t);this.runInAsyncScope(r,null,null,{headers:E,socket:n,opaque:s,context:i})}onError(A){const{callback:t,opaque:n}=this;removeSignal$1(this),t&&(this.callback=null,queueMicrotask(()=>{this.runInAsyncScope(t,null,A,{opaque:n})}))}};o(ct,\"UpgradeHandler\");let UpgradeHandler=ct;function upgrade(e,A){if(A===void 0)return new Promise((t,n)=>{upgrade.call(this,e,(r,s)=>r?n(r):t(s))});try{const t=new UpgradeHandler(e,A);this.dispatch({...e,method:e.method||\"GET\",upgrade:e.protocol||\"Websocket\"},t)}catch(t){if(typeof A!=\"function\")throw t;const n=e?.opaque;queueMicrotask(()=>A(t,{opaque:n}))}}o(upgrade,\"upgrade\");var apiUpgrade=upgrade;const assert=require$$0__default,{AsyncResource}=require$$5__default$1,{InvalidArgumentError:InvalidArgumentError$5,SocketError}=errors$1,util$6=util$m,{addSignal,removeSignal}=abortSignal,ht=class ht extends AsyncResource{constructor(A,t){if(!A||typeof A!=\"object\")throw new InvalidArgumentError$5(\"invalid opts\");if(typeof t!=\"function\")throw new InvalidArgumentError$5(\"invalid callback\");const{signal:n,opaque:r,responseHeaders:s}=A;if(n&&typeof n.on!=\"function\"&&typeof n.addEventListener!=\"function\")throw new InvalidArgumentError$5(\"signal must be an EventEmitter or EventTarget\");super(\"UNDICI_CONNECT\"),this.opaque=r||null,this.responseHeaders=s||null,this.callback=t,this.abort=null,addSignal(this,n)}onConnect(A,t){if(this.reason){A(this.reason);return}assert(this.callback),this.abort=A,this.context=t}onHeaders(){throw new SocketError(\"bad connect\",null)}onUpgrade(A,t,n){const{callback:r,opaque:s,context:i}=this;removeSignal(this),this.callback=null;let E=t;E!=null&&(E=this.responseHeaders===\"raw\"?util$6.parseRawHeaders(t):util$6.parseHeaders(t)),this.runInAsyncScope(r,null,null,{statusCode:A,headers:E,socket:n,opaque:s,context:i})}onError(A){const{callback:t,opaque:n}=this;removeSignal(this),t&&(this.callback=null,queueMicrotask(()=>{this.runInAsyncScope(t,null,A,{opaque:n})}))}};o(ht,\"ConnectHandler\");let ConnectHandler=ht;function connect(e,A){if(A===void 0)return new Promise((t,n)=>{connect.call(this,e,(r,s)=>r?n(r):t(s))});try{const t=new ConnectHandler(e,A);this.dispatch({...e,method:\"CONNECT\"},t)}catch(t){if(typeof A!=\"function\")throw t;const n=e?.opaque;queueMicrotask(()=>A(t,{opaque:n}))}}o(connect,\"connect\");var apiConnect=connect;api$1.request=apiRequestExports,api$1.stream=apiStream,api$1.pipeline=apiPipeline,api$1.upgrade=apiUpgrade,api$1.connect=apiConnect;const{UndiciError}=errors$1;let MockNotMatchedError$1=(Ae=class extends UndiciError{constructor(A){super(A),Error.captureStackTrace(this,Ae),this.name=\"MockNotMatchedError\",this.message=A||\"The request does not match any registered mock dispatches\",this.code=\"UND_MOCK_ERR_MOCK_NOT_MATCHED\"}},o(Ae,\"MockNotMatchedError\"),Ae);var mockErrors={MockNotMatchedError:MockNotMatchedError$1},mockSymbols={kAgent:Symbol(\"agent\"),kOptions:Symbol(\"options\"),kFactory:Symbol(\"factory\"),kDispatches:Symbol(\"dispatches\"),kDispatchKey:Symbol(\"dispatch key\"),kDefaultHeaders:Symbol(\"default headers\"),kDefaultTrailers:Symbol(\"default trailers\"),kContentLength:Symbol(\"content length\"),kMockAgent:Symbol(\"mock agent\"),kMockAgentSet:Symbol(\"mock agent set\"),kMockAgentGet:Symbol(\"mock agent get\"),kMockDispatch:Symbol(\"mock dispatch\"),kClose:Symbol(\"close\"),kOriginalClose:Symbol(\"original agent close\"),kOrigin:Symbol(\"origin\"),kIsMockActive:Symbol(\"is mock active\"),kNetConnect:Symbol(\"net connect\"),kGetNetConnect:Symbol(\"get net connect\"),kConnected:Symbol(\"connected\")};const{MockNotMatchedError}=mockErrors,{kDispatches:kDispatches$3,kMockAgent:kMockAgent$2,kOriginalDispatch:kOriginalDispatch$2,kOrigin:kOrigin$2,kGetNetConnect}=mockSymbols,{buildURL:buildURL$1}=util$m,{STATUS_CODES}=http__default,{types:{isPromise}}=require$$0__default$1;function matchValue(e,A){return typeof e==\"string\"?e===A:e instanceof RegExp?e.test(A):typeof e==\"function\"?e(A)===!0:!1}o(matchValue,\"matchValue\");function lowerCaseEntries(e){return Object.fromEntries(Object.entries(e).map(([A,t])=>[A.toLocaleLowerCase(),t]))}o(lowerCaseEntries,\"lowerCaseEntries\");function getHeaderByName(e,A){if(Array.isArray(e)){for(let t=0;t<e.length;t+=2)if(e[t].toLocaleLowerCase()===A.toLocaleLowerCase())return e[t+1];return}else return typeof e.get==\"function\"?e.get(A):lowerCaseEntries(e)[A.toLocaleLowerCase()]}o(getHeaderByName,\"getHeaderByName\");function buildHeadersFromArray(e){const A=e.slice(),t=[];for(let n=0;n<A.length;n+=2)t.push([A[n],A[n+1]]);return Object.fromEntries(t)}o(buildHeadersFromArray,\"buildHeadersFromArray\");function matchHeaders(e,A){if(typeof e.headers==\"function\")return Array.isArray(A)&&(A=buildHeadersFromArray(A)),e.headers(A?lowerCaseEntries(A):{});if(typeof e.headers>\"u\")return!0;if(typeof A!=\"object\"||typeof e.headers!=\"object\")return!1;for(const[t,n]of Object.entries(e.headers)){const r=getHeaderByName(A,t);if(!matchValue(n,r))return!1}return!0}o(matchHeaders,\"matchHeaders\");function safeUrl(e){if(typeof e!=\"string\")return e;const A=e.split(\"?\");if(A.length!==2)return e;const t=new URLSearchParams(A.pop());return t.sort(),[...A,t.toString()].join(\"?\")}o(safeUrl,\"safeUrl\");function matchKey(e,{path:A,method:t,body:n,headers:r}){const s=matchValue(e.path,A),i=matchValue(e.method,t),E=typeof e.body<\"u\"?matchValue(e.body,n):!0,Q=matchHeaders(e,r);return s&&i&&E&&Q}o(matchKey,\"matchKey\");function getResponseData$1(e){return Buffer.isBuffer(e)?e:typeof e==\"object\"?JSON.stringify(e):e.toString()}o(getResponseData$1,\"getResponseData$1\");function getMockDispatch(e,A){const t=A.query?buildURL$1(A.path,A.query):A.path,n=typeof t==\"string\"?safeUrl(t):t;let r=e.filter(({consumed:s})=>!s).filter(({path:s})=>matchValue(safeUrl(s),n));if(r.length===0)throw new MockNotMatchedError(`Mock dispatch not matched for path '${n}'`);if(r=r.filter(({method:s})=>matchValue(s,A.method)),r.length===0)throw new MockNotMatchedError(`Mock dispatch not matched for method '${A.method}' on path '${n}'`);if(r=r.filter(({body:s})=>typeof s<\"u\"?matchValue(s,A.body):!0),r.length===0)throw new MockNotMatchedError(`Mock dispatch not matched for body '${A.body}' on path '${n}'`);if(r=r.filter(s=>matchHeaders(s,A.headers)),r.length===0){const s=typeof A.headers==\"object\"?JSON.stringify(A.headers):A.headers;throw new MockNotMatchedError(`Mock dispatch not matched for headers '${s}' on path '${n}'`)}return r[0]}o(getMockDispatch,\"getMockDispatch\");function addMockDispatch$1(e,A,t){const n={timesInvoked:0,times:1,persist:!1,consumed:!1},r=typeof t==\"function\"?{callback:t}:{...t},s={...n,...A,pending:!0,data:{error:null,...r}};return e.push(s),s}o(addMockDispatch$1,\"addMockDispatch$1\");function deleteMockDispatch(e,A){const t=e.findIndex(n=>n.consumed?matchKey(n,A):!1);t!==-1&&e.splice(t,1)}o(deleteMockDispatch,\"deleteMockDispatch\");function buildKey$1(e){const{path:A,method:t,body:n,headers:r,query:s}=e;return{path:A,method:t,body:n,headers:r,query:s}}o(buildKey$1,\"buildKey$1\");function generateKeyValues(e){const A=Object.keys(e),t=[];for(let n=0;n<A.length;++n){const r=A[n],s=e[r],i=Buffer.from(`${r}`);if(Array.isArray(s))for(let E=0;E<s.length;++E)t.push(i,Buffer.from(`${s[E]}`));else t.push(i,Buffer.from(`${s}`))}return t}o(generateKeyValues,\"generateKeyValues\");function getStatusText(e){return STATUS_CODES[e]||\"unknown\"}o(getStatusText,\"getStatusText\");async function getResponse(e){const A=[];for await(const t of e)A.push(t);return Buffer.concat(A).toString(\"utf8\")}o(getResponse,\"getResponse\");function mockDispatch(e,A){const t=buildKey$1(e),n=getMockDispatch(this[kDispatches$3],t);n.timesInvoked++,n.data.callback&&(n.data={...n.data,...n.data.callback(e)});const{data:{statusCode:r,data:s,headers:i,trailers:E,error:Q},delay:C,persist:I}=n,{timesInvoked:a,times:f}=n;if(n.consumed=!I&&a>=f,n.pending=a<f,Q!==null)return deleteMockDispatch(this[kDispatches$3],t),A.onError(Q),!0;typeof C==\"number\"&&C>0?setTimeout(()=>{h(this[kDispatches$3])},C):h(this[kDispatches$3]);function h(c,l=s){const S=Array.isArray(e.headers)?buildHeadersFromArray(e.headers):e.headers,k=typeof l==\"function\"?l({...e,headers:S}):l;if(isPromise(k)){k.then(B=>h(c,B));return}const w=getResponseData$1(k),U=generateKeyValues(i),M=generateKeyValues(E);A.onConnect?.(B=>A.onError(B),null),A.onHeaders?.(r,U,L,getStatusText(r)),A.onData?.(Buffer.from(w)),A.onComplete?.(M),deleteMockDispatch(c,t)}o(h,\"handleReply\");function L(){}return o(L,\"resume\"),!0}o(mockDispatch,\"mockDispatch\");function buildMockDispatch$2(){const e=this[kMockAgent$2],A=this[kOrigin$2],t=this[kOriginalDispatch$2];return o(function(r,s){if(e.isMockActive)try{mockDispatch.call(this,r,s)}catch(i){if(i instanceof MockNotMatchedError){const E=e[kGetNetConnect]();if(E===!1)throw new MockNotMatchedError(`${i.message}: subsequent request to origin ${A} was not allowed (net.connect disabled)`);if(checkNetConnect(E,A))t.call(this,r,s);else throw new MockNotMatchedError(`${i.message}: subsequent request to origin ${A} was not allowed (net.connect is not enabled for this origin)`)}else throw i}else t.call(this,r,s)},\"dispatch\")}o(buildMockDispatch$2,\"buildMockDispatch$2\");function checkNetConnect(e,A){const t=new URL(A);return e===!0?!0:!!(Array.isArray(e)&&e.some(n=>matchValue(n,t.host)))}o(checkNetConnect,\"checkNetConnect\");function buildMockOptions(e){if(e){const{agent:A,...t}=e;return t}}o(buildMockOptions,\"buildMockOptions\");var mockUtils={getResponseData:getResponseData$1,getMockDispatch,addMockDispatch:addMockDispatch$1,deleteMockDispatch,buildKey:buildKey$1,generateKeyValues,matchValue,getResponse,getStatusText,mockDispatch,buildMockDispatch:buildMockDispatch$2,checkNetConnect,buildMockOptions,getHeaderByName,buildHeadersFromArray},mockInterceptor={};const{getResponseData,buildKey,addMockDispatch}=mockUtils,{kDispatches:kDispatches$2,kDispatchKey,kDefaultHeaders,kDefaultTrailers,kContentLength,kMockDispatch}=mockSymbols,{InvalidArgumentError:InvalidArgumentError$4}=errors$1,{buildURL}=util$m,lt=class lt{constructor(A){this[kMockDispatch]=A}delay(A){if(typeof A!=\"number\"||!Number.isInteger(A)||A<=0)throw new InvalidArgumentError$4(\"waitInMs must be a valid integer > 0\");return this[kMockDispatch].delay=A,this}persist(){return this[kMockDispatch].persist=!0,this}times(A){if(typeof A!=\"number\"||!Number.isInteger(A)||A<=0)throw new InvalidArgumentError$4(\"repeatTimes must be a valid integer > 0\");return this[kMockDispatch].times=A,this}};o(lt,\"MockScope\");let MockScope=lt,MockInterceptor$2=(Te=class{constructor(A,t){if(typeof A!=\"object\")throw new InvalidArgumentError$4(\"opts must be an object\");if(typeof A.path>\"u\")throw new InvalidArgumentError$4(\"opts.path must be defined\");if(typeof A.method>\"u\"&&(A.method=\"GET\"),typeof A.path==\"string\")if(A.query)A.path=buildURL(A.path,A.query);else{const n=new URL(A.path,\"data://\");A.path=n.pathname+n.search}typeof A.method==\"string\"&&(A.method=A.method.toUpperCase()),this[kDispatchKey]=buildKey(A),this[kDispatches$2]=t,this[kDefaultHeaders]={},this[kDefaultTrailers]={},this[kContentLength]=!1}createMockScopeDispatchData({statusCode:A,data:t,responseOptions:n}){const r=getResponseData(t),s=this[kContentLength]?{\"content-length\":r.length}:{},i={...this[kDefaultHeaders],...s,...n.headers},E={...this[kDefaultTrailers],...n.trailers};return{statusCode:A,data:t,headers:i,trailers:E}}validateReplyParameters(A){if(typeof A.statusCode>\"u\")throw new InvalidArgumentError$4(\"statusCode must be defined\");if(typeof A.responseOptions!=\"object\"||A.responseOptions===null)throw new InvalidArgumentError$4(\"responseOptions must be an object\")}reply(A){if(typeof A==\"function\"){const s=o(E=>{const Q=A(E);if(typeof Q!=\"object\"||Q===null)throw new InvalidArgumentError$4(\"reply options callback must return an object\");const C={data:\"\",responseOptions:{},...Q};return this.validateReplyParameters(C),{...this.createMockScopeDispatchData(C)}},\"wrappedDefaultsCallback\"),i=addMockDispatch(this[kDispatches$2],this[kDispatchKey],s);return new MockScope(i)}const t={statusCode:A,data:arguments[1]===void 0?\"\":arguments[1],responseOptions:arguments[2]===void 0?{}:arguments[2]};this.validateReplyParameters(t);const n=this.createMockScopeDispatchData(t),r=addMockDispatch(this[kDispatches$2],this[kDispatchKey],n);return new MockScope(r)}replyWithError(A){if(typeof A>\"u\")throw new InvalidArgumentError$4(\"error must be defined\");const t=addMockDispatch(this[kDispatches$2],this[kDispatchKey],{error:A});return new MockScope(t)}defaultReplyHeaders(A){if(typeof A>\"u\")throw new InvalidArgumentError$4(\"headers must be defined\");return this[kDefaultHeaders]=A,this}defaultReplyTrailers(A){if(typeof A>\"u\")throw new InvalidArgumentError$4(\"trailers must be defined\");return this[kDefaultTrailers]=A,this}replyContentLength(){return this[kContentLength]=!0,this}},o(Te,\"MockInterceptor\"),Te);mockInterceptor.MockInterceptor=MockInterceptor$2,mockInterceptor.MockScope=MockScope;const{promisify:promisify$1}=require$$0__default$1,Client=client,{buildMockDispatch:buildMockDispatch$1}=mockUtils,{kDispatches:kDispatches$1,kMockAgent:kMockAgent$1,kClose:kClose$1,kOriginalClose:kOriginalClose$1,kOrigin:kOrigin$1,kOriginalDispatch:kOriginalDispatch$1,kConnected:kConnected$1}=mockSymbols,{MockInterceptor:MockInterceptor$1}=mockInterceptor,Symbols$1=symbols$4,{InvalidArgumentError:InvalidArgumentError$3}=errors$1,ut=class ut extends Client{constructor(A,t){if(super(A,t),!t||!t.agent||typeof t.agent.dispatch!=\"function\")throw new InvalidArgumentError$3(\"Argument opts.agent must implement Agent\");this[kMockAgent$1]=t.agent,this[kOrigin$1]=A,this[kDispatches$1]=[],this[kConnected$1]=1,this[kOriginalDispatch$1]=this.dispatch,this[kOriginalClose$1]=this.close.bind(this),this.dispatch=buildMockDispatch$1.call(this),this.close=this[kClose$1]}get[Symbols$1.kConnected](){return this[kConnected$1]}intercept(A){return new MockInterceptor$1(A,this[kDispatches$1])}async[kClose$1](){await promisify$1(this[kOriginalClose$1])(),this[kConnected$1]=0,this[kMockAgent$1][Symbols$1.kClients].delete(this[kOrigin$1])}};o(ut,\"MockClient\");let MockClient=ut;const{promisify}=require$$0__default$1,Pool=pool,{buildMockDispatch}=mockUtils,{kDispatches,kMockAgent,kClose,kOriginalClose,kOrigin,kOriginalDispatch,kConnected}=mockSymbols,{MockInterceptor}=mockInterceptor,Symbols=symbols$4,{InvalidArgumentError:InvalidArgumentError$2}=errors$1,dt=class dt extends Pool{constructor(A,t){if(super(A,t),!t||!t.agent||typeof t.agent.dispatch!=\"function\")throw new InvalidArgumentError$2(\"Argument opts.agent must implement Agent\");this[kMockAgent]=t.agent,this[kOrigin]=A,this[kDispatches]=[],this[kConnected]=1,this[kOriginalDispatch]=this.dispatch,this[kOriginalClose]=this.close.bind(this),this.dispatch=buildMockDispatch.call(this),this.close=this[kClose]}get[Symbols.kConnected](){return this[kConnected]}intercept(A){return new MockInterceptor(A,this[kDispatches])}async[kClose](){await promisify(this[kOriginalClose])(),this[kConnected]=0,this[kMockAgent][Symbols.kClients].delete(this[kOrigin])}};o(dt,\"MockPool\");let MockPool=dt;process.versions.icu,process.versions.icu;const globalDispatcher=Symbol.for(\"undici.globalDispatcher.1\"),{InvalidArgumentError:InvalidArgumentError$1}=errors$1,Agent$1=agent;getGlobalDispatcher$1()===void 0&&setGlobalDispatcher$1(new Agent$1);function setGlobalDispatcher$1(e){if(!e||typeof e.dispatch!=\"function\")throw new InvalidArgumentError$1(\"Argument agent must implement Agent\");Object.defineProperty(globalThis,globalDispatcher,{value:e,writable:!0,enumerable:!1,configurable:!1})}o(setGlobalDispatcher$1,\"setGlobalDispatcher$1\");function getGlobalDispatcher$1(){return globalThis[globalDispatcher]}o(getGlobalDispatcher$1,\"getGlobalDispatcher$1\");var global={setGlobalDispatcher:setGlobalDispatcher$1,getGlobalDispatcher:getGlobalDispatcher$1},headers,hasRequiredHeaders;function requireHeaders(){if(hasRequiredHeaders)return headers;hasRequiredHeaders=1;const{kHeadersList:e,kConstruct:A}=symbols$4,{kGuard:t}=requireSymbols$3(),{kEnumerableProperty:n}=util$m,{iteratorMixin:r,isValidHeaderName:s,isValidHeaderValue:i}=requireUtil$5(),{webidl:E}=requireWebidl(),Q=require$$0__default,C=require$$0__default$1,I=Symbol(\"headers map\"),a=Symbol(\"headers map sorted\");function f(M){return M===10||M===13||M===9||M===32}o(f,\"isHTTPWhiteSpaceCharCode\");function h(M){let B=0,D=M.length;for(;D>B&&f(M.charCodeAt(D-1));)--D;for(;D>B&&f(M.charCodeAt(B));)++B;return B===0&&D===M.length?M:M.substring(B,D)}o(h,\"headerValueNormalize\");function L(M,B){if(Array.isArray(B))for(let D=0;D<B.length;++D){const G=B[D];if(G.length!==2)throw E.errors.exception({header:\"Headers constructor\",message:`expected name/value pair to be length 2, found ${G.length}.`});c(M,G[0],G[1])}else if(typeof B==\"object\"&&B!==null){const D=Object.keys(B);for(let G=0;G<D.length;++G)c(M,D[G],B[D[G]])}else throw E.errors.conversionFailed({prefix:\"Headers constructor\",argument:\"Argument 1\",types:[\"sequence<sequence<ByteString>>\",\"record<ByteString, ByteString>\"]})}o(L,\"fill\");function c(M,B,D){if(D=h(D),s(B)){if(!i(D))throw E.errors.invalidArgument({prefix:\"Headers.append\",value:D,type:\"header value\"})}else throw E.errors.invalidArgument({prefix:\"Headers.append\",value:B,type:\"header name\"});if(M[t]===\"immutable\")throw new TypeError(\"immutable\");return M[t],M[e].append(B,D,!1)}o(c,\"appendHeader\");function l(M,B){return M[0]<B[0]?-1:1}o(l,\"compareHeaderName\");const w=class w{constructor(B){NA(this,\"cookies\",null);B instanceof w?(this[I]=new Map(B[I]),this[a]=B[a],this.cookies=B.cookies===null?null:[...B.cookies]):(this[I]=new Map(B),this[a]=null)}contains(B,D){return this[I].has(D?B:B.toLowerCase())}clear(){this[I].clear(),this[a]=null,this.cookies=null}append(B,D,G){this[a]=null;const g=G?B:B.toLowerCase(),d=this[I].get(g);if(d){const F=g===\"cookie\"?\"; \":\", \";this[I].set(g,{name:d.name,value:`${d.value}${F}${D}`})}else this[I].set(g,{name:B,value:D});g===\"set-cookie\"&&(this.cookies??(this.cookies=[])).push(D)}set(B,D,G){this[a]=null;const g=G?B:B.toLowerCase();g===\"set-cookie\"&&(this.cookies=[D]),this[I].set(g,{name:B,value:D})}delete(B,D){this[a]=null,D||(B=B.toLowerCase()),B===\"set-cookie\"&&(this.cookies=null),this[I].delete(B)}get(B,D){return this[I].get(D?B:B.toLowerCase())?.value??null}*[Symbol.iterator](){for(const{0:B,1:{value:D}}of this[I])yield[B,D]}get entries(){const B={};if(this[I].size)for(const{name:D,value:G}of this[I].values())B[D]=G;return B}toSortedArray(){const B=this[I].size,D=new Array(B);if(B<=32){if(B===0)return D;const G=this[I][Symbol.iterator](),g=G.next().value;D[0]=[g[0],g[1].value],Q(g[1].value!==null);for(let d=1,F=0,N=0,u=0,b=0,m,T;d<B;++d){for(T=G.next().value,m=D[d]=[T[0],T[1].value],Q(m[1]!==null),u=0,N=d;u<N;)b=u+(N-u>>1),D[b][0]<=m[0]?u=b+1:N=b;if(d!==b){for(F=d;F>u;)D[F]=D[--F];D[u]=m}}if(!G.next().done)throw new TypeError(\"Unreachable\");return D}else{let G=0;for(const{0:g,1:{value:d}}of this[I])D[G++]=[g,d],Q(d!==null);return D.sort(l)}}};o(w,\"HeadersList\");let S=w;const U=class U{constructor(B=void 0){B!==A&&(this[e]=new S,this[t]=\"none\",B!==void 0&&(B=E.converters.HeadersInit(B),L(this,B)))}append(B,D){return E.brandCheck(this,U),E.argumentLengthCheck(arguments,2,{header:\"Headers.append\"}),B=E.converters.ByteString(B),D=E.converters.ByteString(D),c(this,B,D)}delete(B){if(E.brandCheck(this,U),E.argumentLengthCheck(arguments,1,{header:\"Headers.delete\"}),B=E.converters.ByteString(B),!s(B))throw E.errors.invalidArgument({prefix:\"Headers.delete\",value:B,type:\"header name\"});if(this[t]===\"immutable\")throw new TypeError(\"immutable\");this[t],this[e].contains(B,!1)&&this[e].delete(B,!1)}get(B){if(E.brandCheck(this,U),E.argumentLengthCheck(arguments,1,{header:\"Headers.get\"}),B=E.converters.ByteString(B),!s(B))throw E.errors.invalidArgument({prefix:\"Headers.get\",value:B,type:\"header name\"});return this[e].get(B,!1)}has(B){if(E.brandCheck(this,U),E.argumentLengthCheck(arguments,1,{header:\"Headers.has\"}),B=E.converters.ByteString(B),!s(B))throw E.errors.invalidArgument({prefix:\"Headers.has\",value:B,type:\"header name\"});return this[e].contains(B,!1)}set(B,D){if(E.brandCheck(this,U),E.argumentLengthCheck(arguments,2,{header:\"Headers.set\"}),B=E.converters.ByteString(B),D=E.converters.ByteString(D),D=h(D),s(B)){if(!i(D))throw E.errors.invalidArgument({prefix:\"Headers.set\",value:D,type:\"header value\"})}else throw E.errors.invalidArgument({prefix:\"Headers.set\",value:B,type:\"header name\"});if(this[t]===\"immutable\")throw new TypeError(\"immutable\");this[t],this[e].set(B,D,!1)}getSetCookie(){E.brandCheck(this,U);const B=this[e].cookies;return B?[...B]:[]}get[a](){if(this[e][a])return this[e][a];const B=[],D=this[e].toSortedArray(),G=this[e].cookies;if(G===null||G.length===1)return this[e][a]=D;for(let g=0;g<D.length;++g){const{0:d,1:F}=D[g];if(d===\"set-cookie\")for(let N=0;N<G.length;++N)B.push([d,G[N]]);else B.push([d,F])}return this[e][a]=B}[C.inspect.custom](B,D){return D.depth??(D.depth=B),`Headers ${C.formatWithOptions(D,this[e].entries)}`}};o(U,\"Headers\");let k=U;return Object.defineProperty(k.prototype,C.inspect.custom,{enumerable:!1}),r(\"Headers\",k,a,0,1),Object.defineProperties(k.prototype,{append:n,delete:n,get:n,has:n,set:n,getSetCookie:n,[Symbol.toStringTag]:{value:\"Headers\",configurable:!0}}),E.converters.HeadersInit=function(M){if(E.util.Type(M)===\"Object\"){const B=Reflect.get(M,Symbol.iterator);return typeof B==\"function\"?E.converters[\"sequence<sequence<ByteString>>\"](M,B.bind(M)):E.converters[\"record<ByteString, ByteString>\"](M)}throw E.errors.conversionFailed({prefix:\"Headers constructor\",argument:\"Argument 1\",types:[\"sequence<sequence<ByteString>>\",\"record<ByteString, ByteString>\"]})},headers={fill:L,compareHeaderName:l,Headers:k,HeadersList:S},headers}o(requireHeaders,\"requireHeaders\");var response,hasRequiredResponse;function requireResponse(){if(hasRequiredResponse)return response;hasRequiredResponse=1;const{Headers:e,HeadersList:A,fill:t}=requireHeaders(),{extractBody:n,cloneBody:r,mixinBody:s}=requireBody(),i=util$m,E=require$$0__default$1,{kEnumerableProperty:Q}=i,{isValidReasonPhrase:C,isCancelled:I,isAborted:a,isBlobLike:f,serializeJavascriptValueToJSONString:h,isErrorLike:L,isomorphicEncode:c}=requireUtil$5(),{redirectStatusSet:l,nullBodyStatus:S}=requireConstants$2(),{kState:k,kHeaders:w,kGuard:U,kRealm:M}=requireSymbols$3(),{webidl:B}=requireWebidl(),{FormData:D}=requireFormdata(),{getGlobalOrigin:G}=requireGlobal(),{URLSerializer:g}=requireDataUrl(),{kHeadersList:d,kConstruct:F}=symbols$4,N=require$$0__default,{types:u}=require$$0__default$1,b=new TextEncoder(\"utf-8\"),$=class ${static error(){const q={settingsObject:{}};return X(Z(),\"immutable\",q)}static json(q,z={}){B.argumentLengthCheck(arguments,1,{header:\"Response.json\"}),z!==null&&(z=B.converters.ResponseInit(z));const rA=b.encode(h(q)),iA=n(rA),gA={settingsObject:{}},BA=X(v({}),\"response\",gA);return aA(BA,z,{body:iA[0],type:\"application/json\"}),BA}static redirect(q,z=302){const rA={settingsObject:{}};B.argumentLengthCheck(arguments,1,{header:\"Response.redirect\"}),q=B.converters.USVString(q),z=B.converters[\"unsigned short\"](z);let iA;try{iA=new URL(q,G())}catch(sA){throw new TypeError(`Failed to parse URL from ${q}`,{cause:sA})}if(!l.has(z))throw new RangeError(`Invalid status code ${z}`);const gA=X(v({}),\"immutable\",rA);gA[k].status=z;const BA=c(g(iA));return gA[k].headersList.append(\"location\",BA,!0),gA}constructor(q=null,z={}){if(q===F)return;q!==null&&(q=B.converters.BodyInit(q)),z=B.converters.ResponseInit(z),this[M]={settingsObject:{}},this[k]=v({}),this[w]=new e(F),this[w][U]=\"response\",this[w][d]=this[k].headersList,this[w][M]=this[M];let rA=null;if(q!=null){const[iA,gA]=n(q);rA={body:iA,type:gA}}aA(this,z,rA)}get type(){return B.brandCheck(this,$),this[k].type}get url(){B.brandCheck(this,$);const q=this[k].urlList,z=q[q.length-1]??null;return z===null?\"\":g(z,!0)}get redirected(){return B.brandCheck(this,$),this[k].urlList.length>1}get status(){return B.brandCheck(this,$),this[k].status}get ok(){return B.brandCheck(this,$),this[k].status>=200&&this[k].status<=299}get statusText(){return B.brandCheck(this,$),this[k].statusText}get headers(){return B.brandCheck(this,$),this[w]}get body(){return B.brandCheck(this,$),this[k].body?this[k].body.stream:null}get bodyUsed(){return B.brandCheck(this,$),!!this[k].body&&i.isDisturbed(this[k].body.stream)}clone(){if(B.brandCheck(this,$),this.bodyUsed||this.body?.locked)throw B.errors.exception({header:\"Response.clone\",message:\"Body has already been consumed.\"});const q=T(this[k]);return X(q,this[w][U],this[M])}[E.inspect.custom](q,z){z.depth===null&&(z.depth=2),z.colors??(z.colors=!0);const rA={status:this.status,statusText:this.statusText,headers:this.headers,body:this.body,bodyUsed:this.bodyUsed,ok:this.ok,redirected:this.redirected,type:this.type,url:this.url};return`Response ${E.formatWithOptions(z,rA)}`}};o($,\"Response\");let m=$;s(m),Object.defineProperties(m.prototype,{type:Q,url:Q,status:Q,ok:Q,redirected:Q,statusText:Q,headers:Q,clone:Q,body:Q,bodyUsed:Q,[Symbol.toStringTag]:{value:\"Response\",configurable:!0}}),Object.defineProperties(m,{json:Q,redirect:Q,error:Q});function T(V){if(V.internalResponse)return K(T(V.internalResponse),V.type);const q=v({...V,body:null});return V.body!=null&&(q.body=r(V.body)),q}o(T,\"cloneResponse\");function v(V){return{aborted:!1,rangeRequested:!1,timingAllowPassed:!1,requestIncludesCredentials:!1,type:\"default\",status:200,timingInfo:null,cacheState:\"\",statusText:\"\",...V,headersList:V?.headersList?new A(V?.headersList):new A,urlList:V?.urlList?[...V.urlList]:[]}}o(v,\"makeResponse\");function Z(V){const q=L(V);return v({type:\"error\",status:0,error:q?V:new Error(V&&String(V)),aborted:V&&V.name===\"AbortError\"})}o(Z,\"makeNetworkError\");function P(V){return V.type===\"error\"&&V.status===0}o(P,\"isNetworkError\");function AA(V,q){return q={internalResponse:V,...q},new Proxy(V,{get(z,rA){return rA in q?q[rA]:z[rA]},set(z,rA,iA){return N(!(rA in q)),z[rA]=iA,!0}})}o(AA,\"makeFilteredResponse\");function K(V,q){if(q===\"basic\")return AA(V,{type:\"basic\",headersList:V.headersList});if(q===\"cors\")return AA(V,{type:\"cors\",headersList:V.headersList});if(q===\"opaque\")return AA(V,{type:\"opaque\",urlList:Object.freeze([]),status:0,statusText:\"\",body:null});if(q===\"opaqueredirect\")return AA(V,{type:\"opaqueredirect\",status:0,statusText:\"\",headersList:[],body:null});N(!1)}o(K,\"filterResponse\");function tA(V,q=null){return N(I(V)),a(V)?Z(Object.assign(new DOMException(\"The operation was aborted.\",\"AbortError\"),{cause:q})):Z(Object.assign(new DOMException(\"Request was cancelled.\"),{cause:q}))}o(tA,\"makeAppropriateNetworkError\");function aA(V,q,z){if(q.status!==null&&(q.status<200||q.status>599))throw new RangeError('init[\"status\"] must be in the range of 200 to 599, inclusive.');if(\"statusText\"in q&&q.statusText!=null&&!C(String(q.statusText)))throw new TypeError(\"Invalid statusText\");if(\"status\"in q&&q.status!=null&&(V[k].status=q.status),\"statusText\"in q&&q.statusText!=null&&(V[k].statusText=q.statusText),\"headers\"in q&&q.headers!=null&&t(V[w],q.headers),z){if(S.includes(V.status))throw B.errors.exception({header:\"Response constructor\",message:`Invalid response status code ${V.status}`});V[k].body=z.body,z.type!=null&&!V[k].headersList.contains(\"content-type\",!0)&&V[k].headersList.append(\"content-type\",z.type,!0)}}o(aA,\"initializeResponse\");function X(V,q,z){const rA=new m(F);return rA[k]=V,rA[M]=z,rA[w]=new e(F),rA[w][d]=V.headersList,rA[w][U]=q,rA[w][M]=z,rA}return o(X,\"fromInnerResponse\"),B.converters.ReadableStream=B.interfaceConverter(ReadableStream),B.converters.FormData=B.interfaceConverter(D),B.converters.URLSearchParams=B.interfaceConverter(URLSearchParams),B.converters.XMLHttpRequestBodyInit=function(V){return typeof V==\"string\"?B.converters.USVString(V):f(V)?B.converters.Blob(V,{strict:!1}):ArrayBuffer.isView(V)||u.isArrayBuffer(V)?B.converters.BufferSource(V):i.isFormDataLike(V)?B.converters.FormData(V,{strict:!1}):V instanceof URLSearchParams?B.converters.URLSearchParams(V):B.converters.DOMString(V)},B.converters.BodyInit=function(V){return V instanceof ReadableStream?B.converters.ReadableStream(V):V?.[Symbol.asyncIterator]?V:B.converters.XMLHttpRequestBodyInit(V)},B.converters.ResponseInit=B.dictionaryConverter([{key:\"status\",converter:B.converters[\"unsigned short\"],defaultValue:200},{key:\"statusText\",converter:B.converters.ByteString,defaultValue:\"\"},{key:\"headers\",converter:B.converters.HeadersInit}]),response={isNetworkError:P,makeNetworkError:Z,makeResponse:v,makeAppropriateNetworkError:tA,filterResponse:K,Response:m,cloneResponse:T,fromInnerResponse:X},response}o(requireResponse,\"requireResponse\");var dispatcherWeakref,hasRequiredDispatcherWeakref;function requireDispatcherWeakref(){if(hasRequiredDispatcherWeakref)return dispatcherWeakref;hasRequiredDispatcherWeakref=1;const{kConnected:e,kSize:A}=symbols$4,r=class r{constructor(E){this.value=E}deref(){return this.value[e]===0&&this.value[A]===0?void 0:this.value}};o(r,\"CompatWeakRef\");let t=r;const s=class s{constructor(E){this.finalizer=E}register(E,Q){E.on&&E.on(\"disconnect\",()=>{E[e]===0&&E[A]===0&&this.finalizer(Q)})}unregister(E){}};o(s,\"CompatFinalizer\");let n=s;return dispatcherWeakref=o(function(){return process.env.NODE_V8_COVERAGE?{WeakRef:t,FinalizationRegistry:n}:{WeakRef,FinalizationRegistry}},\"dispatcherWeakref\"),dispatcherWeakref}o(requireDispatcherWeakref,\"requireDispatcherWeakref\");var request,hasRequiredRequest;function requireRequest(){if(hasRequiredRequest)return request;hasRequiredRequest=1;const{extractBody:e,mixinBody:A,cloneBody:t}=requireBody(),{Headers:n,fill:r,HeadersList:s}=requireHeaders(),{FinalizationRegistry:i}=requireDispatcherWeakref()(),E=util$m,Q=require$$0__default$1,{isValidHTTPToken:C,sameOrigin:I,normalizeMethod:a,makePolicyContainer:f,normalizeMethodRecord:h}=requireUtil$5(),{forbiddenMethodsSet:L,corsSafeListedMethodsSet:c,referrerPolicy:l,requestRedirect:S,requestMode:k,requestCredentials:w,requestCache:U,requestDuplex:M}=requireConstants$2(),{kEnumerableProperty:B}=E,{kHeaders:D,kSignal:G,kState:g,kGuard:d,kRealm:F,kDispatcher:N}=requireSymbols$3(),{webidl:u}=requireWebidl(),{getGlobalOrigin:b}=requireGlobal(),{URLSerializer:m}=requireDataUrl(),{kHeadersList:T,kConstruct:v}=symbols$4,Z=require$$0__default,{getMaxListeners:P,setMaxListeners:AA,getEventListeners:K,defaultMaxListeners:tA}=require$$0__default$3,aA=Symbol(\"abortController\"),X=new i(({signal:gA,abort:BA})=>{gA.removeEventListener(\"abort\",BA)});let $=!1;const iA=class iA{constructor(BA,sA={}){if(BA===v)return;u.argumentLengthCheck(arguments,1,{header:\"Request constructor\"}),BA=u.converters.RequestInfo(BA),sA=u.converters.RequestInit(sA),this[F]={settingsObject:{baseUrl:b(),get origin(){return this.baseUrl?.origin},policyContainer:f()}};let eA=null,yA=null;const WA=this[F].settingsObject.baseUrl;let wA=null;if(typeof BA==\"string\"){this[N]=sA.dispatcher;let IA;try{IA=new URL(BA,WA)}catch(hA){throw new TypeError(\"Failed to parse URL from \"+BA,{cause:hA})}if(IA.username||IA.password)throw new TypeError(\"Request cannot be constructed from a URL that includes credentials: \"+BA);eA=q({urlList:[IA]}),yA=\"cors\"}else this[N]=sA.dispatcher||BA[N],Z(BA instanceof iA),eA=BA[g],wA=BA[G];const qA=this[F].settingsObject.origin;let MA=\"client\";if(eA.window?.constructor?.name===\"EnvironmentSettingsObject\"&&I(eA.window,qA)&&(MA=eA.window),sA.window!=null)throw new TypeError(`'window' option '${MA}' must be null`);\"window\"in sA&&(MA=\"no-window\"),eA=q({method:eA.method,headersList:eA.headersList,unsafeRequest:eA.unsafeRequest,client:this[F].settingsObject,window:MA,priority:eA.priority,origin:eA.origin,referrer:eA.referrer,referrerPolicy:eA.referrerPolicy,mode:eA.mode,credentials:eA.credentials,cache:eA.cache,redirect:eA.redirect,integrity:eA.integrity,keepalive:eA.keepalive,reloadNavigation:eA.reloadNavigation,historyNavigation:eA.historyNavigation,urlList:[...eA.urlList]});const HA=Object.keys(sA).length!==0;if(HA&&(eA.mode===\"navigate\"&&(eA.mode=\"same-origin\"),eA.reloadNavigation=!1,eA.historyNavigation=!1,eA.origin=\"client\",eA.referrer=\"client\",eA.referrerPolicy=\"\",eA.url=eA.urlList[eA.urlList.length-1],eA.urlList=[eA.url]),sA.referrer!==void 0){const IA=sA.referrer;if(IA===\"\")eA.referrer=\"no-referrer\";else{let hA;try{hA=new URL(IA,WA)}catch(SA){throw new TypeError(`Referrer \"${IA}\" is not a valid URL.`,{cause:SA})}hA.protocol===\"about:\"&&hA.hostname===\"client\"||qA&&!I(hA,this[F].settingsObject.baseUrl)?eA.referrer=\"client\":eA.referrer=hA}}sA.referrerPolicy!==void 0&&(eA.referrerPolicy=sA.referrerPolicy);let pA;if(sA.mode!==void 0?pA=sA.mode:pA=yA,pA===\"navigate\")throw u.errors.exception({header:\"Request constructor\",message:\"invalid request mode navigate.\"});if(pA!=null&&(eA.mode=pA),sA.credentials!==void 0&&(eA.credentials=sA.credentials),sA.cache!==void 0&&(eA.cache=sA.cache),eA.cache===\"only-if-cached\"&&eA.mode!==\"same-origin\")throw new TypeError(\"'only-if-cached' can be set only with 'same-origin' mode\");if(sA.redirect!==void 0&&(eA.redirect=sA.redirect),sA.integrity!=null&&(eA.integrity=String(sA.integrity)),sA.keepalive!==void 0&&(eA.keepalive=!!sA.keepalive),sA.method!==void 0){let IA=sA.method;const hA=h[IA];if(hA!==void 0)eA.method=hA;else{if(!C(IA))throw new TypeError(`'${IA}' is not a valid HTTP method.`);if(L.has(IA.toUpperCase()))throw new TypeError(`'${IA}' HTTP method is unsupported.`);IA=a(IA),eA.method=IA}!$&&eA.method===\"patch\"&&(process.emitWarning(\"Using `patch` is highly likely to result in a `405 Method Not Allowed`. `PATCH` is much more likely to succeed.\",{code:\"UNDICI-FETCH-patch\"}),$=!0)}sA.signal!==void 0&&(wA=sA.signal),this[g]=eA;const YA=new AbortController;if(this[G]=YA.signal,this[G][F]=this[F],wA!=null){if(!wA||typeof wA.aborted!=\"boolean\"||typeof wA.addEventListener!=\"function\")throw new TypeError(\"Failed to construct 'Request': member signal is not of type AbortSignal.\");if(wA.aborted)YA.abort(wA.reason);else{this[aA]=YA;const IA=new WeakRef(YA),hA=o(function(){const SA=IA.deref();SA!==void 0&&(X.unregister(hA),this.removeEventListener(\"abort\",hA),SA.abort(this.reason))},\"abort\");try{(typeof P==\"function\"&&P(wA)===tA||K(wA,\"abort\").length>=tA)&&AA(100,wA)}catch{}E.addAbortListener(wA,hA),X.register(YA,{signal:wA,abort:hA},hA)}}if(this[D]=new n(v),this[D][T]=eA.headersList,this[D][d]=\"request\",this[D][F]=this[F],pA===\"no-cors\"){if(!c.has(eA.method))throw new TypeError(`'${eA.method} is unsupported in no-cors mode.`);this[D][d]=\"request-no-cors\"}if(HA){const IA=this[D][T],hA=sA.headers!==void 0?sA.headers:new s(IA);if(IA.clear(),hA instanceof s){for(const[SA,PA]of hA)IA.append(SA,PA);IA.cookies=hA.cookies}else r(this[D],hA)}const UA=BA instanceof iA?BA[g].body:null;if((sA.body!=null||UA!=null)&&(eA.method===\"GET\"||eA.method===\"HEAD\"))throw new TypeError(\"Request with GET/HEAD method cannot have body.\");let JA=null;if(sA.body!=null){const[IA,hA]=e(sA.body,eA.keepalive);JA=IA,hA&&!this[D][T].contains(\"content-type\",!0)&&this[D].append(\"content-type\",hA)}const VA=JA??UA;if(VA!=null&&VA.source==null){if(JA!=null&&sA.duplex==null)throw new TypeError(\"RequestInit: duplex option is required when sending a body.\");if(eA.mode!==\"same-origin\"&&eA.mode!==\"cors\")throw new TypeError('If request is made from ReadableStream, mode should be \"same-origin\" or \"cors\"');eA.useCORSPreflightFlag=!0}let OA=VA;if(JA==null&&UA!=null){if(E.isDisturbed(UA.stream)||UA.stream.locked)throw new TypeError(\"Cannot construct a Request with a Request object that has already been used.\");const IA=new TransformStream;UA.stream.pipeThrough(IA),OA={source:UA.source,length:UA.length,stream:IA.readable}}this[g].body=OA}get method(){return u.brandCheck(this,iA),this[g].method}get url(){return u.brandCheck(this,iA),m(this[g].url)}get headers(){return u.brandCheck(this,iA),this[D]}get destination(){return u.brandCheck(this,iA),this[g].destination}get referrer(){return u.brandCheck(this,iA),this[g].referrer===\"no-referrer\"?\"\":this[g].referrer===\"client\"?\"about:client\":this[g].referrer.toString()}get referrerPolicy(){return u.brandCheck(this,iA),this[g].referrerPolicy}get mode(){return u.brandCheck(this,iA),this[g].mode}get credentials(){return this[g].credentials}get cache(){return u.brandCheck(this,iA),this[g].cache}get redirect(){return u.brandCheck(this,iA),this[g].redirect}get integrity(){return u.brandCheck(this,iA),this[g].integrity}get keepalive(){return u.brandCheck(this,iA),this[g].keepalive}get isReloadNavigation(){return u.brandCheck(this,iA),this[g].reloadNavigation}get isHistoryNavigation(){return u.brandCheck(this,iA),this[g].historyNavigation}get signal(){return u.brandCheck(this,iA),this[G]}get body(){return u.brandCheck(this,iA),this[g].body?this[g].body.stream:null}get bodyUsed(){return u.brandCheck(this,iA),!!this[g].body&&E.isDisturbed(this[g].body.stream)}get duplex(){return u.brandCheck(this,iA),\"half\"}clone(){if(u.brandCheck(this,iA),this.bodyUsed||this.body?.locked)throw new TypeError(\"unusable\");const BA=z(this[g]),sA=new AbortController;return this.signal.aborted?sA.abort(this.signal.reason):E.addAbortListener(this.signal,()=>{sA.abort(this.signal.reason)}),rA(BA,sA.signal,this[D][d],this[F])}[Q.inspect.custom](BA,sA){sA.depth===null&&(sA.depth=2),sA.colors??(sA.colors=!0);const eA={method:this.method,url:this.url,headers:this.headers,destination:this.destination,referrer:this.referrer,referrerPolicy:this.referrerPolicy,mode:this.mode,credentials:this.credentials,cache:this.cache,redirect:this.redirect,integrity:this.integrity,keepalive:this.keepalive,isReloadNavigation:this.isReloadNavigation,isHistoryNavigation:this.isHistoryNavigation,signal:this.signal};return`Request ${Q.formatWithOptions(sA,eA)}`}};o(iA,\"Request\");let V=iA;A(V);function q(gA){const BA={method:\"GET\",localURLsOnly:!1,unsafeRequest:!1,body:null,client:null,reservedClient:null,replacesClientId:\"\",window:\"client\",keepalive:!1,serviceWorkers:\"all\",initiator:\"\",destination:\"\",priority:null,origin:\"client\",policyContainer:\"client\",referrer:\"client\",referrerPolicy:\"\",mode:\"no-cors\",useCORSPreflightFlag:!1,credentials:\"same-origin\",useCredentials:!1,cache:\"default\",redirect:\"follow\",integrity:\"\",cryptoGraphicsNonceMetadata:\"\",parserMetadata:\"\",reloadNavigation:!1,historyNavigation:!1,userActivation:!1,taintedOrigin:!1,redirectCount:0,responseTainting:\"basic\",preventNoCacheCacheControlHeaderModification:!1,done:!1,timingAllowFailed:!1,...gA,headersList:gA.headersList?new s(gA.headersList):new s};return BA.url=BA.urlList[0],BA}o(q,\"makeRequest\");function z(gA){const BA=q({...gA,body:null});return gA.body!=null&&(BA.body=t(gA.body)),BA}o(z,\"cloneRequest\");function rA(gA,BA,sA,eA){const yA=new V(v);return yA[g]=gA,yA[F]=eA,yA[G]=BA,yA[G][F]=eA,yA[D]=new n(v),yA[D][T]=gA.headersList,yA[D][d]=sA,yA[D][F]=eA,yA}return o(rA,\"fromInnerRequest\"),Object.defineProperties(V.prototype,{method:B,url:B,headers:B,redirect:B,clone:B,signal:B,duplex:B,destination:B,body:B,bodyUsed:B,isHistoryNavigation:B,isReloadNavigation:B,keepalive:B,integrity:B,cache:B,credentials:B,attribute:B,referrerPolicy:B,referrer:B,mode:B,[Symbol.toStringTag]:{value:\"Request\",configurable:!0}}),u.converters.Request=u.interfaceConverter(V),u.converters.RequestInfo=function(gA){return typeof gA==\"string\"?u.converters.USVString(gA):gA instanceof V?u.converters.Request(gA):u.converters.USVString(gA)},u.converters.AbortSignal=u.interfaceConverter(AbortSignal),u.converters.RequestInit=u.dictionaryConverter([{key:\"method\",converter:u.converters.ByteString},{key:\"headers\",converter:u.converters.HeadersInit},{key:\"body\",converter:u.nullableConverter(u.converters.BodyInit)},{key:\"referrer\",converter:u.converters.USVString},{key:\"referrerPolicy\",converter:u.converters.DOMString,allowedValues:l},{key:\"mode\",converter:u.converters.DOMString,allowedValues:k},{key:\"credentials\",converter:u.converters.DOMString,allowedValues:w},{key:\"cache\",converter:u.converters.DOMString,allowedValues:U},{key:\"redirect\",converter:u.converters.DOMString,allowedValues:S},{key:\"integrity\",converter:u.converters.DOMString},{key:\"keepalive\",converter:u.converters.boolean},{key:\"signal\",converter:u.nullableConverter(gA=>u.converters.AbortSignal(gA,{strict:!1}))},{key:\"window\",converter:u.converters.any},{key:\"duplex\",converter:u.converters.DOMString,allowedValues:M},{key:\"dispatcher\",converter:u.converters.any}]),request={Request:V,makeRequest:q,fromInnerRequest:rA,cloneRequest:z},request}o(requireRequest,\"requireRequest\");var fetch_1,hasRequiredFetch;function requireFetch(){if(hasRequiredFetch)return fetch_1;hasRequiredFetch=1;const{makeNetworkError:e,makeAppropriateNetworkError:A,filterResponse:t,makeResponse:n,fromInnerResponse:r}=requireResponse(),{HeadersList:s}=requireHeaders(),{Request:i,cloneRequest:E}=requireRequest(),Q=zlib__default,{bytesMatch:C,makePolicyContainer:I,clonePolicyContainer:a,requestBadPort:f,TAOCheck:h,appendRequestOriginHeader:L,responseLocationURL:c,requestCurrentURL:l,setRequestReferrerPolicyOnRedirect:S,tryUpgradeRequestToAPotentiallyTrustworthyURL:k,createOpaqueTimingInfo:w,appendFetchMetadata:U,corsCheck:M,crossOriginResourcePolicyCheck:B,determineRequestsReferrer:D,coarsenedSharedCurrentTime:G,createDeferredPromise:g,isBlobLike:d,sameOrigin:F,isCancelled:N,isAborted:u,isErrorLike:b,fullyReadBody:m,readableStreamClose:T,isomorphicEncode:v,urlIsLocal:Z,urlIsHttpHttpsScheme:P,urlHasHttpsScheme:AA,clampAndCoarsenConnectionTimingInfo:K,simpleRangeHeaderValue:tA,buildContentRange:aA,createInflate:X,extractMimeType:$}=requireUtil$5(),{kState:V,kDispatcher:q}=requireSymbols$3(),z=require$$0__default,{safelyExtractBody:rA,extractBody:iA}=requireBody(),{redirectStatusSet:gA,nullBodyStatus:BA,safeMethodsSet:sA,requestBodyHeader:eA,subresourceSet:yA}=requireConstants$2(),WA=require$$0__default$3,{Readable:wA,pipeline:qA}=Stream__default,{addAbortListener:MA,isErrored:HA,isReadable:pA,nodeMajor:YA,nodeMinor:UA,bufferToLowerCasedHeaderName:JA}=util$m,{dataURLProcessor:VA,serializeAMimeType:OA,minimizeSupportedMimeType:IA}=requireDataUrl(),{getGlobalDispatcher:hA}=global,{webidl:SA}=requireWebidl(),{STATUS_CODES:PA}=http__default,Pe=[\"GET\",\"HEAD\"],ee=typeof __UNDICI_IS_NODE__<\"u\"||typeof esbuildDetection<\"u\"?\"node\":\"undici\";let ZA;const nA=class nA extends WA{constructor(O){super(),this.dispatcher=O,this.connection=null,this.dump=!1,this.state=\"ongoing\"}terminate(O){this.state===\"ongoing\"&&(this.state=\"terminated\",this.connection?.destroy(O),this.emit(\"terminated\",O))}abort(O){this.state===\"ongoing\"&&(this.state=\"aborted\",O||(O=new DOMException(\"The operation was aborted.\",\"AbortError\")),this.serializedAbortReason=O,this.connection?.destroy(O),this.emit(\"terminated\",O))}};o(nA,\"Fetch\");let XA=nA;function Ze(R,O=void 0){SA.argumentLengthCheck(arguments,1,{header:\"globalThis.fetch\"});const H=g();let J;try{J=new i(R,O)}catch(oA){return H.reject(oA),H.promise}const _=J[V];if(J.signal.aborted)return te(H,_,null,J.signal.reason),H.promise;_.client.globalObject?.constructor?.name===\"ServiceWorkerGlobalScope\"&&(_.serviceWorkers=\"none\");let QA=null;const lA=null;let uA=!1,cA=null;return MA(J.signal,()=>{uA=!0,z(cA!=null),cA.abort(J.signal.reason),te(H,_,QA,J.signal.reason)}),cA=Ve({request:_,processResponseEndOfBody:o(oA=>KA(oA,\"fetch\"),\"handleFetchDone\"),processResponse:o(oA=>{if(!uA){if(oA.aborted){te(H,_,QA,cA.serializedAbortReason);return}if(oA.type===\"error\"){H.reject(new TypeError(\"fetch failed\",{cause:oA.error}));return}QA=r(oA,\"immutable\",lA),H.resolve(QA)}},\"processResponse\"),dispatcher:J[q]}),H.promise}o(Ze,\"fetch\");function KA(R,O=\"other\"){if(R.type===\"error\"&&R.aborted||!R.urlList?.length)return;const H=R.urlList[0];let J=R.timingInfo,_=R.cacheState;P(H)&&J!==null&&(R.timingAllowPassed||(J=w({startTime:J.startTime}),_=\"\"),J.endTime=G(),R.timingInfo=J,He(J,H.href,O,globalThis,_))}o(KA,\"finalizeAndReportTiming\");const He=YA>18||YA===18&&UA>=2?performance.markResourceTiming:()=>{};function te(R,O,H,J){if(R.reject(J),O.body!=null&&pA(O.body?.stream)&&O.body.stream.cancel(J).catch(x=>{if(x.code!==\"ERR_INVALID_STATE\")throw x}),H==null)return;const _=H[V];_.body!=null&&pA(_.body?.stream)&&_.body.stream.cancel(J).catch(x=>{if(x.code!==\"ERR_INVALID_STATE\")throw x})}o(te,\"abortFetch\");function Ve({request:R,processRequestBodyChunkLength:O,processRequestEndOfBody:H,processResponse:J,processResponseEndOfBody:_,processResponseConsumeBody:x,useParallelQueue:QA=!1,dispatcher:lA=hA()}){z(lA);let uA=null,cA=!1;R.client!=null&&(uA=R.client.globalObject,cA=R.client.crossOriginIsolatedCapability);const fA=G(cA),mA=w({startTime:fA}),oA={controller:new XA(lA),request:R,timingInfo:mA,processRequestBodyChunkLength:O,processRequestEndOfBody:H,processResponse:J,processResponseConsumeBody:x,processResponseEndOfBody:_,taskDestination:uA,crossOriginIsolatedCapability:cA};return z(!R.body||R.body.stream),R.window===\"client\"&&(R.window=R.client?.globalObject?.constructor?.name===\"Window\"?R.client:\"no-window\"),R.origin===\"client\"&&(R.origin=R.client?.origin),R.policyContainer===\"client\"&&(R.client!=null?R.policyContainer=a(R.client.policyContainer):R.policyContainer=I()),R.headersList.contains(\"accept\",!0)||R.headersList.append(\"accept\",\"*/*\",!0),R.headersList.contains(\"accept-language\",!0)||R.headersList.append(\"accept-language\",\"*\",!0),R.priority,yA.has(R.destination),re(oA).catch(RA=>{oA.controller.terminate(RA)}),oA.controller}o(Ve,\"fetching\");async function re(R,O=!1){const H=R.request;let J=null;if(H.localURLsOnly&&!Z(l(H))&&(J=e(\"local URLs only\")),k(H),f(H)===\"blocked\"&&(J=e(\"bad port\")),H.referrerPolicy===\"\"&&(H.referrerPolicy=H.policyContainer.referrerPolicy),H.referrer!==\"no-referrer\"&&(H.referrer=D(H)),J===null&&(J=await(async()=>{const x=l(H);return F(x,H.url)&&H.responseTainting===\"basic\"||x.protocol===\"data:\"||H.mode===\"navigate\"||H.mode===\"websocket\"?(H.responseTainting=\"basic\",await ve(R)):H.mode===\"same-origin\"?e('request mode cannot be \"same-origin\"'):H.mode===\"no-cors\"?H.redirect!==\"follow\"?e('redirect mode cannot be \"follow\" for \"no-cors\" request'):(H.responseTainting=\"opaque\",await ve(R)):P(l(H))?(H.responseTainting=\"cors\",await y(R)):e(\"URL scheme must be a HTTP(S) scheme\")})()),O)return J;J.status!==0&&!J.internalResponse&&(H.responseTainting,H.responseTainting===\"basic\"?J=t(J,\"basic\"):H.responseTainting===\"cors\"?J=t(J,\"cors\"):H.responseTainting===\"opaque\"?J=t(J,\"opaque\"):z(!1));let _=J.status===0?J:J.internalResponse;if(_.urlList.length===0&&_.urlList.push(...H.urlList),H.timingAllowFailed||(J.timingAllowPassed=!0),J.type===\"opaque\"&&_.status===206&&_.rangeRequested&&!H.headers.contains(\"range\",!0)&&(J=_=e()),J.status!==0&&(H.method===\"HEAD\"||H.method===\"CONNECT\"||BA.includes(_.status))&&(_.body=null,R.controller.dump=!0),H.integrity){const x=o(lA=>vA(R,e(lA)),\"processBodyError\");if(H.responseTainting===\"opaque\"||J.body==null){x(J.error);return}const QA=o(lA=>{if(!C(lA,H.integrity)){x(\"integrity mismatch\");return}J.body=rA(lA)[0],vA(R,J)},\"processBody\");await m(J.body,QA,x)}else vA(R,J)}o(re,\"mainFetch\");function ve(R){if(N(R)&&R.request.redirectCount===0)return Promise.resolve(A(R));const{request:O}=R,{protocol:H}=l(O);switch(H){case\"about:\":return Promise.resolve(e(\"about scheme is not supported\"));case\"blob:\":{ZA||(ZA=require$$6__default.resolveObjectURL);const J=l(O);if(J.search.length!==0)return Promise.resolve(e(\"NetworkError when attempting to fetch resource.\"));const _=ZA(J.toString());if(O.method!==\"GET\"||!d(_))return Promise.resolve(e(\"invalid method\"));const x=n(),QA=_.size,lA=v(`${QA}`),uA=_.type;if(O.headersList.contains(\"range\",!0)){x.rangeRequested=!0;const cA=O.headersList.get(\"range\",!0),fA=tA(cA,!0);if(fA===\"failure\")return Promise.resolve(e(\"failed to fetch the data URL\"));let{rangeStartValue:mA,rangeEndValue:oA}=fA;if(mA===null)mA=QA-oA,oA=mA+oA-1;else{if(mA>=QA)return Promise.resolve(e(\"Range start is greater than the blob's size.\"));(oA===null||oA>=QA)&&(oA=QA-1)}const RA=_.slice(mA,oA,uA),bA=iA(RA);x.body=bA[0];const dA=v(`${RA.size}`),GA=aA(mA,oA,QA);x.status=206,x.statusText=\"Partial Content\",x.headersList.set(\"content-length\",dA,!0),x.headersList.set(\"content-type\",uA,!0),x.headersList.set(\"content-range\",GA,!0)}else{const cA=iA(_);x.statusText=\"OK\",x.body=cA[0],x.headersList.set(\"content-length\",lA,!0),x.headersList.set(\"content-type\",uA,!0)}return Promise.resolve(x)}case\"data:\":{const J=l(O),_=VA(J);if(_===\"failure\")return Promise.resolve(e(\"failed to fetch the data URL\"));const x=OA(_.mimeType);return Promise.resolve(n({statusText:\"OK\",headersList:[[\"content-type\",{name:\"Content-Type\",value:x}]],body:rA(_.body)[0]}))}case\"file:\":return Promise.resolve(e(\"not implemented... yet...\"));case\"http:\":case\"https:\":return y(R).catch(J=>e(J));default:return Promise.resolve(e(\"unknown scheme\"))}}o(ve,\"schemeFetch\");function Xe(R,O){R.request.done=!0,R.processResponseDone!=null&&queueMicrotask(()=>R.processResponseDone(O))}o(Xe,\"finalizeResponse\");function vA(R,O){let H=R.timingInfo;const J=o(()=>{const x=Date.now();R.request.destination===\"document\"&&(R.controller.fullTimingInfo=H),R.controller.reportTimingSteps=()=>{if(R.request.url.protocol!==\"https:\")return;H.endTime=x;let lA=O.cacheState;const uA=O.bodyInfo;O.timingAllowPassed||(H=w(H),lA=\"\");let cA=0;if(R.request.mode!==\"navigator\"||!O.hasCrossOriginRedirects){cA=O.status;const fA=$(O.headersList);fA!==\"failure\"&&(uA.contentType=IA(fA))}R.request.initiatorType!=null&&He(H,R.request.url.href,R.request.initiatorType,globalThis,lA,uA,cA)};const QA=o(()=>{R.request.done=!0,R.processResponseEndOfBody!=null&&queueMicrotask(()=>R.processResponseEndOfBody(O)),R.request.initiatorType!=null&&R.controller.reportTimingSteps()},\"processResponseEndOfBodyTask\");queueMicrotask(()=>QA())},\"processResponseEndOfBody\");R.processResponse!=null&&queueMicrotask(()=>R.processResponse(O));const _=O.type===\"error\"?O:O.internalResponse??O;if(_.body==null)J();else{const x=new TransformStream({start(){},transform(lA,uA){uA.enqueue(lA)},flush:J});_.body.stream.pipeThrough(x);const QA=new ReadableStream({readableStream:x.readable,async start(){this._bodyReader=this.readableStream.getReader()},async pull(lA){for(;lA.desiredSize>=0;){const{done:uA,value:cA}=await this._bodyReader.read();if(uA){queueMicrotask(()=>T(lA));break}lA.enqueue(cA)}},type:\"bytes\"});_.body.stream=QA}}o(vA,\"fetchFinale\");async function y(R){const O=R.request;let H=null,J=null;const _=R.timingInfo;if(O.serviceWorkers,H===null){if(O.redirect===\"follow\"&&(O.serviceWorkers=\"none\"),J=H=await W(R),O.responseTainting===\"cors\"&&M(O,H)===\"failure\")return e(\"cors failure\");h(O,H)===\"failure\"&&(O.timingAllowFailed=!0)}return(O.responseTainting===\"opaque\"||H.type===\"opaque\")&&B(O.origin,O.client,O.destination,J)===\"blocked\"?e(\"blocked\"):(gA.has(J.status)&&(O.redirect!==\"manual\"&&R.controller.connection.destroy(void 0,!1),O.redirect===\"error\"?H=e(\"unexpected redirect\"):O.redirect===\"manual\"?H=J:O.redirect===\"follow\"?H=await Y(R,H):z(!1)),H.timingInfo=_,H)}o(y,\"httpFetch\");function Y(R,O){const H=R.request,J=O.internalResponse?O.internalResponse:O;let _;try{if(_=c(J,l(H).hash),_==null)return O}catch(QA){return Promise.resolve(e(QA))}if(!P(_))return Promise.resolve(e(\"URL scheme must be a HTTP(S) scheme\"));if(H.redirectCount===20)return Promise.resolve(e(\"redirect count exceeded\"));if(H.redirectCount+=1,H.mode===\"cors\"&&(_.username||_.password)&&!F(H,_))return Promise.resolve(e('cross origin not allowed for request mode \"cors\"'));if(H.responseTainting===\"cors\"&&(_.username||_.password))return Promise.resolve(e('URL cannot contain credentials for request mode \"cors\"'));if(J.status!==303&&H.body!=null&&H.body.source==null)return Promise.resolve(e());if([301,302].includes(J.status)&&H.method===\"POST\"||J.status===303&&!Pe.includes(H.method)){H.method=\"GET\",H.body=null;for(const QA of eA)H.headersList.delete(QA)}F(l(H),_)||(H.headersList.delete(\"authorization\",!0),H.headersList.delete(\"proxy-authorization\",!0),H.headersList.delete(\"cookie\",!0),H.headersList.delete(\"host\",!0)),H.body!=null&&(z(H.body.source!=null),H.body=rA(H.body.source)[0]);const x=R.timingInfo;return x.redirectEndTime=x.postRedirectStartTime=G(R.crossOriginIsolatedCapability),x.redirectStartTime===0&&(x.redirectStartTime=x.startTime),H.urlList.push(_),S(H,J),re(R,!0)}o(Y,\"httpRedirectFetch\");async function W(R,O=!1,H=!1){const J=R.request;let _=null,x=null,QA=null;J.window===\"no-window\"&&J.redirect===\"error\"?(_=R,x=J):(x=E(J),_={...R},_.request=x);const lA=J.credentials===\"include\"||J.credentials===\"same-origin\"&&J.responseTainting===\"basic\",uA=x.body?x.body.length:null;let cA=null;if(x.body==null&&[\"POST\",\"PUT\"].includes(x.method)&&(cA=\"0\"),uA!=null&&(cA=v(`${uA}`)),cA!=null&&x.headersList.append(\"content-length\",cA,!0),uA!=null&&x.keepalive,x.referrer instanceof URL&&x.headersList.append(\"referer\",v(x.referrer.href),!0),L(x),U(x),x.headersList.contains(\"user-agent\",!0)||x.headersList.append(\"user-agent\",ee),x.cache===\"default\"&&(x.headersList.contains(\"if-modified-since\",!0)||x.headersList.contains(\"if-none-match\",!0)||x.headersList.contains(\"if-unmodified-since\",!0)||x.headersList.contains(\"if-match\",!0)||x.headersList.contains(\"if-range\",!0))&&(x.cache=\"no-store\"),x.cache===\"no-cache\"&&!x.preventNoCacheCacheControlHeaderModification&&!x.headersList.contains(\"cache-control\",!0)&&x.headersList.append(\"cache-control\",\"max-age=0\",!0),(x.cache===\"no-store\"||x.cache===\"reload\")&&(x.headersList.contains(\"pragma\",!0)||x.headersList.append(\"pragma\",\"no-cache\",!0),x.headersList.contains(\"cache-control\",!0)||x.headersList.append(\"cache-control\",\"no-cache\",!0)),x.headersList.contains(\"range\",!0)&&x.headersList.append(\"accept-encoding\",\"identity\",!0),x.headersList.contains(\"accept-encoding\",!0)||(AA(l(x))?x.headersList.append(\"accept-encoding\",\"br, gzip, deflate\",!0):x.headersList.append(\"accept-encoding\",\"gzip, deflate\",!0)),x.headersList.delete(\"host\",!0),x.cache=\"no-store\",x.mode!==\"no-store\"&&x.mode,QA==null){if(x.mode===\"only-if-cached\")return e(\"only if cached\");const fA=await j(_,lA,H);!sA.has(x.method)&&fA.status>=200&&fA.status<=399,QA==null&&(QA=fA)}if(QA.urlList=[...x.urlList],x.headersList.contains(\"range\",!0)&&(QA.rangeRequested=!0),QA.requestIncludesCredentials=lA,QA.status===407)return J.window===\"no-window\"?e():N(R)?A(R):e(\"proxy authentication required\");if(QA.status===421&&!H&&(J.body==null||J.body.source!=null)){if(N(R))return A(R);R.controller.connection.destroy(),QA=await W(R,O,!0)}return QA}o(W,\"httpNetworkOrCacheFetch\");async function j(R,O=!1,H=!1){z(!R.controller.connection||R.controller.connection.destroyed),R.controller.connection={abort:null,destroyed:!1,destroy(oA,RA=!0){this.destroyed||(this.destroyed=!0,RA&&this.abort?.(oA??new DOMException(\"The operation was aborted.\",\"AbortError\")))}};const J=R.request;let _=null;const x=R.timingInfo;J.cache=\"no-store\",J.mode;let QA=null;if(J.body==null&&R.processRequestEndOfBody)queueMicrotask(()=>R.processRequestEndOfBody());else if(J.body!=null){const oA=o(async function*(dA){N(R)||(yield dA,R.processRequestBodyChunkLength?.(dA.byteLength))},\"processBodyChunk\"),RA=o(()=>{N(R)||R.processRequestEndOfBody&&R.processRequestEndOfBody()},\"processEndOfBody\"),bA=o(dA=>{N(R)||(dA.name===\"AbortError\"?R.controller.abort():R.controller.terminate(dA))},\"processBodyError\");QA=async function*(){try{for await(const dA of J.body.stream)yield*oA(dA);RA()}catch(dA){bA(dA)}}()}try{const{body:oA,status:RA,statusText:bA,headersList:dA,socket:GA}=await mA({body:QA});if(GA)_=n({status:RA,statusText:bA,headersList:dA,socket:GA});else{const DA=oA[Symbol.asyncIterator]();R.controller.next=()=>DA.next(),_=n({status:RA,statusText:bA,headersList:dA})}}catch(oA){return oA.name===\"AbortError\"?(R.controller.connection.destroy(),A(R,oA)):e(oA)}const lA=o(async()=>{await R.controller.resume()},\"pullAlgorithm\"),uA=o(oA=>{R.controller.abort(oA)},\"cancelAlgorithm\"),cA=new ReadableStream({async start(oA){R.controller.controller=oA},async pull(oA){await lA()},async cancel(oA){await uA(oA)},type:\"bytes\"});_.body={stream:cA,source:null,length:null},R.controller.onAborted=fA,R.controller.on(\"terminated\",fA),R.controller.resume=async()=>{for(;;){let oA,RA;try{const{done:dA,value:GA}=await R.controller.next();if(u(R))break;oA=dA?void 0:GA}catch(dA){R.controller.ended&&!x.encodedBodySize?oA=void 0:(oA=dA,RA=!0)}if(oA===void 0){T(R.controller.controller),Xe(R,_);return}if(x.decodedBodySize+=oA?.byteLength??0,RA){R.controller.terminate(oA);return}const bA=new Uint8Array(oA);if(bA.byteLength&&R.controller.controller.enqueue(bA),HA(cA)){R.controller.terminate();return}if(R.controller.controller.desiredSize<=0)return}};function fA(oA){u(R)?(_.aborted=!0,pA(cA)&&R.controller.controller.error(R.controller.serializedAbortReason)):pA(cA)&&R.controller.controller.error(new TypeError(\"terminated\",{cause:b(oA)?oA:void 0})),R.controller.connection.destroy()}return o(fA,\"onAborted\"),_;function mA({body:oA}){const RA=l(J),bA=R.controller.dispatcher;return new Promise((dA,GA)=>bA.dispatch({path:RA.pathname+RA.search,origin:RA.origin,method:J.method,body:bA.isMockActive?J.body&&(J.body.source||J.body.stream):oA,headers:J.headersList.entries,maxRedirections:0,upgrade:J.mode===\"websocket\"?\"websocket\":void 0},{body:null,abort:null,onConnect(DA){const{connection:FA}=R.controller;x.finalConnectionTimingInfo=K(void 0,x.postRedirectStartTime,R.crossOriginIsolatedCapability),FA.destroyed?DA(new DOMException(\"The operation was aborted.\",\"AbortError\")):(R.controller.on(\"terminated\",DA),this.abort=FA.abort=DA),x.finalNetworkRequestStartTime=G(R.crossOriginIsolatedCapability)},onResponseStarted(){x.finalNetworkResponseStartTime=G(R.crossOriginIsolatedCapability)},onHeaders(DA,FA,Ke,xe){if(DA<200)return;let TA=[],ft=\"\";const We=new s;if(Array.isArray(FA)){for(let LA=0;LA<FA.length;LA+=2)We.append(JA(FA[LA]),FA[LA+1].toString(\"latin1\"),!0);const jA=We.get(\"content-encoding\",!0);jA&&(TA=jA.toLowerCase().split(\",\").map(LA=>LA.trim())),ft=We.get(\"location\",!0)}this.body=new wA({read:Ke});const zA=[],Nt=ft&&J.redirect===\"follow\"&&gA.has(DA);if(J.method!==\"HEAD\"&&J.method!==\"CONNECT\"&&!BA.includes(DA)&&!Nt)for(let jA=0;jA<TA.length;++jA){const LA=TA[jA];if(LA===\"x-gzip\"||LA===\"gzip\")zA.push(Q.createGunzip({flush:Q.constants.Z_SYNC_FLUSH,finishFlush:Q.constants.Z_SYNC_FLUSH}));else if(LA===\"deflate\")zA.push(X());else if(LA===\"br\")zA.push(Q.createBrotliDecompress());else{zA.length=0;break}}return dA({status:DA,statusText:xe,headersList:We,body:zA.length?qA(this.body,...zA,()=>{}):this.body.on(\"error\",()=>{})}),!0},onData(DA){if(R.controller.dump)return;const FA=DA;return x.encodedBodySize+=FA.byteLength,this.body.push(FA)},onComplete(){this.abort&&R.controller.off(\"terminated\",this.abort),R.controller.onAborted&&R.controller.off(\"terminated\",R.controller.onAborted),R.controller.ended=!0,this.body.push(null)},onError(DA){this.abort&&R.controller.off(\"terminated\",this.abort),this.body?.destroy(DA),R.controller.terminate(DA),GA(DA)},onUpgrade(DA,FA,Ke){if(DA!==101)return;const xe=new s;for(let TA=0;TA<FA.length;TA+=2)xe.append(JA(FA[TA]),FA[TA+1].toString(\"latin1\"),!0);return dA({status:DA,statusText:PA[DA],headersList:xe,socket:Ke}),!0}}))}o(mA,\"dispatch\")}return o(j,\"httpNetworkFetch\"),fetch_1={fetch:Ze,Fetch:XA,fetching:Ve,finalizeAndReportTiming:KA},fetch_1}o(requireFetch,\"requireFetch\");var symbols$2,hasRequiredSymbols$2;function requireSymbols$2(){return hasRequiredSymbols$2||(hasRequiredSymbols$2=1,symbols$2={kState:Symbol(\"FileReader state\"),kResult:Symbol(\"FileReader result\"),kError:Symbol(\"FileReader error\"),kLastProgressEventFired:Symbol(\"FileReader last progress event fired timestamp\"),kEvents:Symbol(\"FileReader events\"),kAborted:Symbol(\"FileReader aborted\")}),symbols$2}o(requireSymbols$2,\"requireSymbols$2\");var progressevent,hasRequiredProgressevent;function requireProgressevent(){if(hasRequiredProgressevent)return progressevent;hasRequiredProgressevent=1;const{webidl:e}=requireWebidl(),A=Symbol(\"ProgressEvent state\"),n=class n extends Event{constructor(s,i={}){s=e.converters.DOMString(s),i=e.converters.ProgressEventInit(i??{}),super(s,i),this[A]={lengthComputable:i.lengthComputable,loaded:i.loaded,total:i.total}}get lengthComputable(){return e.brandCheck(this,n),this[A].lengthComputable}get loaded(){return e.brandCheck(this,n),this[A].loaded}get total(){return e.brandCheck(this,n),this[A].total}};o(n,\"ProgressEvent\");let t=n;return e.converters.ProgressEventInit=e.dictionaryConverter([{key:\"lengthComputable\",converter:e.converters.boolean,defaultValue:!1},{key:\"loaded\",converter:e.converters[\"unsigned long long\"],defaultValue:0},{key:\"total\",converter:e.converters[\"unsigned long long\"],defaultValue:0},{key:\"bubbles\",converter:e.converters.boolean,defaultValue:!1},{key:\"cancelable\",converter:e.converters.boolean,defaultValue:!1},{key:\"composed\",converter:e.converters.boolean,defaultValue:!1}]),progressevent={ProgressEvent:t},progressevent}o(requireProgressevent,\"requireProgressevent\");var encoding,hasRequiredEncoding;function requireEncoding(){if(hasRequiredEncoding)return encoding;hasRequiredEncoding=1;function e(A){if(!A)return\"failure\";switch(A.trim().toLowerCase()){case\"unicode-1-1-utf-8\":case\"unicode11utf8\":case\"unicode20utf8\":case\"utf-8\":case\"utf8\":case\"x-unicode20utf8\":return\"UTF-8\";case\"866\":case\"cp866\":case\"csibm866\":case\"ibm866\":return\"IBM866\";case\"csisolatin2\":case\"iso-8859-2\":case\"iso-ir-101\":case\"iso8859-2\":case\"iso88592\":case\"iso_8859-2\":case\"iso_8859-2:1987\":case\"l2\":case\"latin2\":return\"ISO-8859-2\";case\"csisolatin3\":case\"iso-8859-3\":case\"iso-ir-109\":case\"iso8859-3\":case\"iso88593\":case\"iso_8859-3\":case\"iso_8859-3:1988\":case\"l3\":case\"latin3\":return\"ISO-8859-3\";case\"csisolatin4\":case\"iso-8859-4\":case\"iso-ir-110\":case\"iso8859-4\":case\"iso88594\":case\"iso_8859-4\":case\"iso_8859-4:1988\":case\"l4\":case\"latin4\":return\"ISO-8859-4\";case\"csisolatincyrillic\":case\"cyrillic\":case\"iso-8859-5\":case\"iso-ir-144\":case\"iso8859-5\":case\"iso88595\":case\"iso_8859-5\":case\"iso_8859-5:1988\":return\"ISO-8859-5\";case\"arabic\":case\"asmo-708\":case\"csiso88596e\":case\"csiso88596i\":case\"csisolatinarabic\":case\"ecma-114\":case\"iso-8859-6\":case\"iso-8859-6-e\":case\"iso-8859-6-i\":case\"iso-ir-127\":case\"iso8859-6\":case\"iso88596\":case\"iso_8859-6\":case\"iso_8859-6:1987\":return\"ISO-8859-6\";case\"csisolatingreek\":case\"ecma-118\":case\"elot_928\":case\"greek\":case\"greek8\":case\"iso-8859-7\":case\"iso-ir-126\":case\"iso8859-7\":case\"iso88597\":case\"iso_8859-7\":case\"iso_8859-7:1987\":case\"sun_eu_greek\":return\"ISO-8859-7\";case\"csiso88598e\":case\"csisolatinhebrew\":case\"hebrew\":case\"iso-8859-8\":case\"iso-8859-8-e\":case\"iso-ir-138\":case\"iso8859-8\":case\"iso88598\":case\"iso_8859-8\":case\"iso_8859-8:1988\":case\"visual\":return\"ISO-8859-8\";case\"csiso88598i\":case\"iso-8859-8-i\":case\"logical\":return\"ISO-8859-8-I\";case\"csisolatin6\":case\"iso-8859-10\":case\"iso-ir-157\":case\"iso8859-10\":case\"iso885910\":case\"l6\":case\"latin6\":return\"ISO-8859-10\";case\"iso-8859-13\":case\"iso8859-13\":case\"iso885913\":return\"ISO-8859-13\";case\"iso-8859-14\":case\"iso8859-14\":case\"iso885914\":return\"ISO-8859-14\";case\"csisolatin9\":case\"iso-8859-15\":case\"iso8859-15\":case\"iso885915\":case\"iso_8859-15\":case\"l9\":return\"ISO-8859-15\";case\"iso-8859-16\":return\"ISO-8859-16\";case\"cskoi8r\":case\"koi\":case\"koi8\":case\"koi8-r\":case\"koi8_r\":return\"KOI8-R\";case\"koi8-ru\":case\"koi8-u\":return\"KOI8-U\";case\"csmacintosh\":case\"mac\":case\"macintosh\":case\"x-mac-roman\":return\"macintosh\";case\"iso-8859-11\":case\"iso8859-11\":case\"iso885911\":case\"tis-620\":case\"windows-874\":return\"windows-874\";case\"cp1250\":case\"windows-1250\":case\"x-cp1250\":return\"windows-1250\";case\"cp1251\":case\"windows-1251\":case\"x-cp1251\":return\"windows-1251\";case\"ansi_x3.4-1968\":case\"ascii\":case\"cp1252\":case\"cp819\":case\"csisolatin1\":case\"ibm819\":case\"iso-8859-1\":case\"iso-ir-100\":case\"iso8859-1\":case\"iso88591\":case\"iso_8859-1\":case\"iso_8859-1:1987\":case\"l1\":case\"latin1\":case\"us-ascii\":case\"windows-1252\":case\"x-cp1252\":return\"windows-1252\";case\"cp1253\":case\"windows-1253\":case\"x-cp1253\":return\"windows-1253\";case\"cp1254\":case\"csisolatin5\":case\"iso-8859-9\":case\"iso-ir-148\":case\"iso8859-9\":case\"iso88599\":case\"iso_8859-9\":case\"iso_8859-9:1989\":case\"l5\":case\"latin5\":case\"windows-1254\":case\"x-cp1254\":return\"windows-1254\";case\"cp1255\":case\"windows-1255\":case\"x-cp1255\":return\"windows-1255\";case\"cp1256\":case\"windows-1256\":case\"x-cp1256\":return\"windows-1256\";case\"cp1257\":case\"windows-1257\":case\"x-cp1257\":return\"windows-1257\";case\"cp1258\":case\"windows-1258\":case\"x-cp1258\":return\"windows-1258\";case\"x-mac-cyrillic\":case\"x-mac-ukrainian\":return\"x-mac-cyrillic\";case\"chinese\":case\"csgb2312\":case\"csiso58gb231280\":case\"gb2312\":case\"gb_2312\":case\"gb_2312-80\":case\"gbk\":case\"iso-ir-58\":case\"x-gbk\":return\"GBK\";case\"gb18030\":return\"gb18030\";case\"big5\":case\"big5-hkscs\":case\"cn-big5\":case\"csbig5\":case\"x-x-big5\":return\"Big5\";case\"cseucpkdfmtjapanese\":case\"euc-jp\":case\"x-euc-jp\":return\"EUC-JP\";case\"csiso2022jp\":case\"iso-2022-jp\":return\"ISO-2022-JP\";case\"csshiftjis\":case\"ms932\":case\"ms_kanji\":case\"shift-jis\":case\"shift_jis\":case\"sjis\":case\"windows-31j\":case\"x-sjis\":return\"Shift_JIS\";case\"cseuckr\":case\"csksc56011987\":case\"euc-kr\":case\"iso-ir-149\":case\"korean\":case\"ks_c_5601-1987\":case\"ks_c_5601-1989\":case\"ksc5601\":case\"ksc_5601\":case\"windows-949\":return\"EUC-KR\";case\"csiso2022kr\":case\"hz-gb-2312\":case\"iso-2022-cn\":case\"iso-2022-cn-ext\":case\"iso-2022-kr\":case\"replacement\":return\"replacement\";case\"unicodefffe\":case\"utf-16be\":return\"UTF-16BE\";case\"csunicode\":case\"iso-10646-ucs-2\":case\"ucs-2\":case\"unicode\":case\"unicodefeff\":case\"utf-16\":case\"utf-16le\":return\"UTF-16LE\";case\"x-user-defined\":return\"x-user-defined\";default:return\"failure\"}}return o(e,\"getEncoding\"),encoding={getEncoding:e},encoding}o(requireEncoding,\"requireEncoding\");var util$5,hasRequiredUtil$4;function requireUtil$4(){if(hasRequiredUtil$4)return util$5;hasRequiredUtil$4=1;const{kState:e,kError:A,kResult:t,kAborted:n,kLastProgressEventFired:r}=requireSymbols$2(),{ProgressEvent:s}=requireProgressevent(),{getEncoding:i}=requireEncoding(),{serializeAMimeType:E,parseMIMEType:Q}=requireDataUrl(),{types:C}=require$$0__default$1,{StringDecoder:I}=require$$5__default$2,{btoa:a}=require$$6__default,f={enumerable:!0,writable:!1,configurable:!1};function h(w,U,M,B){if(w[e]===\"loading\")throw new DOMException(\"Invalid state\",\"InvalidStateError\");w[e]=\"loading\",w[t]=null,w[A]=null;const G=U.stream().getReader(),g=[];let d=G.read(),F=!0;(async()=>{for(;!w[n];)try{const{done:N,value:u}=await d;if(F&&!w[n]&&queueMicrotask(()=>{L(\"loadstart\",w)}),F=!1,!N&&C.isUint8Array(u))g.push(u),(w[r]===void 0||Date.now()-w[r]>=50)&&!w[n]&&(w[r]=Date.now(),queueMicrotask(()=>{L(\"progress\",w)})),d=G.read();else if(N){queueMicrotask(()=>{w[e]=\"done\";try{const b=c(g,M,U.type,B);if(w[n])return;w[t]=b,L(\"load\",w)}catch(b){w[A]=b,L(\"error\",w)}w[e]!==\"loading\"&&L(\"loadend\",w)});break}}catch(N){if(w[n])return;queueMicrotask(()=>{w[e]=\"done\",w[A]=N,L(\"error\",w),w[e]!==\"loading\"&&L(\"loadend\",w)});break}})()}o(h,\"readOperation\");function L(w,U){const M=new s(w,{bubbles:!1,cancelable:!1});U.dispatchEvent(M)}o(L,\"fireAProgressEvent\");function c(w,U,M,B){switch(U){case\"DataURL\":{let D=\"data:\";const G=Q(M||\"application/octet-stream\");G!==\"failure\"&&(D+=E(G)),D+=\";base64,\";const g=new I(\"latin1\");for(const d of w)D+=a(g.write(d));return D+=a(g.end()),D}case\"Text\":{let D=\"failure\";if(B&&(D=i(B)),D===\"failure\"&&M){const G=Q(M);G!==\"failure\"&&(D=i(G.parameters.get(\"charset\")))}return D===\"failure\"&&(D=\"UTF-8\"),l(w,D)}case\"ArrayBuffer\":return k(w).buffer;case\"BinaryString\":{let D=\"\";const G=new I(\"latin1\");for(const g of w)D+=G.write(g);return D+=G.end(),D}}}o(c,\"packageData\");function l(w,U){const M=k(w),B=S(M);let D=0;B!==null&&(U=B,D=B===\"UTF-8\"?3:2);const G=M.slice(D);return new TextDecoder(U).decode(G)}o(l,\"decode\");function S(w){const[U,M,B]=w;return U===239&&M===187&&B===191?\"UTF-8\":U===254&&M===255?\"UTF-16BE\":U===255&&M===254?\"UTF-16LE\":null}o(S,\"BOMSniffing\");function k(w){const U=w.reduce((B,D)=>B+D.byteLength,0);let M=0;return w.reduce((B,D)=>(B.set(D,M),M+=D.byteLength,B),new Uint8Array(U))}return o(k,\"combineByteSequences\"),util$5={staticPropertyDescriptors:f,readOperation:h,fireAProgressEvent:L},util$5}o(requireUtil$4,\"requireUtil$4\");var filereader,hasRequiredFilereader;function requireFilereader(){if(hasRequiredFilereader)return filereader;hasRequiredFilereader=1;const{staticPropertyDescriptors:e,readOperation:A,fireAProgressEvent:t}=requireUtil$4(),{kState:n,kError:r,kResult:s,kEvents:i,kAborted:E}=requireSymbols$2(),{webidl:Q}=requireWebidl(),{kEnumerableProperty:C}=util$m,a=class a extends EventTarget{constructor(){super(),this[n]=\"empty\",this[s]=null,this[r]=null,this[i]={loadend:null,error:null,abort:null,load:null,progress:null,loadstart:null}}readAsArrayBuffer(h){Q.brandCheck(this,a),Q.argumentLengthCheck(arguments,1,{header:\"FileReader.readAsArrayBuffer\"}),h=Q.converters.Blob(h,{strict:!1}),A(this,h,\"ArrayBuffer\")}readAsBinaryString(h){Q.brandCheck(this,a),Q.argumentLengthCheck(arguments,1,{header:\"FileReader.readAsBinaryString\"}),h=Q.converters.Blob(h,{strict:!1}),A(this,h,\"BinaryString\")}readAsText(h,L=void 0){Q.brandCheck(this,a),Q.argumentLengthCheck(arguments,1,{header:\"FileReader.readAsText\"}),h=Q.converters.Blob(h,{strict:!1}),L!==void 0&&(L=Q.converters.DOMString(L)),A(this,h,\"Text\",L)}readAsDataURL(h){Q.brandCheck(this,a),Q.argumentLengthCheck(arguments,1,{header:\"FileReader.readAsDataURL\"}),h=Q.converters.Blob(h,{strict:!1}),A(this,h,\"DataURL\")}abort(){if(this[n]===\"empty\"||this[n]===\"done\"){this[s]=null;return}this[n]===\"loading\"&&(this[n]=\"done\",this[s]=null),this[E]=!0,t(\"abort\",this),this[n]!==\"loading\"&&t(\"loadend\",this)}get readyState(){switch(Q.brandCheck(this,a),this[n]){case\"empty\":return this.EMPTY;case\"loading\":return this.LOADING;case\"done\":return this.DONE}}get result(){return Q.brandCheck(this,a),this[s]}get error(){return Q.brandCheck(this,a),this[r]}get onloadend(){return Q.brandCheck(this,a),this[i].loadend}set onloadend(h){Q.brandCheck(this,a),this[i].loadend&&this.removeEventListener(\"loadend\",this[i].loadend),typeof h==\"function\"?(this[i].loadend=h,this.addEventListener(\"loadend\",h)):this[i].loadend=null}get onerror(){return Q.brandCheck(this,a),this[i].error}set onerror(h){Q.brandCheck(this,a),this[i].error&&this.removeEventListener(\"error\",this[i].error),typeof h==\"function\"?(this[i].error=h,this.addEventListener(\"error\",h)):this[i].error=null}get onloadstart(){return Q.brandCheck(this,a),this[i].loadstart}set onloadstart(h){Q.brandCheck(this,a),this[i].loadstart&&this.removeEventListener(\"loadstart\",this[i].loadstart),typeof h==\"function\"?(this[i].loadstart=h,this.addEventListener(\"loadstart\",h)):this[i].loadstart=null}get onprogress(){return Q.brandCheck(this,a),this[i].progress}set onprogress(h){Q.brandCheck(this,a),this[i].progress&&this.removeEventListener(\"progress\",this[i].progress),typeof h==\"function\"?(this[i].progress=h,this.addEventListener(\"progress\",h)):this[i].progress=null}get onload(){return Q.brandCheck(this,a),this[i].load}set onload(h){Q.brandCheck(this,a),this[i].load&&this.removeEventListener(\"load\",this[i].load),typeof h==\"function\"?(this[i].load=h,this.addEventListener(\"load\",h)):this[i].load=null}get onabort(){return Q.brandCheck(this,a),this[i].abort}set onabort(h){Q.brandCheck(this,a),this[i].abort&&this.removeEventListener(\"abort\",this[i].abort),typeof h==\"function\"?(this[i].abort=h,this.addEventListener(\"abort\",h)):this[i].abort=null}};o(a,\"FileReader\");let I=a;return I.EMPTY=I.prototype.EMPTY=0,I.LOADING=I.prototype.LOADING=1,I.DONE=I.prototype.DONE=2,Object.defineProperties(I.prototype,{EMPTY:e,LOADING:e,DONE:e,readAsArrayBuffer:C,readAsBinaryString:C,readAsText:C,readAsDataURL:C,abort:C,readyState:C,result:C,error:C,onloadstart:C,onprogress:C,onload:C,onabort:C,onerror:C,onloadend:C,[Symbol.toStringTag]:{value:\"FileReader\",writable:!1,enumerable:!1,configurable:!0}}),Object.defineProperties(I,{EMPTY:e,LOADING:e,DONE:e}),filereader={FileReader:I},filereader}o(requireFilereader,\"requireFilereader\");var symbols$1,hasRequiredSymbols$1;function requireSymbols$1(){return hasRequiredSymbols$1||(hasRequiredSymbols$1=1,symbols$1={kConstruct:symbols$4.kConstruct}),symbols$1}o(requireSymbols$1,\"requireSymbols$1\");var util$4,hasRequiredUtil$3;function requireUtil$3(){if(hasRequiredUtil$3)return util$4;hasRequiredUtil$3=1;const e=require$$0__default,{URLSerializer:A}=requireDataUrl(),{isValidHeaderName:t}=requireUtil$5();function n(s,i,E=!1){const Q=A(s,E),C=A(i,E);return Q===C}o(n,\"urlEquals\");function r(s){e(s!==null);const i=[];for(let E of s.split(\",\"))E=E.trim(),t(E)&&i.push(E);return i}return o(r,\"getFieldValues\"),util$4={urlEquals:n,getFieldValues:r},util$4}o(requireUtil$3,\"requireUtil$3\");var cache,hasRequiredCache;function requireCache(){var w,U,qe,B,$A,G,wt,d,je;if(hasRequiredCache)return cache;hasRequiredCache=1;const{kConstruct:e}=requireSymbols$1(),{urlEquals:A,getFieldValues:t}=requireUtil$3(),{kEnumerableProperty:n,isDisturbed:r}=util$m,{webidl:s}=requireWebidl(),{Response:i,cloneResponse:E,fromInnerResponse:Q}=requireResponse(),{Request:C,fromInnerRequest:I}=requireRequest(),{kState:a}=requireSymbols$3(),{fetching:f}=requireFetch(),{urlIsHttpHttpsScheme:h,createDeferredPromise:L,readAllBytes:c}=requireUtil$5(),l=require$$0__default,N=class N{constructor(){CA(this,U);CA(this,B);CA(this,G);CA(this,d);CA(this,w,void 0);arguments[0]!==e&&s.illegalConstructor(),EA(this,w,arguments[1])}async match(b,m={}){s.brandCheck(this,N),s.argumentLengthCheck(arguments,1,{header:\"Cache.match\"}),b=s.converters.RequestInfo(b),m=s.converters.CacheQueryOptions(m);const T=kA(this,d,je).call(this,b,m,1);if(T.length!==0)return T[0]}async matchAll(b=void 0,m={}){return s.brandCheck(this,N),b!==void 0&&(b=s.converters.RequestInfo(b)),m=s.converters.CacheQueryOptions(m),kA(this,d,je).call(this,b,m)}async add(b){s.brandCheck(this,N),s.argumentLengthCheck(arguments,1,{header:\"Cache.add\"}),b=s.converters.RequestInfo(b);const m=[b];return await this.addAll(m)}async addAll(b){s.brandCheck(this,N),s.argumentLengthCheck(arguments,1,{header:\"Cache.addAll\"});const m=[],T=[];for(let X of b){if(X===void 0)throw s.errors.conversionFailed({prefix:\"Cache.addAll\",argument:\"Argument 1\",types:[\"undefined is not allowed\"]});if(X=s.converters.RequestInfo(X),typeof X==\"string\")continue;const $=X[a];if(!h($.url)||$.method!==\"GET\")throw s.errors.exception({header:\"Cache.addAll\",message:\"Expected http/s scheme when method is not GET.\"})}const v=[];for(const X of b){const $=new C(X)[a];if(!h($.url))throw s.errors.exception({header:\"Cache.addAll\",message:\"Expected http/s scheme.\"});$.initiator=\"fetch\",$.destination=\"subresource\",T.push($);const V=L();v.push(f({request:$,processResponse(q){if(q.type===\"error\"||q.status===206||q.status<200||q.status>299)V.reject(s.errors.exception({header:\"Cache.addAll\",message:\"Received an invalid status code or the request failed.\"}));else if(q.headersList.contains(\"vary\")){const z=t(q.headersList.get(\"vary\"));for(const rA of z)if(rA===\"*\"){V.reject(s.errors.exception({header:\"Cache.addAll\",message:\"invalid vary field value\"}));for(const iA of v)iA.abort();return}}},processResponseEndOfBody(q){if(q.aborted){V.reject(new DOMException(\"aborted\",\"AbortError\"));return}V.resolve(q)}})),m.push(V.promise)}const P=await Promise.all(m),AA=[];let K=0;for(const X of P){const $={type:\"put\",request:T[K],response:X};AA.push($),K++}const tA=L();let aA=null;try{kA(this,U,qe).call(this,AA)}catch(X){aA=X}return queueMicrotask(()=>{aA===null?tA.resolve(void 0):tA.reject(aA)}),tA.promise}async put(b,m){s.brandCheck(this,N),s.argumentLengthCheck(arguments,2,{header:\"Cache.put\"}),b=s.converters.RequestInfo(b),m=s.converters.Response(m);let T=null;if(b instanceof C?T=b[a]:T=new C(b)[a],!h(T.url)||T.method!==\"GET\")throw s.errors.exception({header:\"Cache.put\",message:\"Expected an http/s scheme when method is not GET\"});const v=m[a];if(v.status===206)throw s.errors.exception({header:\"Cache.put\",message:\"Got 206 status\"});if(v.headersList.contains(\"vary\")){const $=t(v.headersList.get(\"vary\"));for(const V of $)if(V===\"*\")throw s.errors.exception({header:\"Cache.put\",message:\"Got * vary field value\"})}if(v.body&&(r(v.body.stream)||v.body.stream.locked))throw s.errors.exception({header:\"Cache.put\",message:\"Response body is locked or disturbed\"});const Z=E(v),P=L();if(v.body!=null){const V=v.body.stream.getReader();c(V).then(P.resolve,P.reject)}else P.resolve(void 0);const AA=[],K={type:\"put\",request:T,response:Z};AA.push(K);const tA=await P.promise;Z.body!=null&&(Z.body.source=tA);const aA=L();let X=null;try{kA(this,U,qe).call(this,AA)}catch($){X=$}return queueMicrotask(()=>{X===null?aA.resolve():aA.reject(X)}),aA.promise}async delete(b,m={}){s.brandCheck(this,N),s.argumentLengthCheck(arguments,1,{header:\"Cache.delete\"}),b=s.converters.RequestInfo(b),m=s.converters.CacheQueryOptions(m);let T=null;if(b instanceof C){if(T=b[a],T.method!==\"GET\"&&!m.ignoreMethod)return!1}else l(typeof b==\"string\"),T=new C(b)[a];const v=[],Z={type:\"delete\",request:T,options:m};v.push(Z);const P=L();let AA=null,K;try{K=kA(this,U,qe).call(this,v)}catch(tA){AA=tA}return queueMicrotask(()=>{AA===null?P.resolve(!!K?.length):P.reject(AA)}),P.promise}async keys(b=void 0,m={}){s.brandCheck(this,N),b!==void 0&&(b=s.converters.RequestInfo(b)),m=s.converters.CacheQueryOptions(m);let T=null;if(b!==void 0)if(b instanceof C){if(T=b[a],T.method!==\"GET\"&&!m.ignoreMethod)return[]}else typeof b==\"string\"&&(T=new C(b)[a]);const v=L(),Z=[];if(b===void 0)for(const P of p(this,w))Z.push(P[0]);else{const P=kA(this,B,$A).call(this,T,m);for(const AA of P)Z.push(AA[0])}return queueMicrotask(()=>{const P=[];for(const AA of Z){const K=I(AA,new AbortController().signal,\"immutable\",{settingsObject:AA.client});P.push(K)}v.resolve(Object.freeze(P))}),v.promise}};w=new WeakMap,U=new WeakSet,qe=o(function(b){const m=p(this,w),T=[...m],v=[],Z=[];try{for(const P of b){if(P.type!==\"delete\"&&P.type!==\"put\")throw s.errors.exception({header:\"Cache.#batchCacheOperations\",message:'operation type does not match \"delete\" or \"put\"'});if(P.type===\"delete\"&&P.response!=null)throw s.errors.exception({header:\"Cache.#batchCacheOperations\",message:\"delete operation should not have an associated response\"});if(kA(this,B,$A).call(this,P.request,P.options,v).length)throw new DOMException(\"???\",\"InvalidStateError\");let AA;if(P.type===\"delete\"){if(AA=kA(this,B,$A).call(this,P.request,P.options),AA.length===0)return[];for(const K of AA){const tA=m.indexOf(K);l(tA!==-1),m.splice(tA,1)}}else if(P.type===\"put\"){if(P.response==null)throw s.errors.exception({header:\"Cache.#batchCacheOperations\",message:\"put operation should have an associated response\"});const K=P.request;if(!h(K.url))throw s.errors.exception({header:\"Cache.#batchCacheOperations\",message:\"expected http or https scheme\"});if(K.method!==\"GET\")throw s.errors.exception({header:\"Cache.#batchCacheOperations\",message:\"not get method\"});if(P.options!=null)throw s.errors.exception({header:\"Cache.#batchCacheOperations\",message:\"options must not be defined\"});AA=kA(this,B,$A).call(this,P.request);for(const tA of AA){const aA=m.indexOf(tA);l(aA!==-1),m.splice(aA,1)}m.push([P.request,P.response]),v.push([P.request,P.response])}Z.push([P.request,P.response])}return Z}catch(P){throw p(this,w).length=0,EA(this,w,T),P}},\"#batchCacheOperations\"),B=new WeakSet,$A=o(function(b,m,T){const v=[],Z=T??p(this,w);for(const P of Z){const[AA,K]=P;kA(this,G,wt).call(this,b,AA,K,m)&&v.push(P)}return v},\"#queryCache\"),G=new WeakSet,wt=o(function(b,m,T=null,v){const Z=new URL(b.url),P=new URL(m.url);if(v?.ignoreSearch&&(P.search=\"\",Z.search=\"\"),!A(Z,P,!0))return!1;if(T==null||v?.ignoreVary||!T.headersList.contains(\"vary\"))return!0;const AA=t(T.headersList.get(\"vary\"));for(const K of AA){if(K===\"*\")return!1;const tA=m.headersList.get(K),aA=b.headersList.get(K);if(tA!==aA)return!1}return!0},\"#requestMatchesCachedItem\"),d=new WeakSet,je=o(function(b,m,T=1/0){let v=null;if(b!==void 0)if(b instanceof C){if(v=b[a],v.method!==\"GET\"&&!m.ignoreMethod)return[]}else typeof b==\"string\"&&(v=new C(b)[a]);const Z=[];if(b===void 0)for(const AA of p(this,w))Z.push(AA[1]);else{const AA=kA(this,B,$A).call(this,v,m);for(const K of AA)Z.push(K[1])}const P=[];for(const AA of Z){const K=Q(AA,\"immutable\",{settingsObject:{}});if(P.push(K.clone()),P.length>=T)break}return Object.freeze(P)},\"#internalMatchAll\"),o(N,\"Cache\");let S=N;Object.defineProperties(S.prototype,{[Symbol.toStringTag]:{value:\"Cache\",configurable:!0},match:n,matchAll:n,add:n,addAll:n,put:n,delete:n,keys:n});const k=[{key:\"ignoreSearch\",converter:s.converters.boolean,defaultValue:!1},{key:\"ignoreMethod\",converter:s.converters.boolean,defaultValue:!1},{key:\"ignoreVary\",converter:s.converters.boolean,defaultValue:!1}];return s.converters.CacheQueryOptions=s.dictionaryConverter(k),s.converters.MultiCacheQueryOptions=s.dictionaryConverter([...k,{key:\"cacheName\",converter:s.converters.DOMString}]),s.converters.Response=s.interfaceConverter(i),s.converters[\"sequence<RequestInfo>\"]=s.sequenceConverter(s.converters.RequestInfo),cache={Cache:S},cache}o(requireCache,\"requireCache\");var cachestorage,hasRequiredCachestorage;function requireCachestorage(){var s;if(hasRequiredCachestorage)return cachestorage;hasRequiredCachestorage=1;const{kConstruct:e}=requireSymbols$1(),{Cache:A}=requireCache(),{webidl:t}=requireWebidl(),{kEnumerableProperty:n}=util$m,i=class i{constructor(){CA(this,s,new Map);arguments[0]!==e&&t.illegalConstructor()}async match(Q,C={}){if(t.brandCheck(this,i),t.argumentLengthCheck(arguments,1,{header:\"CacheStorage.match\"}),Q=t.converters.RequestInfo(Q),C=t.converters.MultiCacheQueryOptions(C),C.cacheName!=null){if(p(this,s).has(C.cacheName)){const I=p(this,s).get(C.cacheName);return await new A(e,I).match(Q,C)}}else for(const I of p(this,s).values()){const f=await new A(e,I).match(Q,C);if(f!==void 0)return f}}async has(Q){return t.brandCheck(this,i),t.argumentLengthCheck(arguments,1,{header:\"CacheStorage.has\"}),Q=t.converters.DOMString(Q),p(this,s).has(Q)}async open(Q){if(t.brandCheck(this,i),t.argumentLengthCheck(arguments,1,{header:\"CacheStorage.open\"}),Q=t.converters.DOMString(Q),p(this,s).has(Q)){const I=p(this,s).get(Q);return new A(e,I)}const C=[];return p(this,s).set(Q,C),new A(e,C)}async delete(Q){return t.brandCheck(this,i),t.argumentLengthCheck(arguments,1,{header:\"CacheStorage.delete\"}),Q=t.converters.DOMString(Q),p(this,s).delete(Q)}async keys(){return t.brandCheck(this,i),[...p(this,s).keys()]}};s=new WeakMap,o(i,\"CacheStorage\");let r=i;return Object.defineProperties(r.prototype,{[Symbol.toStringTag]:{value:\"CacheStorage\",configurable:!0},match:n,has:n,open:n,delete:n,keys:n}),cachestorage={CacheStorage:r},cachestorage}o(requireCachestorage,\"requireCachestorage\");var constants$1,hasRequiredConstants$1;function requireConstants$1(){return hasRequiredConstants$1||(hasRequiredConstants$1=1,constants$1={maxAttributeValueSize:1024,maxNameValuePairSize:4096}),constants$1}o(requireConstants$1,\"requireConstants$1\");var util$3,hasRequiredUtil$2;function requireUtil$2(){if(hasRequiredUtil$2)return util$3;hasRequiredUtil$2=1;const e=require$$0__default,{kHeadersList:A}=symbols$4;function t(c){for(let l=0;l<c.length;++l){const S=c.charCodeAt(l);if(S>=0&&S<=8||S>=10&&S<=31||S===127)return!0}return!1}o(t,\"isCTLExcludingHtab\");function n(c){for(let l=0;l<c.length;++l){const S=c.charCodeAt(l);if(S<33||S>126||S===34||S===40||S===41||S===60||S===62||S===64||S===44||S===59||S===58||S===92||S===47||S===91||S===93||S===63||S===61||S===123||S===125)throw new Error(\"Invalid cookie name\")}}o(n,\"validateCookieName\");function r(c){let l=c.length,S=0;if(c[0]==='\"'){if(l===1||c[l-1]!=='\"')throw new Error(\"Invalid cookie value\");--l,++S}for(;S<l;){const k=c.charCodeAt(S++);if(k<33||k>126||k===34||k===44||k===59||k===92)throw new Error(\"Invalid cookie value\")}}o(r,\"validateCookieValue\");function s(c){for(let l=0;l<c.length;++l){const S=c.charCodeAt(l);if(S<32||S===127||S===59)throw new Error(\"Invalid cookie path\")}}o(s,\"validateCookiePath\");function i(c){if(c.startsWith(\"-\")||c.endsWith(\".\")||c.endsWith(\"-\"))throw new Error(\"Invalid cookie domain\")}o(i,\"validateCookieDomain\");const E=[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],Q=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],C=Array(61).fill(0).map((c,l)=>l.toString().padStart(2,\"0\"));function I(c){return typeof c==\"number\"&&(c=new Date(c)),`${E[c.getUTCDay()]}, ${C[c.getUTCDate()]} ${Q[c.getUTCMonth()]} ${c.getUTCFullYear()} ${C[c.getUTCHours()]}:${C[c.getUTCMinutes()]}:${C[c.getUTCSeconds()]} GMT`}o(I,\"toIMFDate\");function a(c){if(c<0)throw new Error(\"Invalid cookie max-age\")}o(a,\"validateCookieMaxAge\");function f(c){if(c.name.length===0)return null;n(c.name),r(c.value);const l=[`${c.name}=${c.value}`];c.name.startsWith(\"__Secure-\")&&(c.secure=!0),c.name.startsWith(\"__Host-\")&&(c.secure=!0,c.domain=null,c.path=\"/\"),c.secure&&l.push(\"Secure\"),c.httpOnly&&l.push(\"HttpOnly\"),typeof c.maxAge==\"number\"&&(a(c.maxAge),l.push(`Max-Age=${c.maxAge}`)),c.domain&&(i(c.domain),l.push(`Domain=${c.domain}`)),c.path&&(s(c.path),l.push(`Path=${c.path}`)),c.expires&&c.expires.toString()!==\"Invalid Date\"&&l.push(`Expires=${I(c.expires)}`),c.sameSite&&l.push(`SameSite=${c.sameSite}`);for(const S of c.unparsed){if(!S.includes(\"=\"))throw new Error(\"Invalid unparsed\");const[k,...w]=S.split(\"=\");l.push(`${k.trim()}=${w.join(\"=\")}`)}return l.join(\"; \")}o(f,\"stringify\");let h;function L(c){if(c[A])return c[A];h||(h=Object.getOwnPropertySymbols(c).find(S=>S.description===\"headers list\"),e(h,\"Headers cannot be parsed\"));const l=c[h];return e(l),l}return o(L,\"getHeadersList\"),util$3={isCTLExcludingHtab:t,validateCookieName:n,validateCookiePath:s,validateCookieValue:r,toIMFDate:I,stringify:f,getHeadersList:L},util$3}o(requireUtil$2,\"requireUtil$2\");var parse,hasRequiredParse;function requireParse(){if(hasRequiredParse)return parse;hasRequiredParse=1;const{maxNameValuePairSize:e,maxAttributeValueSize:A}=requireConstants$1(),{isCTLExcludingHtab:t}=requireUtil$2(),{collectASequenceOfCodePointsFast:n}=requireDataUrl(),r=require$$0__default;function s(E){if(t(E))return null;let Q=\"\",C=\"\",I=\"\",a=\"\";if(E.includes(\";\")){const f={position:0};Q=n(\";\",E,f),C=E.slice(f.position)}else Q=E;if(!Q.includes(\"=\"))a=Q;else{const f={position:0};I=n(\"=\",Q,f),a=Q.slice(f.position+1)}return I=I.trim(),a=a.trim(),I.length+a.length>e?null:{name:I,value:a,...i(C)}}o(s,\"parseSetCookie\");function i(E,Q={}){if(E.length===0)return Q;r(E[0]===\";\"),E=E.slice(1);let C=\"\";E.includes(\";\")?(C=n(\";\",E,{position:0}),E=E.slice(C.length)):(C=E,E=\"\");let I=\"\",a=\"\";if(C.includes(\"=\")){const h={position:0};I=n(\"=\",C,h),a=C.slice(h.position+1)}else I=C;if(I=I.trim(),a=a.trim(),a.length>A)return i(E,Q);const f=I.toLowerCase();if(f===\"expires\"){const h=new Date(a);Q.expires=h}else if(f===\"max-age\"){const h=a.charCodeAt(0);if((h<48||h>57)&&a[0]!==\"-\"||!/^\\d+$/.test(a))return i(E,Q);const L=Number(a);Q.maxAge=L}else if(f===\"domain\"){let h=a;h[0]===\".\"&&(h=h.slice(1)),h=h.toLowerCase(),Q.domain=h}else if(f===\"path\"){let h=\"\";a.length===0||a[0]!==\"/\"?h=\"/\":h=a,Q.path=h}else if(f===\"secure\")Q.secure=!0;else if(f===\"httponly\")Q.httpOnly=!0;else if(f===\"samesite\"){let h=\"Default\";const L=a.toLowerCase();L.includes(\"none\")&&(h=\"None\"),L.includes(\"strict\")&&(h=\"Strict\"),L.includes(\"lax\")&&(h=\"Lax\"),Q.sameSite=h}else Q.unparsed??(Q.unparsed=[]),Q.unparsed.push(`${I}=${a}`);return i(E,Q)}return o(i,\"parseUnparsedAttributes\"),parse={parseSetCookie:s,parseUnparsedAttributes:i},parse}o(requireParse,\"requireParse\");var cookies,hasRequiredCookies;function requireCookies(){if(hasRequiredCookies)return cookies;hasRequiredCookies=1;const{parseSetCookie:e}=requireParse(),{stringify:A,getHeadersList:t}=requireUtil$2(),{webidl:n}=requireWebidl(),{Headers:r}=requireHeaders();function s(C){n.argumentLengthCheck(arguments,1,{header:\"getCookies\"}),n.brandCheck(C,r,{strict:!1});const I=C.get(\"cookie\"),a={};if(!I)return a;for(const f of I.split(\";\")){const[h,...L]=f.split(\"=\");a[h.trim()]=L.join(\"=\")}return a}o(s,\"getCookies\");function i(C,I,a){n.argumentLengthCheck(arguments,2,{header:\"deleteCookie\"}),n.brandCheck(C,r,{strict:!1}),I=n.converters.DOMString(I),a=n.converters.DeleteCookieAttributes(a),Q(C,{name:I,value:\"\",expires:new Date(0),...a})}o(i,\"deleteCookie\");function E(C){n.argumentLengthCheck(arguments,1,{header:\"getSetCookies\"}),n.brandCheck(C,r,{strict:!1});const I=t(C).cookies;return I?I.map(a=>e(Array.isArray(a)?a[1]:a)):[]}o(E,\"getSetCookies\");function Q(C,I){n.argumentLengthCheck(arguments,2,{header:\"setCookie\"}),n.brandCheck(C,r,{strict:!1}),I=n.converters.Cookie(I);const a=A(I);a&&C.append(\"Set-Cookie\",a)}return o(Q,\"setCookie\"),n.converters.DeleteCookieAttributes=n.dictionaryConverter([{converter:n.nullableConverter(n.converters.DOMString),key:\"path\",defaultValue:null},{converter:n.nullableConverter(n.converters.DOMString),key:\"domain\",defaultValue:null}]),n.converters.Cookie=n.dictionaryConverter([{converter:n.converters.DOMString,key:\"name\"},{converter:n.converters.DOMString,key:\"value\"},{converter:n.nullableConverter(C=>typeof C==\"number\"?n.converters[\"unsigned long long\"](C):new Date(C)),key:\"expires\",defaultValue:null},{converter:n.nullableConverter(n.converters[\"long long\"]),key:\"maxAge\",defaultValue:null},{converter:n.nullableConverter(n.converters.DOMString),key:\"domain\",defaultValue:null},{converter:n.nullableConverter(n.converters.DOMString),key:\"path\",defaultValue:null},{converter:n.nullableConverter(n.converters.boolean),key:\"secure\",defaultValue:null},{converter:n.nullableConverter(n.converters.boolean),key:\"httpOnly\",defaultValue:null},{converter:n.converters.USVString,key:\"sameSite\",allowedValues:[\"Strict\",\"Lax\",\"None\"]},{converter:n.sequenceConverter(n.converters.DOMString),key:\"unparsed\",defaultValue:[]}]),cookies={getCookies:s,deleteCookie:i,getSetCookies:E,setCookie:Q},cookies}o(requireCookies,\"requireCookies\");var events,hasRequiredEvents;function requireEvents(){var E,C,a;if(hasRequiredEvents)return events;hasRequiredEvents=1;const{webidl:e}=requireWebidl(),{kEnumerableProperty:A}=util$m,{MessagePort:t}=require$$2__default,Q=class Q extends Event{constructor(c,l={}){e.argumentLengthCheck(arguments,1,{header:\"MessageEvent constructor\"}),c=e.converters.DOMString(c),l=e.converters.MessageEventInit(l);super(c,l);CA(this,E,void 0);EA(this,E,l)}get data(){return e.brandCheck(this,Q),p(this,E).data}get origin(){return e.brandCheck(this,Q),p(this,E).origin}get lastEventId(){return e.brandCheck(this,Q),p(this,E).lastEventId}get source(){return e.brandCheck(this,Q),p(this,E).source}get ports(){return e.brandCheck(this,Q),Object.isFrozen(p(this,E).ports)||Object.freeze(p(this,E).ports),p(this,E).ports}initMessageEvent(c,l=!1,S=!1,k=null,w=\"\",U=\"\",M=null,B=[]){return e.brandCheck(this,Q),e.argumentLengthCheck(arguments,1,{header:\"MessageEvent.initMessageEvent\"}),new Q(c,{bubbles:l,cancelable:S,data:k,origin:w,lastEventId:U,source:M,ports:B})}};E=new WeakMap,o(Q,\"MessageEvent\");let n=Q;const I=class I extends Event{constructor(c,l={}){e.argumentLengthCheck(arguments,1,{header:\"CloseEvent constructor\"}),c=e.converters.DOMString(c),l=e.converters.CloseEventInit(l);super(c,l);CA(this,C,void 0);EA(this,C,l)}get wasClean(){return e.brandCheck(this,I),p(this,C).wasClean}get code(){return e.brandCheck(this,I),p(this,C).code}get reason(){return e.brandCheck(this,I),p(this,C).reason}};C=new WeakMap,o(I,\"CloseEvent\");let r=I;const f=class f extends Event{constructor(c,l){e.argumentLengthCheck(arguments,1,{header:\"ErrorEvent constructor\"});super(c,l);CA(this,a,void 0);c=e.converters.DOMString(c),l=e.converters.ErrorEventInit(l??{}),EA(this,a,l)}get message(){return e.brandCheck(this,f),p(this,a).message}get filename(){return e.brandCheck(this,f),p(this,a).filename}get lineno(){return e.brandCheck(this,f),p(this,a).lineno}get colno(){return e.brandCheck(this,f),p(this,a).colno}get error(){return e.brandCheck(this,f),p(this,a).error}};a=new WeakMap,o(f,\"ErrorEvent\");let s=f;Object.defineProperties(n.prototype,{[Symbol.toStringTag]:{value:\"MessageEvent\",configurable:!0},data:A,origin:A,lastEventId:A,source:A,ports:A,initMessageEvent:A}),Object.defineProperties(r.prototype,{[Symbol.toStringTag]:{value:\"CloseEvent\",configurable:!0},reason:A,code:A,wasClean:A}),Object.defineProperties(s.prototype,{[Symbol.toStringTag]:{value:\"ErrorEvent\",configurable:!0},message:A,filename:A,lineno:A,colno:A,error:A}),e.converters.MessagePort=e.interfaceConverter(t),e.converters[\"sequence<MessagePort>\"]=e.sequenceConverter(e.converters.MessagePort);const i=[{key:\"bubbles\",converter:e.converters.boolean,defaultValue:!1},{key:\"cancelable\",converter:e.converters.boolean,defaultValue:!1},{key:\"composed\",converter:e.converters.boolean,defaultValue:!1}];return e.converters.MessageEventInit=e.dictionaryConverter([...i,{key:\"data\",converter:e.converters.any,defaultValue:null},{key:\"origin\",converter:e.converters.USVString,defaultValue:\"\"},{key:\"lastEventId\",converter:e.converters.DOMString,defaultValue:\"\"},{key:\"source\",converter:e.nullableConverter(e.converters.MessagePort),defaultValue:null},{key:\"ports\",converter:e.converters[\"sequence<MessagePort>\"],get defaultValue(){return[]}}]),e.converters.CloseEventInit=e.dictionaryConverter([...i,{key:\"wasClean\",converter:e.converters.boolean,defaultValue:!1},{key:\"code\",converter:e.converters[\"unsigned short\"],defaultValue:0},{key:\"reason\",converter:e.converters.USVString,defaultValue:\"\"}]),e.converters.ErrorEventInit=e.dictionaryConverter([...i,{key:\"message\",converter:e.converters.DOMString,defaultValue:\"\"},{key:\"filename\",converter:e.converters.USVString,defaultValue:\"\"},{key:\"lineno\",converter:e.converters[\"unsigned long\"],defaultValue:0},{key:\"colno\",converter:e.converters[\"unsigned long\"],defaultValue:0},{key:\"error\",converter:e.converters.any}]),events={MessageEvent:n,CloseEvent:r,ErrorEvent:s},events}o(requireEvents,\"requireEvents\");var constants,hasRequiredConstants;function requireConstants(){if(hasRequiredConstants)return constants;hasRequiredConstants=1;const e=\"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\",A={enumerable:!0,writable:!1,configurable:!1},t={CONNECTING:0,OPEN:1,CLOSING:2,CLOSED:3},n={NOT_SENT:0,PROCESSING:1,SENT:2},r={CONTINUATION:0,TEXT:1,BINARY:2,CLOSE:8,PING:9,PONG:10},s=2**16-1,i={INFO:0,PAYLOADLENGTH_16:2,PAYLOADLENGTH_64:3,READ_DATA:4},E=Buffer.allocUnsafe(0);return constants={uid:e,sentCloseFrameState:n,staticPropertyDescriptors:A,states:t,opcodes:r,maxUnsigned16Bit:s,parserStates:i,emptyBuffer:E},constants}o(requireConstants,\"requireConstants\");var symbols,hasRequiredSymbols;function requireSymbols(){return hasRequiredSymbols||(hasRequiredSymbols=1,symbols={kWebSocketURL:Symbol(\"url\"),kReadyState:Symbol(\"ready state\"),kController:Symbol(\"controller\"),kResponse:Symbol(\"response\"),kBinaryType:Symbol(\"binary type\"),kSentClose:Symbol(\"sent close\"),kReceivedClose:Symbol(\"received close\"),kByteParser:Symbol(\"byte parser\")}),symbols}o(requireSymbols,\"requireSymbols\");var util$2,hasRequiredUtil$1;function requireUtil$1(){if(hasRequiredUtil$1)return util$2;hasRequiredUtil$1=1;const{kReadyState:e,kController:A,kResponse:t,kBinaryType:n,kWebSocketURL:r}=requireSymbols(),{states:s,opcodes:i}=requireConstants(),{MessageEvent:E,ErrorEvent:Q}=requireEvents(),{isUtf8:C}=require$$6__default;function I(B){return B[e]===s.CONNECTING}o(I,\"isConnecting\");function a(B){return B[e]===s.OPEN}o(a,\"isEstablished\");function f(B){return B[e]===s.CLOSING}o(f,\"isClosing\");function h(B){return B[e]===s.CLOSED}o(h,\"isClosed\");function L(B,D,G=Event,g={}){const d=new G(B,g);D.dispatchEvent(d)}o(L,\"fireEvent\");function c(B,D,G){if(B[e]!==s.OPEN)return;let g;if(D===i.TEXT)try{g=M(G)}catch{k(B,\"Received invalid UTF-8 in text frame.\");return}else D===i.BINARY&&(B[n]===\"blob\"?g=new Blob([G]):g=new Uint8Array(G).buffer);L(\"message\",B,E,{origin:B[r].origin,data:g})}o(c,\"websocketMessageReceived\");function l(B){if(B.length===0)return!1;for(let D=0;D<B.length;++D){const G=B.charCodeAt(D);if(G<33||G>126||G===34||G===40||G===41||G===44||G===47||G===58||G===59||G===60||G===61||G===62||G===63||G===64||G===91||G===92||G===93||G===123||G===125)return!1}return!0}o(l,\"isValidSubprotocol\");function S(B){return B>=1e3&&B<1015?B!==1004&&B!==1005&&B!==1006:B>=3e3&&B<=4999}o(S,\"isValidStatusCode\");function k(B,D){const{[A]:G,[t]:g}=B;G.abort(),g?.socket&&!g.socket.destroyed&&g.socket.destroy(),D&&L(\"error\",B,Q,{error:new Error(D)})}o(k,\"failWebsocketConnection\");const w=typeof process.versions.icu==\"string\",U=w?new TextDecoder(\"utf-8\",{fatal:!0}):void 0;function M(B){if(w)return U.decode(B);if(!C?.(B))throw C||process.emitWarning(\"ICU is not supported and no fallback exists. Please upgrade to at least Node v18.14.0.\",{code:\"UNDICI-WS-NO-ICU\"}),new TypeError(\"Invalid utf-8 received.\");return B.toString(\"utf-8\")}return o(M,\"utf8Decode\"),util$2={isConnecting:I,isEstablished:a,isClosing:f,isClosed:h,fireEvent:L,isValidSubprotocol:l,isValidStatusCode:S,failWebsocketConnection:k,websocketMessageReceived:c,utf8Decode:M},util$2}o(requireUtil$1,\"requireUtil$1\");var connection,hasRequiredConnection;function requireConnection(){if(hasRequiredConnection)return connection;hasRequiredConnection=1;const{uid:e,states:A,sentCloseFrameState:t}=requireConstants(),{kReadyState:n,kSentClose:r,kByteParser:s,kReceivedClose:i}=requireSymbols(),{fireEvent:E,failWebsocketConnection:Q}=requireUtil$1(),{channels:C}=diagnostics,{CloseEvent:I}=requireEvents(),{makeRequest:a}=requireRequest(),{fetching:f}=requireFetch(),{Headers:h}=requireHeaders(),{getDecodeSplit:L}=requireUtil$5(),{kHeadersList:c}=symbols$4;let l;try{l=__webpack_require__(/*! node:crypto */ \"node:crypto\")}catch{}function S(M,B,D,G,g){const d=M;d.protocol=M.protocol===\"ws:\"?\"http:\":\"https:\";const F=a({urlList:[d],serviceWorkers:\"none\",referrer:\"no-referrer\",mode:\"websocket\",credentials:\"include\",cache:\"no-store\",redirect:\"error\"});if(g.headers){const m=new h(g.headers)[c];F.headersList=m}const N=l.randomBytes(16).toString(\"base64\");F.headersList.append(\"sec-websocket-key\",N),F.headersList.append(\"sec-websocket-version\",\"13\");for(const m of B)F.headersList.append(\"sec-websocket-protocol\",m);const u=\"\";return f({request:F,useParallelQueue:!0,dispatcher:g.dispatcher,processResponse(m){if(m.type===\"error\"||m.status!==101){Q(D,\"Received network error or non-101 status code.\");return}if(B.length!==0&&!m.headersList.get(\"Sec-WebSocket-Protocol\")){Q(D,\"Server did not respond with sent protocols.\");return}if(m.headersList.get(\"Upgrade\")?.toLowerCase()!==\"websocket\"){Q(D,'Server did not set Upgrade header to \"websocket\".');return}if(m.headersList.get(\"Connection\")?.toLowerCase()!==\"upgrade\"){Q(D,'Server did not set Connection header to \"upgrade\".');return}const T=m.headersList.get(\"Sec-WebSocket-Accept\"),v=l.createHash(\"sha1\").update(N+e).digest(\"base64\");if(T!==v){Q(D,\"Incorrect hash received in Sec-WebSocket-Accept header.\");return}const Z=m.headersList.get(\"Sec-WebSocket-Extensions\");if(Z!==null&&Z!==u){Q(D,\"Received different permessage-deflate than the one set.\");return}const P=m.headersList.get(\"Sec-WebSocket-Protocol\");if(P!==null&&!L(\"sec-websocket-protocol\",F.headersList).includes(P)){Q(D,\"Protocol was not set in the opening handshake.\");return}m.socket.on(\"data\",k),m.socket.on(\"close\",w),m.socket.on(\"error\",U),C.open.hasSubscribers&&C.open.publish({address:m.socket.address(),protocol:P,extensions:Z}),G(m)}})}o(S,\"establishWebSocketConnection\");function k(M){this.ws[s].write(M)||this.pause()}o(k,\"onSocketData\");function w(){const{ws:M}=this,B=M[r]===t.SENT&&M[i];let D=1005,G=\"\";const g=M[s].closingInfo;g?(D=g.code??1005,G=g.reason):M[r]!==t.SENT&&(D=1006),M[n]=A.CLOSED,E(\"close\",M,I,{wasClean:B,code:D,reason:G}),C.close.hasSubscribers&&C.close.publish({websocket:M,code:D,reason:G})}o(w,\"onSocketClose\");function U(M){const{ws:B}=this;B[n]=A.CLOSING,C.socketError.hasSubscribers&&C.socketError.publish(M),this.destroy()}return o(U,\"onSocketError\"),connection={establishWebSocketConnection:S},connection}o(requireConnection,\"requireConnection\");var frame,hasRequiredFrame;function requireFrame(){if(hasRequiredFrame)return frame;hasRequiredFrame=1;const{maxUnsigned16Bit:e}=requireConstants();let A;try{A=__webpack_require__(/*! node:crypto */ \"node:crypto\")}catch{}const n=class n{constructor(s){this.frameData=s,this.maskKey=A.randomBytes(4)}createFrame(s){const i=this.frameData?.byteLength??0;let E=i,Q=6;i>e?(Q+=8,E=127):i>125&&(Q+=2,E=126);const C=Buffer.allocUnsafe(i+Q);C[0]=C[1]=0,C[0]|=128,C[0]=(C[0]&240)+s;/*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */C[Q-4]=this.maskKey[0],C[Q-3]=this.maskKey[1],C[Q-2]=this.maskKey[2],C[Q-1]=this.maskKey[3],C[1]=E,E===126?C.writeUInt16BE(i,2):E===127&&(C[2]=C[3]=0,C.writeUIntBE(i,4,6)),C[1]|=128;for(let I=0;I<i;I++)C[Q+I]=this.frameData[I]^this.maskKey[I%4];return C}};o(n,\"WebsocketFrameSend\");let t=n;return frame={WebsocketFrameSend:t},frame}o(requireFrame,\"requireFrame\");var receiver,hasRequiredReceiver;function requireReceiver(){var S,k,w,U,M;if(hasRequiredReceiver)return receiver;hasRequiredReceiver=1;const{Writable:e}=Stream__default,{parserStates:A,opcodes:t,states:n,emptyBuffer:r,sentCloseFrameState:s}=requireConstants(),{kReadyState:i,kSentClose:E,kResponse:Q,kReceivedClose:C}=requireSymbols(),{channels:I}=diagnostics,{isValidStatusCode:a,failWebsocketConnection:f,websocketMessageReceived:h,utf8Decode:L}=requireUtil$1(),{WebsocketFrameSend:c}=requireFrame(),B=class B extends e{constructor(g){super();CA(this,S,[]);CA(this,k,0);CA(this,w,A.INFO);CA(this,U,{});CA(this,M,[]);this.ws=g}_write(g,d,F){p(this,S).push(g),EA(this,k,p(this,k)+g.length),this.run(F)}run(g){var d;for(;;){if(p(this,w)===A.INFO){if(p(this,k)<2)return g();const F=this.consume(2);if(p(this,U).fin=(F[0]&128)!==0,p(this,U).opcode=F[0]&15,(d=p(this,U)).originalOpcode??(d.originalOpcode=p(this,U).opcode),p(this,U).fragmented=!p(this,U).fin&&p(this,U).opcode!==t.CONTINUATION,p(this,U).fragmented&&p(this,U).opcode!==t.BINARY&&p(this,U).opcode!==t.TEXT){f(this.ws,\"Invalid frame type was fragmented.\");return}const N=F[1]&127;if(N<=125?(p(this,U).payloadLength=N,EA(this,w,A.READ_DATA)):N===126?EA(this,w,A.PAYLOADLENGTH_16):N===127&&EA(this,w,A.PAYLOADLENGTH_64),p(this,U).fragmented&&N>125){f(this.ws,\"Fragmented frame exceeded 125 bytes.\");return}else if((p(this,U).opcode===t.PING||p(this,U).opcode===t.PONG||p(this,U).opcode===t.CLOSE)&&N>125){f(this.ws,\"Payload length for control frame exceeded 125 bytes.\");return}else if(p(this,U).opcode===t.CLOSE){if(N===1){f(this.ws,\"Received close frame with a 1-byte body.\");return}const u=this.consume(N);if(p(this,U).closeInfo=this.parseCloseBody(u),this.ws[E]!==s.SENT){let b=r;p(this,U).closeInfo.code&&(b=Buffer.allocUnsafe(2),b.writeUInt16BE(p(this,U).closeInfo.code,0));const m=new c(b);this.ws[Q].socket.write(m.createFrame(t.CLOSE),T=>{T||(this.ws[E]=s.SENT)})}this.ws[i]=n.CLOSING,this.ws[C]=!0,this.end();return}else if(p(this,U).opcode===t.PING){const u=this.consume(N);if(!this.ws[C]){const b=new c(u);this.ws[Q].socket.write(b.createFrame(t.PONG)),I.ping.hasSubscribers&&I.ping.publish({payload:u})}if(EA(this,w,A.INFO),p(this,k)>0)continue;g();return}else if(p(this,U).opcode===t.PONG){const u=this.consume(N);if(I.pong.hasSubscribers&&I.pong.publish({payload:u}),p(this,k)>0)continue;g();return}}else if(p(this,w)===A.PAYLOADLENGTH_16){if(p(this,k)<2)return g();const F=this.consume(2);p(this,U).payloadLength=F.readUInt16BE(0),EA(this,w,A.READ_DATA)}else if(p(this,w)===A.PAYLOADLENGTH_64){if(p(this,k)<8)return g();const F=this.consume(8),N=F.readUInt32BE(0);if(N>2**31-1){f(this.ws,\"Received payload length > 2^31 bytes.\");return}const u=F.readUInt32BE(4);p(this,U).payloadLength=(N<<8)+u,EA(this,w,A.READ_DATA)}else if(p(this,w)===A.READ_DATA){if(p(this,k)<p(this,U).payloadLength)return g();if(p(this,k)>=p(this,U).payloadLength){const F=this.consume(p(this,U).payloadLength);if(p(this,M).push(F),!p(this,U).fragmented||p(this,U).fin&&p(this,U).opcode===t.CONTINUATION){const N=Buffer.concat(p(this,M));h(this.ws,p(this,U).originalOpcode,N),EA(this,U,{}),p(this,M).length=0}EA(this,w,A.INFO)}}if(p(this,k)===0){g();break}}}consume(g){if(g>p(this,k))return null;if(g===0)return r;if(p(this,S)[0].length===g)return EA(this,k,p(this,k)-p(this,S)[0].length),p(this,S).shift();const d=Buffer.allocUnsafe(g);let F=0;for(;F!==g;){const N=p(this,S)[0],{length:u}=N;if(u+F===g){d.set(p(this,S).shift(),F);break}else if(u+F>g){d.set(N.subarray(0,g-F),F),p(this,S)[0]=N.subarray(g-F);break}else d.set(p(this,S).shift(),F),F+=N.length}return EA(this,k,p(this,k)-g),d}parseCloseBody(g){let d;g.length>=2&&(d=g.readUInt16BE(0));let F=g.subarray(2);if(F[0]===239&&F[1]===187&&F[2]===191&&(F=F.subarray(3)),d!==void 0&&!a(d))return null;try{F=L(F)}catch{return null}return{code:d,reason:F}}get closingInfo(){return p(this,U).closeInfo}};S=new WeakMap,k=new WeakMap,w=new WeakMap,U=new WeakMap,M=new WeakMap,o(B,\"ByteParser\");let l=B;return receiver={ByteParser:l},receiver}o(requireReceiver,\"requireReceiver\");var websocket,hasRequiredWebsocket;function requireWebsocket(){var m,T,v,Z,P,kt;if(hasRequiredWebsocket)return websocket;hasRequiredWebsocket=1;const{webidl:e}=requireWebidl(),{URLSerializer:A}=requireDataUrl(),{getGlobalOrigin:t}=requireGlobal(),{staticPropertyDescriptors:n,states:r,sentCloseFrameState:s,opcodes:i,emptyBuffer:E}=requireConstants(),{kWebSocketURL:Q,kReadyState:C,kController:I,kBinaryType:a,kResponse:f,kSentClose:h,kByteParser:L}=requireSymbols(),{isConnecting:c,isEstablished:l,isClosed:S,isClosing:k,isValidSubprotocol:w,failWebsocketConnection:U,fireEvent:M}=requireUtil$1(),{establishWebSocketConnection:B}=requireConnection(),{WebsocketFrameSend:D}=requireFrame(),{ByteParser:G}=requireReceiver(),{kEnumerableProperty:g,isBlobLike:d}=util$m,{getGlobalDispatcher:F}=global,{types:N}=require$$0__default$1;let u=!1;const K=class K extends EventTarget{constructor(X,$=[]){super();CA(this,P);CA(this,m,{open:null,error:null,close:null,message:null});CA(this,T,0);CA(this,v,\"\");CA(this,Z,\"\");e.argumentLengthCheck(arguments,1,{header:\"WebSocket constructor\"}),u||(u=!0,process.emitWarning(\"WebSockets are experimental, expect them to change at any time.\",{code:\"UNDICI-WS\"}));const V=e.converters[\"DOMString or sequence<DOMString> or WebSocketInit\"]($);X=e.converters.USVString(X),$=V.protocols;const q=t();let z;try{z=new URL(X,q)}catch(rA){throw new DOMException(rA,\"SyntaxError\")}if(z.protocol===\"http:\"?z.protocol=\"ws:\":z.protocol===\"https:\"&&(z.protocol=\"wss:\"),z.protocol!==\"ws:\"&&z.protocol!==\"wss:\")throw new DOMException(`Expected a ws: or wss: protocol, got ${z.protocol}`,\"SyntaxError\");if(z.hash||z.href.endsWith(\"#\"))throw new DOMException(\"Got fragment\",\"SyntaxError\");if(typeof $==\"string\"&&($=[$]),$.length!==new Set($.map(rA=>rA.toLowerCase())).size)throw new DOMException(\"Invalid Sec-WebSocket-Protocol value\",\"SyntaxError\");if($.length>0&&!$.every(rA=>w(rA)))throw new DOMException(\"Invalid Sec-WebSocket-Protocol value\",\"SyntaxError\");this[Q]=new URL(z.href),this[I]=B(z,$,this,rA=>kA(this,P,kt).call(this,rA),V),this[C]=K.CONNECTING,this[h]=s.NOT_SENT,this[a]=\"blob\"}close(X=void 0,$=void 0){if(e.brandCheck(this,K),X!==void 0&&(X=e.converters[\"unsigned short\"](X,{clamp:!0})),$!==void 0&&($=e.converters.USVString($)),X!==void 0&&X!==1e3&&(X<3e3||X>4999))throw new DOMException(\"invalid code\",\"InvalidAccessError\");let V=0;if($!==void 0&&(V=Buffer.byteLength($),V>123))throw new DOMException(`Reason must be less than 123 bytes; received ${V}`,\"SyntaxError\");if(!(k(this)||S(this)))if(!l(this))U(this,\"Connection was closed before it was established.\"),this[C]=K.CLOSING;else if(this[h]===s.NOT_SENT){this[h]=s.PROCESSING;const q=new D;X!==void 0&&$===void 0?(q.frameData=Buffer.allocUnsafe(2),q.frameData.writeUInt16BE(X,0)):X!==void 0&&$!==void 0?(q.frameData=Buffer.allocUnsafe(2+V),q.frameData.writeUInt16BE(X,0),q.frameData.write($,2,\"utf-8\")):q.frameData=E,this[f].socket.write(q.createFrame(i.CLOSE),rA=>{rA||(this[h]=s.SENT)}),this[C]=r.CLOSING}else this[C]=K.CLOSING}send(X){if(e.brandCheck(this,K),e.argumentLengthCheck(arguments,1,{header:\"WebSocket.send\"}),X=e.converters.WebSocketSendData(X),c(this))throw new DOMException(\"Sent before connected.\",\"InvalidStateError\");if(!l(this)||k(this))return;const $=this[f].socket;if(typeof X==\"string\"){const V=Buffer.from(X),z=new D(V).createFrame(i.TEXT);EA(this,T,p(this,T)+V.byteLength),$.write(z,()=>{EA(this,T,p(this,T)-V.byteLength)})}else if(N.isArrayBuffer(X)){const V=Buffer.from(X),z=new D(V).createFrame(i.BINARY);EA(this,T,p(this,T)+V.byteLength),$.write(z,()=>{EA(this,T,p(this,T)-V.byteLength)})}else if(ArrayBuffer.isView(X)){const V=Buffer.from(X,X.byteOffset,X.byteLength),z=new D(V).createFrame(i.BINARY);EA(this,T,p(this,T)+V.byteLength),$.write(z,()=>{EA(this,T,p(this,T)-V.byteLength)})}else if(d(X)){const V=new D;X.arrayBuffer().then(q=>{const z=Buffer.from(q);V.frameData=z;const rA=V.createFrame(i.BINARY);EA(this,T,p(this,T)+z.byteLength),$.write(rA,()=>{EA(this,T,p(this,T)-z.byteLength)})})}}get readyState(){return e.brandCheck(this,K),this[C]}get bufferedAmount(){return e.brandCheck(this,K),p(this,T)}get url(){return e.brandCheck(this,K),A(this[Q])}get extensions(){return e.brandCheck(this,K),p(this,Z)}get protocol(){return e.brandCheck(this,K),p(this,v)}get onopen(){return e.brandCheck(this,K),p(this,m).open}set onopen(X){e.brandCheck(this,K),p(this,m).open&&this.removeEventListener(\"open\",p(this,m).open),typeof X==\"function\"?(p(this,m).open=X,this.addEventListener(\"open\",X)):p(this,m).open=null}get onerror(){return e.brandCheck(this,K),p(this,m).error}set onerror(X){e.brandCheck(this,K),p(this,m).error&&this.removeEventListener(\"error\",p(this,m).error),typeof X==\"function\"?(p(this,m).error=X,this.addEventListener(\"error\",X)):p(this,m).error=null}get onclose(){return e.brandCheck(this,K),p(this,m).close}set onclose(X){e.brandCheck(this,K),p(this,m).close&&this.removeEventListener(\"close\",p(this,m).close),typeof X==\"function\"?(p(this,m).close=X,this.addEventListener(\"close\",X)):p(this,m).close=null}get onmessage(){return e.brandCheck(this,K),p(this,m).message}set onmessage(X){e.brandCheck(this,K),p(this,m).message&&this.removeEventListener(\"message\",p(this,m).message),typeof X==\"function\"?(p(this,m).message=X,this.addEventListener(\"message\",X)):p(this,m).message=null}get binaryType(){return e.brandCheck(this,K),this[a]}set binaryType(X){e.brandCheck(this,K),X!==\"blob\"&&X!==\"arraybuffer\"?this[a]=\"blob\":this[a]=X}};m=new WeakMap,T=new WeakMap,v=new WeakMap,Z=new WeakMap,P=new WeakSet,kt=o(function(X){this[f]=X;const $=new G(this);$.on(\"drain\",o(function(){this.ws[f].socket.resume()},\"onParserDrain\")),X.socket.ws=this,this[L]=$,this[C]=r.OPEN;const V=X.headersList.get(\"sec-websocket-extensions\");V!==null&&EA(this,Z,V);const q=X.headersList.get(\"sec-websocket-protocol\");q!==null&&EA(this,v,q),M(\"open\",this)},\"#onConnectionEstablished\"),o(K,\"WebSocket\");let b=K;return b.CONNECTING=b.prototype.CONNECTING=r.CONNECTING,b.OPEN=b.prototype.OPEN=r.OPEN,b.CLOSING=b.prototype.CLOSING=r.CLOSING,b.CLOSED=b.prototype.CLOSED=r.CLOSED,Object.defineProperties(b.prototype,{CONNECTING:n,OPEN:n,CLOSING:n,CLOSED:n,url:g,readyState:g,bufferedAmount:g,onopen:g,onerror:g,onclose:g,close:g,onmessage:g,binaryType:g,send:g,extensions:g,protocol:g,[Symbol.toStringTag]:{value:\"WebSocket\",writable:!1,enumerable:!1,configurable:!0}}),Object.defineProperties(b,{CONNECTING:n,OPEN:n,CLOSING:n,CLOSED:n}),e.converters[\"sequence<DOMString>\"]=e.sequenceConverter(e.converters.DOMString),e.converters[\"DOMString or sequence<DOMString>\"]=function(tA){return e.util.Type(tA)===\"Object\"&&Symbol.iterator in tA?e.converters[\"sequence<DOMString>\"](tA):e.converters.DOMString(tA)},e.converters.WebSocketInit=e.dictionaryConverter([{key:\"protocols\",converter:e.converters[\"DOMString or sequence<DOMString>\"],get defaultValue(){return[]}},{key:\"dispatcher\",converter:tA=>tA,get defaultValue(){return F()}},{key:\"headers\",converter:e.nullableConverter(e.converters.HeadersInit)}]),e.converters[\"DOMString or sequence<DOMString> or WebSocketInit\"]=function(tA){return e.util.Type(tA)===\"Object\"&&!(Symbol.iterator in tA)?e.converters.WebSocketInit(tA):{protocols:e.converters[\"DOMString or sequence<DOMString>\"](tA)}},e.converters.WebSocketSendData=function(tA){if(e.util.Type(tA)===\"Object\"){if(d(tA))return e.converters.Blob(tA,{strict:!1});if(ArrayBuffer.isView(tA)||N.isArrayBuffer(tA))return e.converters.BufferSource(tA)}return e.converters.USVString(tA)},websocket={WebSocket:b},websocket}o(requireWebsocket,\"requireWebsocket\");var util$1,hasRequiredUtil;function requireUtil(){if(hasRequiredUtil)return util$1;hasRequiredUtil=1;function e(n){return n.indexOf(\"\\0\")===-1}o(e,\"isValidLastEventId\");function A(n){if(n.length===0)return!1;for(let r=0;r<n.length;r++)if(n.charCodeAt(r)<48||n.charCodeAt(r)>57)return!1;return!0}o(A,\"isASCIINumber\");function t(n){return new Promise(r=>{setTimeout(r,n).unref()})}return o(t,\"delay\"),util$1={isValidLastEventId:e,isASCIINumber:A,delay:t},util$1}o(requireUtil,\"requireUtil\");var eventsourceStream,hasRequiredEventsourceStream;function requireEventsourceStream(){if(hasRequiredEventsourceStream)return eventsourceStream;hasRequiredEventsourceStream=1;const{Transform:e}=Stream__default,{isASCIINumber:A,isValidLastEventId:t}=requireUtil(),n=[239,187,191],r=10,s=13,i=58,E=32,C=class C extends e{constructor(f={}){f.readableObjectMode=!0;super(f);NA(this,\"state\",null);NA(this,\"checkBOM\",!0);NA(this,\"crlfCheck\",!1);NA(this,\"eventEndCheck\",!1);NA(this,\"buffer\",null);NA(this,\"pos\",0);NA(this,\"event\",{data:void 0,event:void 0,id:void 0,retry:void 0});this.state=f.eventSourceSettings||{},f.push&&(this.push=f.push)}_transform(f,h,L){if(f.length===0){L();return}if(this.buffer?this.buffer=Buffer.concat([this.buffer,f]):this.buffer=f,this.checkBOM)switch(this.buffer.length){case 1:if(this.buffer[0]===n[0]){L();return}this.checkBOM=!1,L();return;case 2:if(this.buffer[0]===n[0]&&this.buffer[1]===n[1]){L();return}this.checkBOM=!1;break;case 3:if(this.buffer[0]===n[0]&&this.buffer[1]===n[1]&&this.buffer[2]===n[2]){this.buffer=Buffer.alloc(0),this.checkBOM=!1,L();return}this.checkBOM=!1;break;default:this.buffer[0]===n[0]&&this.buffer[1]===n[1]&&this.buffer[2]===n[2]&&(this.buffer=this.buffer.subarray(3)),this.checkBOM=!1;break}for(;this.pos<this.buffer.length;){if(this.eventEndCheck){if(this.crlfCheck){if(this.buffer[this.pos]===r){this.buffer=this.buffer.subarray(this.pos+1),this.pos=0,this.crlfCheck=!1;continue}this.crlfCheck=!1}if(this.buffer[this.pos]===r||this.buffer[this.pos]===s){this.buffer[this.pos]===s&&(this.crlfCheck=!0),this.buffer=this.buffer.subarray(this.pos+1),this.pos=0,(this.event.data!==void 0||this.event.event||this.event.id||this.event.retry)&&this.processEvent(this.event),this.clearEvent();continue}this.eventEndCheck=!1;continue}if(this.buffer[this.pos]===r||this.buffer[this.pos]===s){this.buffer[this.pos]===s&&(this.crlfCheck=!0),this.parseLine(this.buffer.subarray(0,this.pos),this.event),this.buffer=this.buffer.subarray(this.pos+1),this.pos=0,this.eventEndCheck=!0;continue}this.pos++}L()}parseLine(f,h){if(f.length===0)return;const L=f.indexOf(i);if(L===0)return;let c=\"\",l=\"\";if(L!==-1){c=f.subarray(0,L).toString(\"utf8\");let S=L+1;f[S]===E&&++S,l=f.subarray(S).toString(\"utf8\")}else c=f.toString(\"utf8\"),l=\"\";switch(c){case\"data\":h[c]===void 0?h[c]=l:h[c]+=`\n${l}`;break;case\"retry\":A(l)&&(h[c]=l);break;case\"id\":t(l)&&(h[c]=l);break;case\"event\":l.length>0&&(h[c]=l);break}}processEvent(f){f.retry&&A(f.retry)&&(this.state.reconnectionTime=parseInt(f.retry,10)),f.id&&t(f.id)&&(this.state.lastEventId=f.id),f.data!==void 0&&this.push({type:f.event||\"message\",options:{data:f.data,lastEventId:this.state.lastEventId,origin:this.state.origin}})}clearEvent(){this.event={data:void 0,event:void 0,id:void 0,retry:void 0}}};o(C,\"EventSourceStream\");let Q=C;return eventsourceStream={EventSourceStream:Q},eventsourceStream}o(requireEventsourceStream,\"requireEventsourceStream\");var eventsource,hasRequiredEventsource;function requireEventsource(){var U,M,B,D,G,g,d,F,$e,u,_e;if(hasRequiredEventsource)return eventsource;hasRequiredEventsource=1;const{pipeline:e}=Stream__default,{fetching:A}=requireFetch(),{makeRequest:t}=requireRequest(),{getGlobalOrigin:n}=requireGlobal(),{webidl:r}=requireWebidl(),{EventSourceStream:s}=requireEventsourceStream(),{parseMIMEType:i}=requireDataUrl(),{MessageEvent:E}=requireEvents(),{isNetworkError:Q}=requireResponse(),{delay:C}=requireUtil(),{kEnumerableProperty:I}=util$m;let a=!1;const f=3e3,h=0,L=1,c=2,l=\"anonymous\",S=\"use-credentials\",m=class m extends EventTarget{constructor(Z,P={}){super();CA(this,F);CA(this,u);CA(this,U,{open:null,error:null,message:null});CA(this,M,null);CA(this,B,!1);CA(this,D,h);CA(this,G,null);CA(this,g,null);CA(this,d,null);r.argumentLengthCheck(arguments,1,{header:\"EventSource constructor\"}),a||(a=!0,process.emitWarning(\"EventSource is experimental, expect them to change at any time.\",{code:\"UNDICI-ES\"})),Z=r.converters.USVString(Z),P=r.converters.EventSourceInitDict(P),EA(this,d,{origin:n(),policyContainer:{referrerPolicy:\"no-referrer\"},lastEventId:\"\",reconnectionTime:f});let AA;try{AA=new URL(Z,p(this,d).origin),p(this,d).origin=AA.origin}catch(aA){throw new DOMException(aA,\"SyntaxError\")}EA(this,M,AA.href);let K=l;P.withCredentials&&(K=S,EA(this,B,!0));const tA={redirect:\"follow\",keepalive:!0,mode:\"cors\",credentials:K===\"anonymous\"?\"same-origin\":\"omit\",referrer:\"no-referrer\"};tA.client=p(this,d),tA.headersList=[[\"accept\",{name:\"accept\",value:\"text/event-stream\"}]],tA.cache=\"no-store\",tA.initiator=\"other\",tA.urlList=[new URL(p(this,M))],EA(this,G,t(tA)),kA(this,F,$e).call(this)}get readyState(){return p(this,D)}get url(){return p(this,M)}get withCredentials(){return p(this,B)}close(){r.brandCheck(this,m),p(this,D)!==c&&(EA(this,D,c),clearTimeout(p(this,d).reconnectionTimer),p(this,g).abort(),p(this,G)&&EA(this,G,null))}get onopen(){return p(this,U).open}set onopen(Z){p(this,U).open&&this.removeEventListener(\"open\",p(this,U).open),typeof Z==\"function\"?(p(this,U).open=Z,this.addEventListener(\"open\",Z)):p(this,U).open=null}get onmessage(){return p(this,U).message}set onmessage(Z){p(this,U).message&&this.removeEventListener(\"message\",p(this,U).message),typeof Z==\"function\"?(p(this,U).message=Z,this.addEventListener(\"message\",Z)):p(this,U).message=null}get onerror(){return p(this,U).error}set onerror(Z){p(this,U).error&&this.removeEventListener(\"error\",p(this,U).error),typeof Z==\"function\"?(p(this,U).error=Z,this.addEventListener(\"error\",Z)):p(this,U).error=null}};U=new WeakMap,M=new WeakMap,B=new WeakMap,D=new WeakMap,G=new WeakMap,g=new WeakMap,d=new WeakMap,F=new WeakSet,$e=o(function(){if(p(this,D)===c)return;EA(this,D,h);const Z={request:p(this,G)},P=o(AA=>{Q(AA)&&(this.dispatchEvent(new Event(\"error\")),this.close()),kA(this,u,_e).call(this)},\"processEventSourceEndOfBody\");Z.processResponseEndOfBody=P,Z.processResponse=AA=>{if(Q(AA))if(AA.aborted){this.close(),this.dispatchEvent(new Event(\"error\"));return}else{kA(this,u,_e).call(this);return}const K=AA.headersList.get(\"content-type\",!0),tA=K!==null?i(K):\"failure\",aA=tA!==\"failure\"&&tA.essence===\"text/event-stream\";if(AA.status!==200||aA===!1){this.close(),this.dispatchEvent(new Event(\"error\"));return}EA(this,D,L),this.dispatchEvent(new Event(\"open\")),p(this,d).origin=AA.urlList[AA.urlList.length-1].origin;const X=new s({eventSourceSettings:p(this,d),push:$=>{this.dispatchEvent(new E($.type,$.options))}});e(AA.body.stream,X,$=>{$?.aborted===!1&&(this.close(),this.dispatchEvent(new Event(\"error\")))})},EA(this,g,A(Z))},\"#connect\"),u=new WeakSet,_e=o(async function(){p(this,D)!==c&&(EA(this,D,h),this.dispatchEvent(new Event(\"error\")),await C(p(this,d).reconnectionTime),p(this,D)===h&&(p(this,d).lastEventId!==\"\"&&p(this,G).headersList.set(\"last-event-id\",p(this,d).lastEventId,!0),kA(this,F,$e).call(this)))},\"#reconnect\"),o(m,\"EventSource\");let k=m;const w={CONNECTING:{__proto__:null,configurable:!1,enumerable:!0,value:h,writable:!1},OPEN:{__proto__:null,configurable:!1,enumerable:!0,value:L,writable:!1},CLOSED:{__proto__:null,configurable:!1,enumerable:!0,value:c,writable:!1}};return Object.defineProperties(k,w),Object.defineProperties(k.prototype,w),Object.defineProperties(k.prototype,{close:I,onerror:I,onmessage:I,onopen:I,readyState:I,url:I,withCredentials:I}),r.converters.EventSourceInitDict=r.dictionaryConverter([{key:\"withCredentials\",converter:r.converters.boolean,defaultValue:!1}]),eventsource={EventSource:k,defaultReconnectionTime:f},eventsource}o(requireEventsource,\"requireEventsource\");const Dispatcher=dispatcher,Agent=agent,ProxyAgent=proxyAgent,errors=errors$1,util=util$m,{InvalidArgumentError}=errors,api=api$1,{getGlobalDispatcher,setGlobalDispatcher}=global;Object.assign(Dispatcher.prototype,api);var Agent_1=Agent,ProxyAgent_1=ProxyAgent;util.parseHeaders,util.headerNameToString;function makeDispatcher(e){return(A,t,n)=>{if(typeof t==\"function\"&&(n=t,t=null),!A||typeof A!=\"string\"&&typeof A!=\"object\"&&!(A instanceof URL))throw new InvalidArgumentError(\"invalid url\");if(t!=null&&typeof t!=\"object\")throw new InvalidArgumentError(\"invalid opts\");if(t&&t.path!=null){if(typeof t.path!=\"string\")throw new InvalidArgumentError(\"invalid opts.path\");let i=t.path;t.path.startsWith(\"/\")||(i=`/${i}`),A=new URL(util.parseOrigin(A).origin+i)}else t||(t=typeof A==\"object\"?A:{}),A=util.parseURL(A);const{agent:r,dispatcher:s=getGlobalDispatcher()}=t;if(r)throw new InvalidArgumentError(\"unsupported opts.agent. Did you mean opts.client?\");return e.call(s,{...t,origin:A.origin,path:A.search?`${A.pathname}${A.search}`:A.pathname,method:t.method||(t.body?\"PUT\":\"GET\")},n)}}o(makeDispatcher,\"makeDispatcher\"),requireFetch().fetch,requireHeaders().Headers,requireResponse().Response,requireRequest().Request,requireFormdata().FormData,requireFile().File,requireFilereader().FileReader,requireGlobal();const{CacheStorage}=requireCachestorage(),{kConstruct}=requireSymbols$1();new CacheStorage(kConstruct),requireCookies(),requireDataUrl(),requireEvents(),requireWebsocket().WebSocket,makeDispatcher(api.request),makeDispatcher(api.stream),makeDispatcher(api.pipeline),makeDispatcher(api.connect),makeDispatcher(api.upgrade),requireEventsource(),exports.Agent_1=Agent_1,exports.ProxyAgent_1=ProxyAgent_1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native-with-agent/dist/shared/node-fetch-native-with-agent.df7e6bd6.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch-native-with-agent/lib/index.cjs":
/*!*****************************************************************!*\
  !*** ./node_modules/node-fetch-native-with-agent/lib/index.cjs ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const nodeFetch = __webpack_require__(/*! ../dist/index.cjs */ \"(rsc)/./node_modules/node-fetch-native-with-agent/dist/index.cjs\");\n\nfunction fetch(input, options) {\n  return nodeFetch.fetch(input, options);\n}\n\nfor (const key in nodeFetch) {\n  fetch[key] = nodeFetch[key];\n}\n\nmodule.exports = fetch;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC1uYXRpdmUtd2l0aC1hZ2VudC9saWIvaW5kZXguY2pzIiwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQixtQkFBTyxDQUFDLDJGQUFtQjs7QUFFN0M7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9ub2RlLWZldGNoLW5hdGl2ZS13aXRoLWFnZW50L2xpYi9pbmRleC5janM/YTlkMiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBub2RlRmV0Y2ggPSByZXF1aXJlKFwiLi4vZGlzdC9pbmRleC5janNcIik7XG5cbmZ1bmN0aW9uIGZldGNoKGlucHV0LCBvcHRpb25zKSB7XG4gIHJldHVybiBub2RlRmV0Y2guZmV0Y2goaW5wdXQsIG9wdGlvbnMpO1xufVxuXG5mb3IgKGNvbnN0IGtleSBpbiBub2RlRmV0Y2gpIHtcbiAgZmV0Y2hba2V5XSA9IG5vZGVGZXRjaFtrZXldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZldGNoO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native-with-agent/lib/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch-native-with-agent/dist/chunks/multipart-parser.mjs":
/*!************************************************************************************!*\
  !*** ./node_modules/node-fetch-native-with-agent/dist/chunks/multipart-parser.mjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toFormData: () => (/* binding */ Z)\n/* harmony export */ });\n/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:fs */ \"node:fs\");\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:path */ \"node:path\");\n/* harmony import */ var _node_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../node.mjs */ \"(rsc)/./node_modules/node-fetch-native-with-agent/dist/node.mjs\");\n/* harmony import */ var node_http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node:http */ \"node:http\");\n/* harmony import */ var node_https__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! node:https */ \"node:https\");\n/* harmony import */ var node_zlib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! node:zlib */ \"node:zlib\");\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var node_buffer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! node:buffer */ \"node:buffer\");\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! node:util */ \"node:util\");\n/* harmony import */ var _shared_node_fetch_native_with_agent_1a4a356d_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../shared/node-fetch-native-with-agent.1a4a356d.mjs */ \"(rsc)/./node_modules/node-fetch-native-with-agent/dist/shared/node-fetch-native-with-agent.1a4a356d.mjs\");\n/* harmony import */ var node_url__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! node:url */ \"node:url\");\n/* harmony import */ var node_net__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! node:net */ \"node:net\");\nvar B=Object.defineProperty;var E=(u,a)=>B(u,\"name\",{value:a,configurable:!0});let D=0;const t={START_BOUNDARY:D++,HEADER_FIELD_START:D++,HEADER_FIELD:D++,HEADER_VALUE_START:D++,HEADER_VALUE:D++,HEADER_VALUE_ALMOST_DONE:D++,HEADERS_ALMOST_DONE:D++,PART_DATA_START:D++,PART_DATA:D++,END:D++};let w=1;const R={PART_BOUNDARY:w,LAST_BOUNDARY:w*=2},g=10,N=13,x=32,P=45,C=58,I=97,M=122,$=E(u=>u|32,\"lower\"),m=E(()=>{},\"noop\"),F=class F{constructor(a){this.index=0,this.flags=0,this.onHeaderEnd=m,this.onHeaderField=m,this.onHeadersEnd=m,this.onHeaderValue=m,this.onPartBegin=m,this.onPartData=m,this.onPartEnd=m,this.boundaryChars={},a=`\\r\n--`+a;const n=new Uint8Array(a.length);for(let r=0;r<a.length;r++)n[r]=a.charCodeAt(r),this.boundaryChars[n[r]]=!0;this.boundary=n,this.lookbehind=new Uint8Array(this.boundary.length+8),this.state=t.START_BOUNDARY}write(a){let n=0;const r=a.length;let d=this.index,{lookbehind:l,boundary:c,boundaryChars:p,index:e,state:i,flags:A}=this;const H=this.boundary.length,O=H-1,y=a.length;let o,L;const f=E(h=>{this[h+\"Mark\"]=n},\"mark\"),s=E(h=>{delete this[h+\"Mark\"]},\"clear\"),T=E((h,S,_,U)=>{(S===void 0||S!==_)&&this[h](U&&U.subarray(S,_))},\"callback\"),b=E((h,S)=>{const _=h+\"Mark\";_ in this&&(S?(T(h,this[_],n,a),delete this[_]):(T(h,this[_],a.length,a),this[_]=0))},\"dataCallback\");for(n=0;n<r;n++)switch(o=a[n],i){case t.START_BOUNDARY:if(e===c.length-2){if(o===P)A|=R.LAST_BOUNDARY;else if(o!==N)return;e++;break}else if(e-1===c.length-2){if(A&R.LAST_BOUNDARY&&o===P)i=t.END,A=0;else if(!(A&R.LAST_BOUNDARY)&&o===g)e=0,T(\"onPartBegin\"),i=t.HEADER_FIELD_START;else return;break}o!==c[e+2]&&(e=-2),o===c[e+2]&&e++;break;case t.HEADER_FIELD_START:i=t.HEADER_FIELD,f(\"onHeaderField\"),e=0;case t.HEADER_FIELD:if(o===N){s(\"onHeaderField\"),i=t.HEADERS_ALMOST_DONE;break}if(e++,o===P)break;if(o===C){if(e===1)return;b(\"onHeaderField\",!0),i=t.HEADER_VALUE_START;break}if(L=$(o),L<I||L>M)return;break;case t.HEADER_VALUE_START:if(o===x)break;f(\"onHeaderValue\"),i=t.HEADER_VALUE;case t.HEADER_VALUE:o===N&&(b(\"onHeaderValue\",!0),T(\"onHeaderEnd\"),i=t.HEADER_VALUE_ALMOST_DONE);break;case t.HEADER_VALUE_ALMOST_DONE:if(o!==g)return;i=t.HEADER_FIELD_START;break;case t.HEADERS_ALMOST_DONE:if(o!==g)return;T(\"onHeadersEnd\"),i=t.PART_DATA_START;break;case t.PART_DATA_START:i=t.PART_DATA,f(\"onPartData\");case t.PART_DATA:if(d=e,e===0){for(n+=O;n<y&&!(a[n]in p);)n+=H;n-=O,o=a[n]}if(e<c.length)c[e]===o?(e===0&&b(\"onPartData\",!0),e++):e=0;else if(e===c.length)e++,o===N?A|=R.PART_BOUNDARY:o===P?A|=R.LAST_BOUNDARY:e=0;else if(e-1===c.length)if(A&R.PART_BOUNDARY){if(e=0,o===g){A&=~R.PART_BOUNDARY,T(\"onPartEnd\"),T(\"onPartBegin\"),i=t.HEADER_FIELD_START;break}}else A&R.LAST_BOUNDARY&&o===P?(T(\"onPartEnd\"),i=t.END,A=0):e=0;if(e>0)l[e-1]=o;else if(d>0){const h=new Uint8Array(l.buffer,l.byteOffset,l.byteLength);T(\"onPartData\",0,d,h),d=0,f(\"onPartData\"),n--}break;case t.END:break;default:throw new Error(`Unexpected state entered: ${i}`)}b(\"onHeaderField\"),b(\"onHeaderValue\"),b(\"onPartData\"),this.index=e,this.state=i,this.flags=A}end(){if(this.state===t.HEADER_FIELD_START&&this.index===0||this.state===t.PART_DATA&&this.index===this.boundary.length)this.onPartEnd();else if(this.state!==t.END)throw new Error(\"MultipartParser.end(): stream ended unexpectedly\")}};E(F,\"MultipartParser\");let k=F;function v(u){const a=u.match(/\\bfilename=(\"(.*?)\"|([^()<>@,;:\\\\\"/[\\]?={}\\s\\t]+))($|;\\s)/i);if(!a)return;const n=a[2]||a[3]||\"\";let r=n.slice(n.lastIndexOf(\"\\\\\")+1);return r=r.replace(/%22/g,'\"'),r=r.replace(/&#(\\d{4});/g,(d,l)=>String.fromCharCode(l)),r}E(v,\"_fileName\");async function Z(u,a){if(!/multipart/i.test(a))throw new TypeError(\"Failed to fetch\");const n=a.match(/boundary=(?:\"([^\"]+)\"|([^;]+))/i);if(!n)throw new TypeError(\"no or bad content-type header, no multipart boundary\");const r=new k(n[1]||n[2]);let d,l,c,p,e,i;const A=[],H=new _node_mjs__WEBPACK_IMPORTED_MODULE_2__.FormData,O=E(s=>{c+=f.decode(s,{stream:!0})},\"onPartData\"),y=E(s=>{A.push(s)},\"appendToFile\"),o=E(()=>{const s=new _node_mjs__WEBPACK_IMPORTED_MODULE_2__.File(A,i,{type:e});H.append(p,s)},\"appendFileToFormData\"),L=E(()=>{H.append(p,c)},\"appendEntryToFormData\"),f=new TextDecoder(\"utf-8\");f.decode(),r.onPartBegin=function(){r.onPartData=O,r.onPartEnd=L,d=\"\",l=\"\",c=\"\",p=\"\",e=\"\",i=null,A.length=0},r.onHeaderField=function(s){d+=f.decode(s,{stream:!0})},r.onHeaderValue=function(s){l+=f.decode(s,{stream:!0})},r.onHeaderEnd=function(){if(l+=f.decode(),d=d.toLowerCase(),d===\"content-disposition\"){const s=l.match(/\\bname=(\"([^\"]*)\"|([^()<>@,;:\\\\\"/[\\]?={}\\s\\t]+))/i);s&&(p=s[2]||s[3]||\"\"),i=v(l),i&&(r.onPartData=y,r.onPartEnd=o)}else d===\"content-type\"&&(e=l);l=\"\",d=\"\"};for await(const s of u)r.write(s);return r.end(),H}E(Z,\"toFormData\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native-with-agent/dist/chunks/multipart-parser.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch-native-with-agent/dist/index.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/node-fetch-native-with-agent/dist/index.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortController: () => (/* binding */ A),\n/* harmony export */   AbortError: () => (/* reexport safe */ _node_mjs__WEBPACK_IMPORTED_MODULE_0__.AbortError),\n/* harmony export */   Blob: () => (/* binding */ T),\n/* harmony export */   FetchError: () => (/* reexport safe */ _node_mjs__WEBPACK_IMPORTED_MODULE_0__.FetchError),\n/* harmony export */   File: () => (/* binding */ R),\n/* harmony export */   FormData: () => (/* binding */ u),\n/* harmony export */   Headers: () => (/* binding */ d),\n/* harmony export */   Request: () => (/* binding */ $),\n/* harmony export */   Response: () => (/* binding */ C),\n/* harmony export */   blobFrom: () => (/* reexport safe */ _node_mjs__WEBPACK_IMPORTED_MODULE_0__.blobFrom),\n/* harmony export */   blobFromSync: () => (/* reexport safe */ _node_mjs__WEBPACK_IMPORTED_MODULE_0__.blobFromSync),\n/* harmony export */   \"default\": () => (/* binding */ s),\n/* harmony export */   fetch: () => (/* binding */ s),\n/* harmony export */   fileFrom: () => (/* reexport safe */ _node_mjs__WEBPACK_IMPORTED_MODULE_0__.fileFrom),\n/* harmony export */   fileFromSync: () => (/* reexport safe */ _node_mjs__WEBPACK_IMPORTED_MODULE_0__.fileFromSync),\n/* harmony export */   isRedirect: () => (/* reexport safe */ _node_mjs__WEBPACK_IMPORTED_MODULE_0__.isRedirect)\n/* harmony export */ });\n/* harmony import */ var _node_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node.mjs */ \"(rsc)/./node_modules/node-fetch-native-with-agent/dist/node.mjs\");\n/* harmony import */ var node_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:http */ \"node:http\");\n/* harmony import */ var node_https__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:https */ \"node:https\");\n/* harmony import */ var node_zlib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node:zlib */ \"node:zlib\");\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var node_buffer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! node:buffer */ \"node:buffer\");\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! node:util */ \"node:util\");\n/* harmony import */ var _shared_node_fetch_native_with_agent_1a4a356d_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./shared/node-fetch-native-with-agent.1a4a356d.mjs */ \"(rsc)/./node_modules/node-fetch-native-with-agent/dist/shared/node-fetch-native-with-agent.1a4a356d.mjs\");\n/* harmony import */ var node_url__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! node:url */ \"node:url\");\n/* harmony import */ var node_net__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! node:net */ \"node:net\");\n/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! node:fs */ \"node:fs\");\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! node:path */ \"node:path\");\nvar a=Object.defineProperty;var t=(e,r)=>a(e,\"name\",{value:r,configurable:!0});var f=Object.defineProperty,g=t((e,r)=>f(e,\"name\",{value:r,configurable:!0}),\"e\");const o=!!globalThis.process?.env?.FORCE_NODE_FETCH;function l(){return!o&&globalThis.fetch?globalThis.fetch:_node_mjs__WEBPACK_IMPORTED_MODULE_0__.fetch}t(l,\"p\"),g(l,\"_getFetch\");const s=l(),T=!o&&globalThis.Blob||_node_mjs__WEBPACK_IMPORTED_MODULE_0__.Blob,R=!o&&globalThis.File||_node_mjs__WEBPACK_IMPORTED_MODULE_0__.File,u=!o&&globalThis.FormData||_node_mjs__WEBPACK_IMPORTED_MODULE_0__.FormData,d=!o&&globalThis.Headers||_node_mjs__WEBPACK_IMPORTED_MODULE_0__.Headers,$=!o&&globalThis.Request||_node_mjs__WEBPACK_IMPORTED_MODULE_0__.Request,C=!o&&globalThis.Response||_node_mjs__WEBPACK_IMPORTED_MODULE_0__.Response,A=!o&&globalThis.AbortController||_node_mjs__WEBPACK_IMPORTED_MODULE_0__.AbortController;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC1uYXRpdmUtd2l0aC1hZ2VudC9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNEJBQTRCLHlCQUF5Qix3QkFBd0IsRUFBeWQsbURBQW1ELHdCQUF3QixPQUFPLG9EQUFvRCxhQUFhLDRDQUE0Qyw0Q0FBQyxDQUFDLDBCQUEwQixtQ0FBbUMsMkNBQUMsd0JBQXdCLDJDQUFDLDRCQUE0QiwrQ0FBQywyQkFBMkIsOENBQUMsMkJBQTJCLDhDQUFDLDRCQUE0QiwrQ0FBQyxtQ0FBbUMsc0RBQUMsQ0FBZ0kiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC1uYXRpdmUtd2l0aC1hZ2VudC9kaXN0L2luZGV4Lm1qcz8zMzYwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBhPU9iamVjdC5kZWZpbmVQcm9wZXJ0eTt2YXIgdD0oZSxyKT0+YShlLFwibmFtZVwiLHt2YWx1ZTpyLGNvbmZpZ3VyYWJsZTohMH0pO2ltcG9ydHtCbG9iIGFzIGksRmlsZSBhcyBiLEZvcm1EYXRhIGFzIG0sSGVhZGVycyBhcyBwLFJlcXVlc3QgYXMgbixSZXNwb25zZSBhcyBjLEFib3J0Q29udHJvbGxlciBhcyBoLGZldGNoIGFzIEZ9ZnJvbVwiLi9ub2RlLm1qc1wiO2V4cG9ydHtBYm9ydEVycm9yLEZldGNoRXJyb3IsYmxvYkZyb20sYmxvYkZyb21TeW5jLGZpbGVGcm9tLGZpbGVGcm9tU3luYyxpc1JlZGlyZWN0fWZyb21cIi4vbm9kZS5tanNcIjtpbXBvcnRcIm5vZGU6aHR0cFwiO2ltcG9ydFwibm9kZTpodHRwc1wiO2ltcG9ydFwibm9kZTp6bGliXCI7aW1wb3J0XCJub2RlOnN0cmVhbVwiO2ltcG9ydFwibm9kZTpidWZmZXJcIjtpbXBvcnRcIm5vZGU6dXRpbFwiO2ltcG9ydFwiLi9zaGFyZWQvbm9kZS1mZXRjaC1uYXRpdmUtd2l0aC1hZ2VudC4xYTRhMzU2ZC5tanNcIjtpbXBvcnRcIm5vZGU6dXJsXCI7aW1wb3J0XCJub2RlOm5ldFwiO2ltcG9ydFwibm9kZTpmc1wiO2ltcG9ydFwibm9kZTpwYXRoXCI7dmFyIGY9T2JqZWN0LmRlZmluZVByb3BlcnR5LGc9dCgoZSxyKT0+ZihlLFwibmFtZVwiLHt2YWx1ZTpyLGNvbmZpZ3VyYWJsZTohMH0pLFwiZVwiKTtjb25zdCBvPSEhZ2xvYmFsVGhpcy5wcm9jZXNzPy5lbnY/LkZPUkNFX05PREVfRkVUQ0g7ZnVuY3Rpb24gbCgpe3JldHVybiFvJiZnbG9iYWxUaGlzLmZldGNoP2dsb2JhbFRoaXMuZmV0Y2g6Rn10KGwsXCJwXCIpLGcobCxcIl9nZXRGZXRjaFwiKTtjb25zdCBzPWwoKSxUPSFvJiZnbG9iYWxUaGlzLkJsb2J8fGksUj0hbyYmZ2xvYmFsVGhpcy5GaWxlfHxiLHU9IW8mJmdsb2JhbFRoaXMuRm9ybURhdGF8fG0sZD0hbyYmZ2xvYmFsVGhpcy5IZWFkZXJzfHxwLCQ9IW8mJmdsb2JhbFRoaXMuUmVxdWVzdHx8bixDPSFvJiZnbG9iYWxUaGlzLlJlc3BvbnNlfHxjLEE9IW8mJmdsb2JhbFRoaXMuQWJvcnRDb250cm9sbGVyfHxoO2V4cG9ydHtBIGFzIEFib3J0Q29udHJvbGxlcixUIGFzIEJsb2IsUiBhcyBGaWxlLHUgYXMgRm9ybURhdGEsZCBhcyBIZWFkZXJzLCQgYXMgUmVxdWVzdCxDIGFzIFJlc3BvbnNlLHMgYXMgZGVmYXVsdCxzIGFzIGZldGNofTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native-with-agent/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch-native-with-agent/dist/node.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/node-fetch-native-with-agent/dist/node.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortController: () => (/* binding */ Mn),\n/* harmony export */   AbortError: () => (/* binding */ _r),\n/* harmony export */   Blob: () => (/* binding */ ut),\n/* harmony export */   FetchError: () => (/* binding */ G),\n/* harmony export */   File: () => (/* binding */ On),\n/* harmony export */   FormData: () => (/* binding */ br),\n/* harmony export */   Headers: () => (/* binding */ ye),\n/* harmony export */   Request: () => (/* binding */ dt),\n/* harmony export */   Response: () => (/* binding */ le),\n/* harmony export */   blobFrom: () => (/* binding */ hl),\n/* harmony export */   blobFromSync: () => (/* binding */ dl),\n/* harmony export */   \"default\": () => (/* binding */ Fi),\n/* harmony export */   fetch: () => (/* binding */ Fi),\n/* harmony export */   fileFrom: () => (/* binding */ pl),\n/* harmony export */   fileFromSync: () => (/* binding */ bl),\n/* harmony export */   isRedirect: () => (/* binding */ Ln)\n/* harmony export */ });\n/* harmony import */ var node_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:http */ \"node:http\");\n/* harmony import */ var node_https__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:https */ \"node:https\");\n/* harmony import */ var node_zlib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:zlib */ \"node:zlib\");\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var node_buffer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! node:buffer */ \"node:buffer\");\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! node:util */ \"node:util\");\n/* harmony import */ var _shared_node_fetch_native_with_agent_1a4a356d_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./shared/node-fetch-native-with-agent.1a4a356d.mjs */ \"(rsc)/./node_modules/node-fetch-native-with-agent/dist/shared/node-fetch-native-with-agent.1a4a356d.mjs\");\n/* harmony import */ var node_url__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! node:url */ \"node:url\");\n/* harmony import */ var node_net__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! node:net */ \"node:net\");\n/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! node:fs */ \"node:fs\");\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! node:path */ \"node:path\");\nvar As=Object.defineProperty;var n=(i,o)=>As(i,\"name\",{value:o,configurable:!0});var fi=(i,o,a)=>{if(!o.has(i))throw TypeError(\"Cannot \"+a)};var O=(i,o,a)=>(fi(i,o,\"read from private field\"),a?a.call(i):o.get(i)),be=(i,o,a)=>{if(o.has(i))throw TypeError(\"Cannot add the same private member more than once\");o instanceof WeakSet?o.add(i):o.set(i,a)},X=(i,o,a,u)=>(fi(i,o,\"write to private field\"),u?u.call(i,a):o.set(i,a),a);var ve,kt,bt,Cr,Ve,Wt,qt,Ot,ee,zt,Ne,He,It;function js(i){if(!/^data:/i.test(i))throw new TypeError('`uri` does not appear to be a Data URI (must begin with \"data:\")');i=i.replace(/\\r?\\n/g,\"\");const o=i.indexOf(\",\");if(o===-1||o<=4)throw new TypeError(\"malformed data: URI\");const a=i.substring(5,o).split(\";\");let u=\"\",l=!1;const p=a[0]||\"text/plain\";let h=p;for(let E=1;E<a.length;E++)a[E]===\"base64\"?l=!0:a[E]&&(h+=`;${a[E]}`,a[E].indexOf(\"charset=\")===0&&(u=a[E].substring(8)));!a[0]&&!u.length&&(h+=\";charset=US-ASCII\",u=\"US-ASCII\");const g=l?\"base64\":\"ascii\",A=unescape(i.substring(o+1)),w=Buffer.from(A,g);return w.type=p,w.typeFull=h,w.charset=u,w}n(js,\"dataUriToBuffer\");var pr={exports:{}};/**\n * @license\n * web-streams-polyfill v3.3.3\n * Copyright 2024 Mattias Buelens, Diwank Singh Tomer and other contributors.\n * This code is released under the MIT license.\n * SPDX-License-Identifier: MIT\n */var di;function Ls(){return di||(di=1,function(i,o){(function(a,u){u(o)})(_shared_node_fetch_native_with_agent_1a4a356d_mjs__WEBPACK_IMPORTED_MODULE_6__.c,function(a){function u(){}n(u,\"noop\");function l(e){return typeof e==\"object\"&&e!==null||typeof e==\"function\"}n(l,\"typeIsObject\");const p=u;function h(e,t){try{Object.defineProperty(e,\"name\",{value:t,configurable:!0})}catch{}}n(h,\"setFunctionName\");const g=Promise,A=Promise.prototype.then,w=Promise.reject.bind(g);function E(e){return new g(e)}n(E,\"newPromise\");function T(e){return E(t=>t(e))}n(T,\"promiseResolvedWith\");function b(e){return w(e)}n(b,\"promiseRejectedWith\");function q(e,t,r){return A.call(e,t,r)}n(q,\"PerformPromiseThen\");function _(e,t,r){q(q(e,t,r),void 0,p)}n(_,\"uponPromise\");function V(e,t){_(e,t)}n(V,\"uponFulfillment\");function I(e,t){_(e,void 0,t)}n(I,\"uponRejection\");function F(e,t,r){return q(e,t,r)}n(F,\"transformPromiseWith\");function Q(e){q(e,void 0,p)}n(Q,\"setPromiseIsHandledToTrue\");let ge=n(e=>{if(typeof queueMicrotask==\"function\")ge=queueMicrotask;else{const t=T(void 0);ge=n(r=>q(t,r),\"_queueMicrotask\")}return ge(e)},\"_queueMicrotask\");function z(e,t,r){if(typeof e!=\"function\")throw new TypeError(\"Argument is not a function\");return Function.prototype.apply.call(e,t,r)}n(z,\"reflectCall\");function j(e,t,r){try{return T(z(e,t,r))}catch(s){return b(s)}}n(j,\"promiseCall\");const U=16384,bn=class bn{constructor(){this._cursor=0,this._size=0,this._front={_elements:[],_next:void 0},this._back=this._front,this._cursor=0,this._size=0}get length(){return this._size}push(t){const r=this._back;let s=r;r._elements.length===U-1&&(s={_elements:[],_next:void 0}),r._elements.push(t),s!==r&&(this._back=s,r._next=s),++this._size}shift(){const t=this._front;let r=t;const s=this._cursor;let f=s+1;const c=t._elements,d=c[s];return f===U&&(r=t._next,f=0),--this._size,this._cursor=f,t!==r&&(this._front=r),c[s]=void 0,d}forEach(t){let r=this._cursor,s=this._front,f=s._elements;for(;(r!==f.length||s._next!==void 0)&&!(r===f.length&&(s=s._next,f=s._elements,r=0,f.length===0));)t(f[r]),++r}peek(){const t=this._front,r=this._cursor;return t._elements[r]}};n(bn,\"SimpleQueue\");let D=bn;const Ft=Symbol(\"[[AbortSteps]]\"),Qn=Symbol(\"[[ErrorSteps]]\"),Ar=Symbol(\"[[CancelSteps]]\"),Br=Symbol(\"[[PullSteps]]\"),kr=Symbol(\"[[ReleaseSteps]]\");function Yn(e,t){e._ownerReadableStream=t,t._reader=e,t._state===\"readable\"?qr(e):t._state===\"closed\"?Li(e):Gn(e,t._storedError)}n(Yn,\"ReadableStreamReaderGenericInitialize\");function Wr(e,t){const r=e._ownerReadableStream;return ie(r,t)}n(Wr,\"ReadableStreamReaderGenericCancel\");function _e(e){const t=e._ownerReadableStream;t._state===\"readable\"?Or(e,new TypeError(\"Reader was released and can no longer be used to monitor the stream's closedness\")):$i(e,new TypeError(\"Reader was released and can no longer be used to monitor the stream's closedness\")),t._readableStreamController[kr](),t._reader=void 0,e._ownerReadableStream=void 0}n(_e,\"ReadableStreamReaderGenericRelease\");function jt(e){return new TypeError(\"Cannot \"+e+\" a stream using a released reader\")}n(jt,\"readerLockException\");function qr(e){e._closedPromise=E((t,r)=>{e._closedPromise_resolve=t,e._closedPromise_reject=r})}n(qr,\"defaultReaderClosedPromiseInitialize\");function Gn(e,t){qr(e),Or(e,t)}n(Gn,\"defaultReaderClosedPromiseInitializeAsRejected\");function Li(e){qr(e),Zn(e)}n(Li,\"defaultReaderClosedPromiseInitializeAsResolved\");function Or(e,t){e._closedPromise_reject!==void 0&&(Q(e._closedPromise),e._closedPromise_reject(t),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0)}n(Or,\"defaultReaderClosedPromiseReject\");function $i(e,t){Gn(e,t)}n($i,\"defaultReaderClosedPromiseResetToRejected\");function Zn(e){e._closedPromise_resolve!==void 0&&(e._closedPromise_resolve(void 0),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0)}n(Zn,\"defaultReaderClosedPromiseResolve\");const Kn=Number.isFinite||function(e){return typeof e==\"number\"&&isFinite(e)},Di=Math.trunc||function(e){return e<0?Math.ceil(e):Math.floor(e)};function Mi(e){return typeof e==\"object\"||typeof e==\"function\"}n(Mi,\"isDictionary\");function ue(e,t){if(e!==void 0&&!Mi(e))throw new TypeError(`${t} is not an object.`)}n(ue,\"assertDictionary\");function Z(e,t){if(typeof e!=\"function\")throw new TypeError(`${t} is not a function.`)}n(Z,\"assertFunction\");function Ui(e){return typeof e==\"object\"&&e!==null||typeof e==\"function\"}n(Ui,\"isObject\");function Jn(e,t){if(!Ui(e))throw new TypeError(`${t} is not an object.`)}n(Jn,\"assertObject\");function Se(e,t,r){if(e===void 0)throw new TypeError(`Parameter ${t} is required in '${r}'.`)}n(Se,\"assertRequiredArgument\");function zr(e,t,r){if(e===void 0)throw new TypeError(`${t} is required in '${r}'.`)}n(zr,\"assertRequiredField\");function Ir(e){return Number(e)}n(Ir,\"convertUnrestrictedDouble\");function Xn(e){return e===0?0:e}n(Xn,\"censorNegativeZero\");function xi(e){return Xn(Di(e))}n(xi,\"integerPart\");function Fr(e,t){const s=Number.MAX_SAFE_INTEGER;let f=Number(e);if(f=Xn(f),!Kn(f))throw new TypeError(`${t} is not a finite number`);if(f=xi(f),f<0||f>s)throw new TypeError(`${t} is outside the accepted range of 0 to ${s}, inclusive`);return!Kn(f)||f===0?0:f}n(Fr,\"convertUnsignedLongLongWithEnforceRange\");function jr(e,t){if(!We(e))throw new TypeError(`${t} is not a ReadableStream.`)}n(jr,\"assertReadableStream\");function Qe(e){return new fe(e)}n(Qe,\"AcquireReadableStreamDefaultReader\");function eo(e,t){e._reader._readRequests.push(t)}n(eo,\"ReadableStreamAddReadRequest\");function Lr(e,t,r){const f=e._reader._readRequests.shift();r?f._closeSteps():f._chunkSteps(t)}n(Lr,\"ReadableStreamFulfillReadRequest\");function Lt(e){return e._reader._readRequests.length}n(Lt,\"ReadableStreamGetNumReadRequests\");function to(e){const t=e._reader;return!(t===void 0||!Ee(t))}n(to,\"ReadableStreamHasDefaultReader\");const mn=class mn{constructor(t){if(Se(t,1,\"ReadableStreamDefaultReader\"),jr(t,\"First parameter\"),qe(t))throw new TypeError(\"This stream has already been locked for exclusive reading by another reader\");Yn(this,t),this._readRequests=new D}get closed(){return Ee(this)?this._closedPromise:b($t(\"closed\"))}cancel(t=void 0){return Ee(this)?this._ownerReadableStream===void 0?b(jt(\"cancel\")):Wr(this,t):b($t(\"cancel\"))}read(){if(!Ee(this))return b($t(\"read\"));if(this._ownerReadableStream===void 0)return b(jt(\"read from\"));let t,r;const s=E((c,d)=>{t=c,r=d});return mt(this,{_chunkSteps:c=>t({value:c,done:!1}),_closeSteps:()=>t({value:void 0,done:!0}),_errorSteps:c=>r(c)}),s}releaseLock(){if(!Ee(this))throw $t(\"releaseLock\");this._ownerReadableStream!==void 0&&Ni(this)}};n(mn,\"ReadableStreamDefaultReader\");let fe=mn;Object.defineProperties(fe.prototype,{cancel:{enumerable:!0},read:{enumerable:!0},releaseLock:{enumerable:!0},closed:{enumerable:!0}}),h(fe.prototype.cancel,\"cancel\"),h(fe.prototype.read,\"read\"),h(fe.prototype.releaseLock,\"releaseLock\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(fe.prototype,Symbol.toStringTag,{value:\"ReadableStreamDefaultReader\",configurable:!0});function Ee(e){return!l(e)||!Object.prototype.hasOwnProperty.call(e,\"_readRequests\")?!1:e instanceof fe}n(Ee,\"IsReadableStreamDefaultReader\");function mt(e,t){const r=e._ownerReadableStream;r._disturbed=!0,r._state===\"closed\"?t._closeSteps():r._state===\"errored\"?t._errorSteps(r._storedError):r._readableStreamController[Br](t)}n(mt,\"ReadableStreamDefaultReaderRead\");function Ni(e){_e(e);const t=new TypeError(\"Reader was released\");ro(e,t)}n(Ni,\"ReadableStreamDefaultReaderRelease\");function ro(e,t){const r=e._readRequests;e._readRequests=new D,r.forEach(s=>{s._errorSteps(t)})}n(ro,\"ReadableStreamDefaultReaderErrorReadRequests\");function $t(e){return new TypeError(`ReadableStreamDefaultReader.prototype.${e} can only be used on a ReadableStreamDefaultReader`)}n($t,\"defaultReaderBrandCheckException\");const Hi=Object.getPrototypeOf(Object.getPrototypeOf(async function*(){}).prototype),yn=class yn{constructor(t,r){this._ongoingPromise=void 0,this._isFinished=!1,this._reader=t,this._preventCancel=r}next(){const t=n(()=>this._nextSteps(),\"nextSteps\");return this._ongoingPromise=this._ongoingPromise?F(this._ongoingPromise,t,t):t(),this._ongoingPromise}return(t){const r=n(()=>this._returnSteps(t),\"returnSteps\");return this._ongoingPromise?F(this._ongoingPromise,r,r):r()}_nextSteps(){if(this._isFinished)return Promise.resolve({value:void 0,done:!0});const t=this._reader;let r,s;const f=E((d,m)=>{r=d,s=m});return mt(t,{_chunkSteps:d=>{this._ongoingPromise=void 0,ge(()=>r({value:d,done:!1}))},_closeSteps:()=>{this._ongoingPromise=void 0,this._isFinished=!0,_e(t),r({value:void 0,done:!0})},_errorSteps:d=>{this._ongoingPromise=void 0,this._isFinished=!0,_e(t),s(d)}}),f}_returnSteps(t){if(this._isFinished)return Promise.resolve({value:t,done:!0});this._isFinished=!0;const r=this._reader;if(!this._preventCancel){const s=Wr(r,t);return _e(r),F(s,()=>({value:t,done:!0}))}return _e(r),T({value:t,done:!0})}};n(yn,\"ReadableStreamAsyncIteratorImpl\");let Dt=yn;const no={next(){return oo(this)?this._asyncIteratorImpl.next():b(io(\"next\"))},return(e){return oo(this)?this._asyncIteratorImpl.return(e):b(io(\"return\"))}};Object.setPrototypeOf(no,Hi);function Vi(e,t){const r=Qe(e),s=new Dt(r,t),f=Object.create(no);return f._asyncIteratorImpl=s,f}n(Vi,\"AcquireReadableStreamAsyncIterator\");function oo(e){if(!l(e)||!Object.prototype.hasOwnProperty.call(e,\"_asyncIteratorImpl\"))return!1;try{return e._asyncIteratorImpl instanceof Dt}catch{return!1}}n(oo,\"IsReadableStreamAsyncIterator\");function io(e){return new TypeError(`ReadableStreamAsyncIterator.${e} can only be used on a ReadableSteamAsyncIterator`)}n(io,\"streamAsyncIteratorBrandCheckException\");const ao=Number.isNaN||function(e){return e!==e};var $r,Dr,Mr;function yt(e){return e.slice()}n(yt,\"CreateArrayFromList\");function so(e,t,r,s,f){new Uint8Array(e).set(new Uint8Array(r,s,f),t)}n(so,\"CopyDataBlockBytes\");let we=n(e=>(typeof e.transfer==\"function\"?we=n(t=>t.transfer(),\"TransferArrayBuffer\"):typeof structuredClone==\"function\"?we=n(t=>structuredClone(t,{transfer:[t]}),\"TransferArrayBuffer\"):we=n(t=>t,\"TransferArrayBuffer\"),we(e)),\"TransferArrayBuffer\"),Ae=n(e=>(typeof e.detached==\"boolean\"?Ae=n(t=>t.detached,\"IsDetachedBuffer\"):Ae=n(t=>t.byteLength===0,\"IsDetachedBuffer\"),Ae(e)),\"IsDetachedBuffer\");function lo(e,t,r){if(e.slice)return e.slice(t,r);const s=r-t,f=new ArrayBuffer(s);return so(f,0,e,t,s),f}n(lo,\"ArrayBufferSlice\");function Mt(e,t){const r=e[t];if(r!=null){if(typeof r!=\"function\")throw new TypeError(`${String(t)} is not a function`);return r}}n(Mt,\"GetMethod\");function Qi(e){const t={[Symbol.iterator]:()=>e.iterator},r=async function*(){return yield*t}(),s=r.next;return{iterator:r,nextMethod:s,done:!1}}n(Qi,\"CreateAsyncFromSyncIterator\");const Ur=(Mr=($r=Symbol.asyncIterator)!==null&&$r!==void 0?$r:(Dr=Symbol.for)===null||Dr===void 0?void 0:Dr.call(Symbol,\"Symbol.asyncIterator\"))!==null&&Mr!==void 0?Mr:\"@@asyncIterator\";function uo(e,t=\"sync\",r){if(r===void 0)if(t===\"async\"){if(r=Mt(e,Ur),r===void 0){const c=Mt(e,Symbol.iterator),d=uo(e,\"sync\",c);return Qi(d)}}else r=Mt(e,Symbol.iterator);if(r===void 0)throw new TypeError(\"The object is not iterable\");const s=z(r,e,[]);if(!l(s))throw new TypeError(\"The iterator method must return an object\");const f=s.next;return{iterator:s,nextMethod:f,done:!1}}n(uo,\"GetIterator\");function Yi(e){const t=z(e.nextMethod,e.iterator,[]);if(!l(t))throw new TypeError(\"The iterator.next() method must return an object\");return t}n(Yi,\"IteratorNext\");function Gi(e){return!!e.done}n(Gi,\"IteratorComplete\");function Zi(e){return e.value}n(Zi,\"IteratorValue\");function Ki(e){return!(typeof e!=\"number\"||ao(e)||e<0)}n(Ki,\"IsNonNegativeNumber\");function fo(e){const t=lo(e.buffer,e.byteOffset,e.byteOffset+e.byteLength);return new Uint8Array(t)}n(fo,\"CloneAsUint8Array\");function xr(e){const t=e._queue.shift();return e._queueTotalSize-=t.size,e._queueTotalSize<0&&(e._queueTotalSize=0),t.value}n(xr,\"DequeueValue\");function Nr(e,t,r){if(!Ki(r)||r===1/0)throw new RangeError(\"Size must be a finite, non-NaN, non-negative number.\");e._queue.push({value:t,size:r}),e._queueTotalSize+=r}n(Nr,\"EnqueueValueWithSize\");function Ji(e){return e._queue.peek().value}n(Ji,\"PeekQueueValue\");function Be(e){e._queue=new D,e._queueTotalSize=0}n(Be,\"ResetQueue\");function co(e){return e===DataView}n(co,\"isDataViewConstructor\");function Xi(e){return co(e.constructor)}n(Xi,\"isDataView\");function ea(e){return co(e)?1:e.BYTES_PER_ELEMENT}n(ea,\"arrayBufferViewElementSize\");const gn=class gn{constructor(){throw new TypeError(\"Illegal constructor\")}get view(){if(!Hr(this))throw Zr(\"view\");return this._view}respond(t){if(!Hr(this))throw Zr(\"respond\");if(Se(t,1,\"respond\"),t=Fr(t,\"First parameter\"),this._associatedReadableByteStreamController===void 0)throw new TypeError(\"This BYOB request has been invalidated\");if(Ae(this._view.buffer))throw new TypeError(\"The BYOB request's buffer has been detached and so cannot be used as a response\");Ht(this._associatedReadableByteStreamController,t)}respondWithNewView(t){if(!Hr(this))throw Zr(\"respondWithNewView\");if(Se(t,1,\"respondWithNewView\"),!ArrayBuffer.isView(t))throw new TypeError(\"You can only respond with array buffer views\");if(this._associatedReadableByteStreamController===void 0)throw new TypeError(\"This BYOB request has been invalidated\");if(Ae(t.buffer))throw new TypeError(\"The given view's buffer has been detached and so cannot be used as a response\");Vt(this._associatedReadableByteStreamController,t)}};n(gn,\"ReadableStreamBYOBRequest\");let Re=gn;Object.defineProperties(Re.prototype,{respond:{enumerable:!0},respondWithNewView:{enumerable:!0},view:{enumerable:!0}}),h(Re.prototype.respond,\"respond\"),h(Re.prototype.respondWithNewView,\"respondWithNewView\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(Re.prototype,Symbol.toStringTag,{value:\"ReadableStreamBYOBRequest\",configurable:!0});const _n=class _n{constructor(){throw new TypeError(\"Illegal constructor\")}get byobRequest(){if(!ze(this))throw _t(\"byobRequest\");return Gr(this)}get desiredSize(){if(!ze(this))throw _t(\"desiredSize\");return Ro(this)}close(){if(!ze(this))throw _t(\"close\");if(this._closeRequested)throw new TypeError(\"The stream has already been closed; do not close it again!\");const t=this._controlledReadableByteStream._state;if(t!==\"readable\")throw new TypeError(`The stream (in ${t} state) is not in the readable state and cannot be closed`);gt(this)}enqueue(t){if(!ze(this))throw _t(\"enqueue\");if(Se(t,1,\"enqueue\"),!ArrayBuffer.isView(t))throw new TypeError(\"chunk must be an array buffer view\");if(t.byteLength===0)throw new TypeError(\"chunk must have non-zero byteLength\");if(t.buffer.byteLength===0)throw new TypeError(\"chunk's buffer must have non-zero byteLength\");if(this._closeRequested)throw new TypeError(\"stream is closed or draining\");const r=this._controlledReadableByteStream._state;if(r!==\"readable\")throw new TypeError(`The stream (in ${r} state) is not in the readable state and cannot be enqueued to`);Nt(this,t)}error(t=void 0){if(!ze(this))throw _t(\"error\");K(this,t)}[Ar](t){ho(this),Be(this);const r=this._cancelAlgorithm(t);return xt(this),r}[Br](t){const r=this._controlledReadableByteStream;if(this._queueTotalSize>0){wo(this,t);return}const s=this._autoAllocateChunkSize;if(s!==void 0){let f;try{f=new ArrayBuffer(s)}catch(d){t._errorSteps(d);return}const c={buffer:f,bufferByteLength:s,byteOffset:0,byteLength:s,bytesFilled:0,minimumFill:1,elementSize:1,viewConstructor:Uint8Array,readerType:\"default\"};this._pendingPullIntos.push(c)}eo(r,t),Ie(this)}[kr](){if(this._pendingPullIntos.length>0){const t=this._pendingPullIntos.peek();t.readerType=\"none\",this._pendingPullIntos=new D,this._pendingPullIntos.push(t)}}};n(_n,\"ReadableByteStreamController\");let te=_n;Object.defineProperties(te.prototype,{close:{enumerable:!0},enqueue:{enumerable:!0},error:{enumerable:!0},byobRequest:{enumerable:!0},desiredSize:{enumerable:!0}}),h(te.prototype.close,\"close\"),h(te.prototype.enqueue,\"enqueue\"),h(te.prototype.error,\"error\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(te.prototype,Symbol.toStringTag,{value:\"ReadableByteStreamController\",configurable:!0});function ze(e){return!l(e)||!Object.prototype.hasOwnProperty.call(e,\"_controlledReadableByteStream\")?!1:e instanceof te}n(ze,\"IsReadableByteStreamController\");function Hr(e){return!l(e)||!Object.prototype.hasOwnProperty.call(e,\"_associatedReadableByteStreamController\")?!1:e instanceof Re}n(Hr,\"IsReadableStreamBYOBRequest\");function Ie(e){if(!ia(e))return;if(e._pulling){e._pullAgain=!0;return}e._pulling=!0;const r=e._pullAlgorithm();_(r,()=>(e._pulling=!1,e._pullAgain&&(e._pullAgain=!1,Ie(e)),null),s=>(K(e,s),null))}n(Ie,\"ReadableByteStreamControllerCallPullIfNeeded\");function ho(e){Qr(e),e._pendingPullIntos=new D}n(ho,\"ReadableByteStreamControllerClearPendingPullIntos\");function Vr(e,t){let r=!1;e._state===\"closed\"&&(r=!0);const s=po(t);t.readerType===\"default\"?Lr(e,s,r):ca(e,s,r)}n(Vr,\"ReadableByteStreamControllerCommitPullIntoDescriptor\");function po(e){const t=e.bytesFilled,r=e.elementSize;return new e.viewConstructor(e.buffer,e.byteOffset,t/r)}n(po,\"ReadableByteStreamControllerConvertPullIntoDescriptor\");function Ut(e,t,r,s){e._queue.push({buffer:t,byteOffset:r,byteLength:s}),e._queueTotalSize+=s}n(Ut,\"ReadableByteStreamControllerEnqueueChunkToQueue\");function bo(e,t,r,s){let f;try{f=lo(t,r,r+s)}catch(c){throw K(e,c),c}Ut(e,f,0,s)}n(bo,\"ReadableByteStreamControllerEnqueueClonedChunkToQueue\");function mo(e,t){t.bytesFilled>0&&bo(e,t.buffer,t.byteOffset,t.bytesFilled),Ye(e)}n(mo,\"ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue\");function yo(e,t){const r=Math.min(e._queueTotalSize,t.byteLength-t.bytesFilled),s=t.bytesFilled+r;let f=r,c=!1;const d=s%t.elementSize,m=s-d;m>=t.minimumFill&&(f=m-t.bytesFilled,c=!0);const R=e._queue;for(;f>0;){const y=R.peek(),C=Math.min(f,y.byteLength),P=t.byteOffset+t.bytesFilled;so(t.buffer,P,y.buffer,y.byteOffset,C),y.byteLength===C?R.shift():(y.byteOffset+=C,y.byteLength-=C),e._queueTotalSize-=C,go(e,C,t),f-=C}return c}n(yo,\"ReadableByteStreamControllerFillPullIntoDescriptorFromQueue\");function go(e,t,r){r.bytesFilled+=t}n(go,\"ReadableByteStreamControllerFillHeadPullIntoDescriptor\");function _o(e){e._queueTotalSize===0&&e._closeRequested?(xt(e),Pt(e._controlledReadableByteStream)):Ie(e)}n(_o,\"ReadableByteStreamControllerHandleQueueDrain\");function Qr(e){e._byobRequest!==null&&(e._byobRequest._associatedReadableByteStreamController=void 0,e._byobRequest._view=null,e._byobRequest=null)}n(Qr,\"ReadableByteStreamControllerInvalidateBYOBRequest\");function Yr(e){for(;e._pendingPullIntos.length>0;){if(e._queueTotalSize===0)return;const t=e._pendingPullIntos.peek();yo(e,t)&&(Ye(e),Vr(e._controlledReadableByteStream,t))}}n(Yr,\"ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue\");function ta(e){const t=e._controlledReadableByteStream._reader;for(;t._readRequests.length>0;){if(e._queueTotalSize===0)return;const r=t._readRequests.shift();wo(e,r)}}n(ta,\"ReadableByteStreamControllerProcessReadRequestsUsingQueue\");function ra(e,t,r,s){const f=e._controlledReadableByteStream,c=t.constructor,d=ea(c),{byteOffset:m,byteLength:R}=t,y=r*d;let C;try{C=we(t.buffer)}catch(B){s._errorSteps(B);return}const P={buffer:C,bufferByteLength:C.byteLength,byteOffset:m,byteLength:R,bytesFilled:0,minimumFill:y,elementSize:d,viewConstructor:c,readerType:\"byob\"};if(e._pendingPullIntos.length>0){e._pendingPullIntos.push(P),Po(f,s);return}if(f._state===\"closed\"){const B=new c(P.buffer,P.byteOffset,0);s._closeSteps(B);return}if(e._queueTotalSize>0){if(yo(e,P)){const B=po(P);_o(e),s._chunkSteps(B);return}if(e._closeRequested){const B=new TypeError(\"Insufficient bytes to fill elements in the given buffer\");K(e,B),s._errorSteps(B);return}}e._pendingPullIntos.push(P),Po(f,s),Ie(e)}n(ra,\"ReadableByteStreamControllerPullInto\");function na(e,t){t.readerType===\"none\"&&Ye(e);const r=e._controlledReadableByteStream;if(Kr(r))for(;vo(r)>0;){const s=Ye(e);Vr(r,s)}}n(na,\"ReadableByteStreamControllerRespondInClosedState\");function oa(e,t,r){if(go(e,t,r),r.readerType===\"none\"){mo(e,r),Yr(e);return}if(r.bytesFilled<r.minimumFill)return;Ye(e);const s=r.bytesFilled%r.elementSize;if(s>0){const f=r.byteOffset+r.bytesFilled;bo(e,r.buffer,f-s,s)}r.bytesFilled-=s,Vr(e._controlledReadableByteStream,r),Yr(e)}n(oa,\"ReadableByteStreamControllerRespondInReadableState\");function So(e,t){const r=e._pendingPullIntos.peek();Qr(e),e._controlledReadableByteStream._state===\"closed\"?na(e,r):oa(e,t,r),Ie(e)}n(So,\"ReadableByteStreamControllerRespondInternal\");function Ye(e){return e._pendingPullIntos.shift()}n(Ye,\"ReadableByteStreamControllerShiftPendingPullInto\");function ia(e){const t=e._controlledReadableByteStream;return t._state!==\"readable\"||e._closeRequested||!e._started?!1:!!(to(t)&&Lt(t)>0||Kr(t)&&vo(t)>0||Ro(e)>0)}n(ia,\"ReadableByteStreamControllerShouldCallPull\");function xt(e){e._pullAlgorithm=void 0,e._cancelAlgorithm=void 0}n(xt,\"ReadableByteStreamControllerClearAlgorithms\");function gt(e){const t=e._controlledReadableByteStream;if(!(e._closeRequested||t._state!==\"readable\")){if(e._queueTotalSize>0){e._closeRequested=!0;return}if(e._pendingPullIntos.length>0){const r=e._pendingPullIntos.peek();if(r.bytesFilled%r.elementSize!==0){const s=new TypeError(\"Insufficient bytes to fill elements in the given buffer\");throw K(e,s),s}}xt(e),Pt(t)}}n(gt,\"ReadableByteStreamControllerClose\");function Nt(e,t){const r=e._controlledReadableByteStream;if(e._closeRequested||r._state!==\"readable\")return;const{buffer:s,byteOffset:f,byteLength:c}=t;if(Ae(s))throw new TypeError(\"chunk's buffer is detached and so cannot be enqueued\");const d=we(s);if(e._pendingPullIntos.length>0){const m=e._pendingPullIntos.peek();if(Ae(m.buffer))throw new TypeError(\"The BYOB request's buffer has been detached and so cannot be filled with an enqueued chunk\");Qr(e),m.buffer=we(m.buffer),m.readerType===\"none\"&&mo(e,m)}if(to(r))if(ta(e),Lt(r)===0)Ut(e,d,f,c);else{e._pendingPullIntos.length>0&&Ye(e);const m=new Uint8Array(d,f,c);Lr(r,m,!1)}else Kr(r)?(Ut(e,d,f,c),Yr(e)):Ut(e,d,f,c);Ie(e)}n(Nt,\"ReadableByteStreamControllerEnqueue\");function K(e,t){const r=e._controlledReadableByteStream;r._state===\"readable\"&&(ho(e),Be(e),xt(e),Zo(r,t))}n(K,\"ReadableByteStreamControllerError\");function wo(e,t){const r=e._queue.shift();e._queueTotalSize-=r.byteLength,_o(e);const s=new Uint8Array(r.buffer,r.byteOffset,r.byteLength);t._chunkSteps(s)}n(wo,\"ReadableByteStreamControllerFillReadRequestFromQueue\");function Gr(e){if(e._byobRequest===null&&e._pendingPullIntos.length>0){const t=e._pendingPullIntos.peek(),r=new Uint8Array(t.buffer,t.byteOffset+t.bytesFilled,t.byteLength-t.bytesFilled),s=Object.create(Re.prototype);sa(s,e,r),e._byobRequest=s}return e._byobRequest}n(Gr,\"ReadableByteStreamControllerGetBYOBRequest\");function Ro(e){const t=e._controlledReadableByteStream._state;return t===\"errored\"?null:t===\"closed\"?0:e._strategyHWM-e._queueTotalSize}n(Ro,\"ReadableByteStreamControllerGetDesiredSize\");function Ht(e,t){const r=e._pendingPullIntos.peek();if(e._controlledReadableByteStream._state===\"closed\"){if(t!==0)throw new TypeError(\"bytesWritten must be 0 when calling respond() on a closed stream\")}else{if(t===0)throw new TypeError(\"bytesWritten must be greater than 0 when calling respond() on a readable stream\");if(r.bytesFilled+t>r.byteLength)throw new RangeError(\"bytesWritten out of range\")}r.buffer=we(r.buffer),So(e,t)}n(Ht,\"ReadableByteStreamControllerRespond\");function Vt(e,t){const r=e._pendingPullIntos.peek();if(e._controlledReadableByteStream._state===\"closed\"){if(t.byteLength!==0)throw new TypeError(\"The view's length must be 0 when calling respondWithNewView() on a closed stream\")}else if(t.byteLength===0)throw new TypeError(\"The view's length must be greater than 0 when calling respondWithNewView() on a readable stream\");if(r.byteOffset+r.bytesFilled!==t.byteOffset)throw new RangeError(\"The region specified by view does not match byobRequest\");if(r.bufferByteLength!==t.buffer.byteLength)throw new RangeError(\"The buffer of view has different capacity than byobRequest\");if(r.bytesFilled+t.byteLength>r.byteLength)throw new RangeError(\"The region specified by view is larger than byobRequest\");const f=t.byteLength;r.buffer=we(t.buffer),So(e,f)}n(Vt,\"ReadableByteStreamControllerRespondWithNewView\");function To(e,t,r,s,f,c,d){t._controlledReadableByteStream=e,t._pullAgain=!1,t._pulling=!1,t._byobRequest=null,t._queue=t._queueTotalSize=void 0,Be(t),t._closeRequested=!1,t._started=!1,t._strategyHWM=c,t._pullAlgorithm=s,t._cancelAlgorithm=f,t._autoAllocateChunkSize=d,t._pendingPullIntos=new D,e._readableStreamController=t;const m=r();_(T(m),()=>(t._started=!0,Ie(t),null),R=>(K(t,R),null))}n(To,\"SetUpReadableByteStreamController\");function aa(e,t,r){const s=Object.create(te.prototype);let f,c,d;t.start!==void 0?f=n(()=>t.start(s),\"startAlgorithm\"):f=n(()=>{},\"startAlgorithm\"),t.pull!==void 0?c=n(()=>t.pull(s),\"pullAlgorithm\"):c=n(()=>T(void 0),\"pullAlgorithm\"),t.cancel!==void 0?d=n(R=>t.cancel(R),\"cancelAlgorithm\"):d=n(()=>T(void 0),\"cancelAlgorithm\");const m=t.autoAllocateChunkSize;if(m===0)throw new TypeError(\"autoAllocateChunkSize must be greater than 0\");To(e,s,f,c,d,r,m)}n(aa,\"SetUpReadableByteStreamControllerFromUnderlyingSource\");function sa(e,t,r){e._associatedReadableByteStreamController=t,e._view=r}n(sa,\"SetUpReadableStreamBYOBRequest\");function Zr(e){return new TypeError(`ReadableStreamBYOBRequest.prototype.${e} can only be used on a ReadableStreamBYOBRequest`)}n(Zr,\"byobRequestBrandCheckException\");function _t(e){return new TypeError(`ReadableByteStreamController.prototype.${e} can only be used on a ReadableByteStreamController`)}n(_t,\"byteStreamControllerBrandCheckException\");function la(e,t){ue(e,t);const r=e?.mode;return{mode:r===void 0?void 0:ua(r,`${t} has member 'mode' that`)}}n(la,\"convertReaderOptions\");function ua(e,t){if(e=`${e}`,e!==\"byob\")throw new TypeError(`${t} '${e}' is not a valid enumeration value for ReadableStreamReaderMode`);return e}n(ua,\"convertReadableStreamReaderMode\");function fa(e,t){var r;ue(e,t);const s=(r=e?.min)!==null&&r!==void 0?r:1;return{min:Fr(s,`${t} has member 'min' that`)}}n(fa,\"convertByobReadOptions\");function Co(e){return new ce(e)}n(Co,\"AcquireReadableStreamBYOBReader\");function Po(e,t){e._reader._readIntoRequests.push(t)}n(Po,\"ReadableStreamAddReadIntoRequest\");function ca(e,t,r){const f=e._reader._readIntoRequests.shift();r?f._closeSteps(t):f._chunkSteps(t)}n(ca,\"ReadableStreamFulfillReadIntoRequest\");function vo(e){return e._reader._readIntoRequests.length}n(vo,\"ReadableStreamGetNumReadIntoRequests\");function Kr(e){const t=e._reader;return!(t===void 0||!Fe(t))}n(Kr,\"ReadableStreamHasBYOBReader\");const Sn=class Sn{constructor(t){if(Se(t,1,\"ReadableStreamBYOBReader\"),jr(t,\"First parameter\"),qe(t))throw new TypeError(\"This stream has already been locked for exclusive reading by another reader\");if(!ze(t._readableStreamController))throw new TypeError(\"Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source\");Yn(this,t),this._readIntoRequests=new D}get closed(){return Fe(this)?this._closedPromise:b(Qt(\"closed\"))}cancel(t=void 0){return Fe(this)?this._ownerReadableStream===void 0?b(jt(\"cancel\")):Wr(this,t):b(Qt(\"cancel\"))}read(t,r={}){if(!Fe(this))return b(Qt(\"read\"));if(!ArrayBuffer.isView(t))return b(new TypeError(\"view must be an array buffer view\"));if(t.byteLength===0)return b(new TypeError(\"view must have non-zero byteLength\"));if(t.buffer.byteLength===0)return b(new TypeError(\"view's buffer must have non-zero byteLength\"));if(Ae(t.buffer))return b(new TypeError(\"view's buffer has been detached\"));let s;try{s=fa(r,\"options\")}catch(y){return b(y)}const f=s.min;if(f===0)return b(new TypeError(\"options.min must be greater than 0\"));if(Xi(t)){if(f>t.byteLength)return b(new RangeError(\"options.min must be less than or equal to view's byteLength\"))}else if(f>t.length)return b(new RangeError(\"options.min must be less than or equal to view's length\"));if(this._ownerReadableStream===void 0)return b(jt(\"read from\"));let c,d;const m=E((y,C)=>{c=y,d=C});return Eo(this,t,f,{_chunkSteps:y=>c({value:y,done:!1}),_closeSteps:y=>c({value:y,done:!0}),_errorSteps:y=>d(y)}),m}releaseLock(){if(!Fe(this))throw Qt(\"releaseLock\");this._ownerReadableStream!==void 0&&da(this)}};n(Sn,\"ReadableStreamBYOBReader\");let ce=Sn;Object.defineProperties(ce.prototype,{cancel:{enumerable:!0},read:{enumerable:!0},releaseLock:{enumerable:!0},closed:{enumerable:!0}}),h(ce.prototype.cancel,\"cancel\"),h(ce.prototype.read,\"read\"),h(ce.prototype.releaseLock,\"releaseLock\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(ce.prototype,Symbol.toStringTag,{value:\"ReadableStreamBYOBReader\",configurable:!0});function Fe(e){return!l(e)||!Object.prototype.hasOwnProperty.call(e,\"_readIntoRequests\")?!1:e instanceof ce}n(Fe,\"IsReadableStreamBYOBReader\");function Eo(e,t,r,s){const f=e._ownerReadableStream;f._disturbed=!0,f._state===\"errored\"?s._errorSteps(f._storedError):ra(f._readableStreamController,t,r,s)}n(Eo,\"ReadableStreamBYOBReaderRead\");function da(e){_e(e);const t=new TypeError(\"Reader was released\");Ao(e,t)}n(da,\"ReadableStreamBYOBReaderRelease\");function Ao(e,t){const r=e._readIntoRequests;e._readIntoRequests=new D,r.forEach(s=>{s._errorSteps(t)})}n(Ao,\"ReadableStreamBYOBReaderErrorReadIntoRequests\");function Qt(e){return new TypeError(`ReadableStreamBYOBReader.prototype.${e} can only be used on a ReadableStreamBYOBReader`)}n(Qt,\"byobReaderBrandCheckException\");function St(e,t){const{highWaterMark:r}=e;if(r===void 0)return t;if(ao(r)||r<0)throw new RangeError(\"Invalid highWaterMark\");return r}n(St,\"ExtractHighWaterMark\");function Yt(e){const{size:t}=e;return t||(()=>1)}n(Yt,\"ExtractSizeAlgorithm\");function Gt(e,t){ue(e,t);const r=e?.highWaterMark,s=e?.size;return{highWaterMark:r===void 0?void 0:Ir(r),size:s===void 0?void 0:ha(s,`${t} has member 'size' that`)}}n(Gt,\"convertQueuingStrategy\");function ha(e,t){return Z(e,t),r=>Ir(e(r))}n(ha,\"convertQueuingStrategySize\");function pa(e,t){ue(e,t);const r=e?.abort,s=e?.close,f=e?.start,c=e?.type,d=e?.write;return{abort:r===void 0?void 0:ba(r,e,`${t} has member 'abort' that`),close:s===void 0?void 0:ma(s,e,`${t} has member 'close' that`),start:f===void 0?void 0:ya(f,e,`${t} has member 'start' that`),write:d===void 0?void 0:ga(d,e,`${t} has member 'write' that`),type:c}}n(pa,\"convertUnderlyingSink\");function ba(e,t,r){return Z(e,r),s=>j(e,t,[s])}n(ba,\"convertUnderlyingSinkAbortCallback\");function ma(e,t,r){return Z(e,r),()=>j(e,t,[])}n(ma,\"convertUnderlyingSinkCloseCallback\");function ya(e,t,r){return Z(e,r),s=>z(e,t,[s])}n(ya,\"convertUnderlyingSinkStartCallback\");function ga(e,t,r){return Z(e,r),(s,f)=>j(e,t,[s,f])}n(ga,\"convertUnderlyingSinkWriteCallback\");function Bo(e,t){if(!Ge(e))throw new TypeError(`${t} is not a WritableStream.`)}n(Bo,\"assertWritableStream\");function _a(e){if(typeof e!=\"object\"||e===null)return!1;try{return typeof e.aborted==\"boolean\"}catch{return!1}}n(_a,\"isAbortSignal\");const Sa=typeof AbortController==\"function\";function wa(){if(Sa)return new AbortController}n(wa,\"createAbortController\");const wn=class wn{constructor(t={},r={}){t===void 0?t=null:Jn(t,\"First parameter\");const s=Gt(r,\"Second parameter\"),f=pa(t,\"First parameter\");if(Wo(this),f.type!==void 0)throw new RangeError(\"Invalid type is specified\");const d=Yt(s),m=St(s,1);Ia(this,f,m,d)}get locked(){if(!Ge(this))throw er(\"locked\");return Ze(this)}abort(t=void 0){return Ge(this)?Ze(this)?b(new TypeError(\"Cannot abort a stream that already has a writer\")):Zt(this,t):b(er(\"abort\"))}close(){return Ge(this)?Ze(this)?b(new TypeError(\"Cannot close a stream that already has a writer\")):he(this)?b(new TypeError(\"Cannot close an already-closing stream\")):qo(this):b(er(\"close\"))}getWriter(){if(!Ge(this))throw er(\"getWriter\");return ko(this)}};n(wn,\"WritableStream\");let de=wn;Object.defineProperties(de.prototype,{abort:{enumerable:!0},close:{enumerable:!0},getWriter:{enumerable:!0},locked:{enumerable:!0}}),h(de.prototype.abort,\"abort\"),h(de.prototype.close,\"close\"),h(de.prototype.getWriter,\"getWriter\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(de.prototype,Symbol.toStringTag,{value:\"WritableStream\",configurable:!0});function ko(e){return new re(e)}n(ko,\"AcquireWritableStreamDefaultWriter\");function Ra(e,t,r,s,f=1,c=()=>1){const d=Object.create(de.prototype);Wo(d);const m=Object.create(ke.prototype);return Lo(d,m,e,t,r,s,f,c),d}n(Ra,\"CreateWritableStream\");function Wo(e){e._state=\"writable\",e._storedError=void 0,e._writer=void 0,e._writableStreamController=void 0,e._writeRequests=new D,e._inFlightWriteRequest=void 0,e._closeRequest=void 0,e._inFlightCloseRequest=void 0,e._pendingAbortRequest=void 0,e._backpressure=!1}n(Wo,\"InitializeWritableStream\");function Ge(e){return!l(e)||!Object.prototype.hasOwnProperty.call(e,\"_writableStreamController\")?!1:e instanceof de}n(Ge,\"IsWritableStream\");function Ze(e){return e._writer!==void 0}n(Ze,\"IsWritableStreamLocked\");function Zt(e,t){var r;if(e._state===\"closed\"||e._state===\"errored\")return T(void 0);e._writableStreamController._abortReason=t,(r=e._writableStreamController._abortController)===null||r===void 0||r.abort(t);const s=e._state;if(s===\"closed\"||s===\"errored\")return T(void 0);if(e._pendingAbortRequest!==void 0)return e._pendingAbortRequest._promise;let f=!1;s===\"erroring\"&&(f=!0,t=void 0);const c=E((d,m)=>{e._pendingAbortRequest={_promise:void 0,_resolve:d,_reject:m,_reason:t,_wasAlreadyErroring:f}});return e._pendingAbortRequest._promise=c,f||Xr(e,t),c}n(Zt,\"WritableStreamAbort\");function qo(e){const t=e._state;if(t===\"closed\"||t===\"errored\")return b(new TypeError(`The stream (in ${t} state) is not in the writable state and cannot be closed`));const r=E((f,c)=>{const d={_resolve:f,_reject:c};e._closeRequest=d}),s=e._writer;return s!==void 0&&e._backpressure&&t===\"writable\"&&ln(s),Fa(e._writableStreamController),r}n(qo,\"WritableStreamClose\");function Ta(e){return E((r,s)=>{const f={_resolve:r,_reject:s};e._writeRequests.push(f)})}n(Ta,\"WritableStreamAddWriteRequest\");function Jr(e,t){if(e._state===\"writable\"){Xr(e,t);return}en(e)}n(Jr,\"WritableStreamDealWithRejection\");function Xr(e,t){const r=e._writableStreamController;e._state=\"erroring\",e._storedError=t;const s=e._writer;s!==void 0&&zo(s,t),!Aa(e)&&r._started&&en(e)}n(Xr,\"WritableStreamStartErroring\");function en(e){e._state=\"errored\",e._writableStreamController[Qn]();const t=e._storedError;if(e._writeRequests.forEach(f=>{f._reject(t)}),e._writeRequests=new D,e._pendingAbortRequest===void 0){Kt(e);return}const r=e._pendingAbortRequest;if(e._pendingAbortRequest=void 0,r._wasAlreadyErroring){r._reject(t),Kt(e);return}const s=e._writableStreamController[Ft](r._reason);_(s,()=>(r._resolve(),Kt(e),null),f=>(r._reject(f),Kt(e),null))}n(en,\"WritableStreamFinishErroring\");function Ca(e){e._inFlightWriteRequest._resolve(void 0),e._inFlightWriteRequest=void 0}n(Ca,\"WritableStreamFinishInFlightWrite\");function Pa(e,t){e._inFlightWriteRequest._reject(t),e._inFlightWriteRequest=void 0,Jr(e,t)}n(Pa,\"WritableStreamFinishInFlightWriteWithError\");function va(e){e._inFlightCloseRequest._resolve(void 0),e._inFlightCloseRequest=void 0,e._state===\"erroring\"&&(e._storedError=void 0,e._pendingAbortRequest!==void 0&&(e._pendingAbortRequest._resolve(),e._pendingAbortRequest=void 0)),e._state=\"closed\";const r=e._writer;r!==void 0&&Uo(r)}n(va,\"WritableStreamFinishInFlightClose\");function Ea(e,t){e._inFlightCloseRequest._reject(t),e._inFlightCloseRequest=void 0,e._pendingAbortRequest!==void 0&&(e._pendingAbortRequest._reject(t),e._pendingAbortRequest=void 0),Jr(e,t)}n(Ea,\"WritableStreamFinishInFlightCloseWithError\");function he(e){return!(e._closeRequest===void 0&&e._inFlightCloseRequest===void 0)}n(he,\"WritableStreamCloseQueuedOrInFlight\");function Aa(e){return!(e._inFlightWriteRequest===void 0&&e._inFlightCloseRequest===void 0)}n(Aa,\"WritableStreamHasOperationMarkedInFlight\");function Ba(e){e._inFlightCloseRequest=e._closeRequest,e._closeRequest=void 0}n(Ba,\"WritableStreamMarkCloseRequestInFlight\");function ka(e){e._inFlightWriteRequest=e._writeRequests.shift()}n(ka,\"WritableStreamMarkFirstWriteRequestInFlight\");function Kt(e){e._closeRequest!==void 0&&(e._closeRequest._reject(e._storedError),e._closeRequest=void 0);const t=e._writer;t!==void 0&&an(t,e._storedError)}n(Kt,\"WritableStreamRejectCloseAndClosedPromiseIfNeeded\");function tn(e,t){const r=e._writer;r!==void 0&&t!==e._backpressure&&(t?xa(r):ln(r)),e._backpressure=t}n(tn,\"WritableStreamUpdateBackpressure\");const Rn=class Rn{constructor(t){if(Se(t,1,\"WritableStreamDefaultWriter\"),Bo(t,\"First parameter\"),Ze(t))throw new TypeError(\"This stream has already been locked for exclusive writing by another writer\");this._ownerWritableStream=t,t._writer=this;const r=t._state;if(r===\"writable\")!he(t)&&t._backpressure?rr(this):xo(this),tr(this);else if(r===\"erroring\")sn(this,t._storedError),tr(this);else if(r===\"closed\")xo(this),Ma(this);else{const s=t._storedError;sn(this,s),Mo(this,s)}}get closed(){return je(this)?this._closedPromise:b(Le(\"closed\"))}get desiredSize(){if(!je(this))throw Le(\"desiredSize\");if(this._ownerWritableStream===void 0)throw Rt(\"desiredSize\");return za(this)}get ready(){return je(this)?this._readyPromise:b(Le(\"ready\"))}abort(t=void 0){return je(this)?this._ownerWritableStream===void 0?b(Rt(\"abort\")):Wa(this,t):b(Le(\"abort\"))}close(){if(!je(this))return b(Le(\"close\"));const t=this._ownerWritableStream;return t===void 0?b(Rt(\"close\")):he(t)?b(new TypeError(\"Cannot close an already-closing stream\")):Oo(this)}releaseLock(){if(!je(this))throw Le(\"releaseLock\");this._ownerWritableStream!==void 0&&Io(this)}write(t=void 0){return je(this)?this._ownerWritableStream===void 0?b(Rt(\"write to\")):Fo(this,t):b(Le(\"write\"))}};n(Rn,\"WritableStreamDefaultWriter\");let re=Rn;Object.defineProperties(re.prototype,{abort:{enumerable:!0},close:{enumerable:!0},releaseLock:{enumerable:!0},write:{enumerable:!0},closed:{enumerable:!0},desiredSize:{enumerable:!0},ready:{enumerable:!0}}),h(re.prototype.abort,\"abort\"),h(re.prototype.close,\"close\"),h(re.prototype.releaseLock,\"releaseLock\"),h(re.prototype.write,\"write\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(re.prototype,Symbol.toStringTag,{value:\"WritableStreamDefaultWriter\",configurable:!0});function je(e){return!l(e)||!Object.prototype.hasOwnProperty.call(e,\"_ownerWritableStream\")?!1:e instanceof re}n(je,\"IsWritableStreamDefaultWriter\");function Wa(e,t){const r=e._ownerWritableStream;return Zt(r,t)}n(Wa,\"WritableStreamDefaultWriterAbort\");function Oo(e){const t=e._ownerWritableStream;return qo(t)}n(Oo,\"WritableStreamDefaultWriterClose\");function qa(e){const t=e._ownerWritableStream,r=t._state;return he(t)||r===\"closed\"?T(void 0):r===\"errored\"?b(t._storedError):Oo(e)}n(qa,\"WritableStreamDefaultWriterCloseWithErrorPropagation\");function Oa(e,t){e._closedPromiseState===\"pending\"?an(e,t):Ua(e,t)}n(Oa,\"WritableStreamDefaultWriterEnsureClosedPromiseRejected\");function zo(e,t){e._readyPromiseState===\"pending\"?No(e,t):Na(e,t)}n(zo,\"WritableStreamDefaultWriterEnsureReadyPromiseRejected\");function za(e){const t=e._ownerWritableStream,r=t._state;return r===\"errored\"||r===\"erroring\"?null:r===\"closed\"?0:$o(t._writableStreamController)}n(za,\"WritableStreamDefaultWriterGetDesiredSize\");function Io(e){const t=e._ownerWritableStream,r=new TypeError(\"Writer was released and can no longer be used to monitor the stream's closedness\");zo(e,r),Oa(e,r),t._writer=void 0,e._ownerWritableStream=void 0}n(Io,\"WritableStreamDefaultWriterRelease\");function Fo(e,t){const r=e._ownerWritableStream,s=r._writableStreamController,f=ja(s,t);if(r!==e._ownerWritableStream)return b(Rt(\"write to\"));const c=r._state;if(c===\"errored\")return b(r._storedError);if(he(r)||c===\"closed\")return b(new TypeError(\"The stream is closing or closed and cannot be written to\"));if(c===\"erroring\")return b(r._storedError);const d=Ta(r);return La(s,t,f),d}n(Fo,\"WritableStreamDefaultWriterWrite\");const jo={},Tn=class Tn{constructor(){throw new TypeError(\"Illegal constructor\")}get abortReason(){if(!rn(this))throw on(\"abortReason\");return this._abortReason}get signal(){if(!rn(this))throw on(\"signal\");if(this._abortController===void 0)throw new TypeError(\"WritableStreamDefaultController.prototype.signal is not supported\");return this._abortController.signal}error(t=void 0){if(!rn(this))throw on(\"error\");this._controlledWritableStream._state===\"writable\"&&Do(this,t)}[Ft](t){const r=this._abortAlgorithm(t);return Jt(this),r}[Qn](){Be(this)}};n(Tn,\"WritableStreamDefaultController\");let ke=Tn;Object.defineProperties(ke.prototype,{abortReason:{enumerable:!0},signal:{enumerable:!0},error:{enumerable:!0}}),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(ke.prototype,Symbol.toStringTag,{value:\"WritableStreamDefaultController\",configurable:!0});function rn(e){return!l(e)||!Object.prototype.hasOwnProperty.call(e,\"_controlledWritableStream\")?!1:e instanceof ke}n(rn,\"IsWritableStreamDefaultController\");function Lo(e,t,r,s,f,c,d,m){t._controlledWritableStream=e,e._writableStreamController=t,t._queue=void 0,t._queueTotalSize=void 0,Be(t),t._abortReason=void 0,t._abortController=wa(),t._started=!1,t._strategySizeAlgorithm=m,t._strategyHWM=d,t._writeAlgorithm=s,t._closeAlgorithm=f,t._abortAlgorithm=c;const R=nn(t);tn(e,R);const y=r(),C=T(y);_(C,()=>(t._started=!0,Xt(t),null),P=>(t._started=!0,Jr(e,P),null))}n(Lo,\"SetUpWritableStreamDefaultController\");function Ia(e,t,r,s){const f=Object.create(ke.prototype);let c,d,m,R;t.start!==void 0?c=n(()=>t.start(f),\"startAlgorithm\"):c=n(()=>{},\"startAlgorithm\"),t.write!==void 0?d=n(y=>t.write(y,f),\"writeAlgorithm\"):d=n(()=>T(void 0),\"writeAlgorithm\"),t.close!==void 0?m=n(()=>t.close(),\"closeAlgorithm\"):m=n(()=>T(void 0),\"closeAlgorithm\"),t.abort!==void 0?R=n(y=>t.abort(y),\"abortAlgorithm\"):R=n(()=>T(void 0),\"abortAlgorithm\"),Lo(e,f,c,d,m,R,r,s)}n(Ia,\"SetUpWritableStreamDefaultControllerFromUnderlyingSink\");function Jt(e){e._writeAlgorithm=void 0,e._closeAlgorithm=void 0,e._abortAlgorithm=void 0,e._strategySizeAlgorithm=void 0}n(Jt,\"WritableStreamDefaultControllerClearAlgorithms\");function Fa(e){Nr(e,jo,0),Xt(e)}n(Fa,\"WritableStreamDefaultControllerClose\");function ja(e,t){try{return e._strategySizeAlgorithm(t)}catch(r){return wt(e,r),1}}n(ja,\"WritableStreamDefaultControllerGetChunkSize\");function $o(e){return e._strategyHWM-e._queueTotalSize}n($o,\"WritableStreamDefaultControllerGetDesiredSize\");function La(e,t,r){try{Nr(e,t,r)}catch(f){wt(e,f);return}const s=e._controlledWritableStream;if(!he(s)&&s._state===\"writable\"){const f=nn(e);tn(s,f)}Xt(e)}n(La,\"WritableStreamDefaultControllerWrite\");function Xt(e){const t=e._controlledWritableStream;if(!e._started||t._inFlightWriteRequest!==void 0)return;if(t._state===\"erroring\"){en(t);return}if(e._queue.length===0)return;const s=Ji(e);s===jo?$a(e):Da(e,s)}n(Xt,\"WritableStreamDefaultControllerAdvanceQueueIfNeeded\");function wt(e,t){e._controlledWritableStream._state===\"writable\"&&Do(e,t)}n(wt,\"WritableStreamDefaultControllerErrorIfNeeded\");function $a(e){const t=e._controlledWritableStream;Ba(t),xr(e);const r=e._closeAlgorithm();Jt(e),_(r,()=>(va(t),null),s=>(Ea(t,s),null))}n($a,\"WritableStreamDefaultControllerProcessClose\");function Da(e,t){const r=e._controlledWritableStream;ka(r);const s=e._writeAlgorithm(t);_(s,()=>{Ca(r);const f=r._state;if(xr(e),!he(r)&&f===\"writable\"){const c=nn(e);tn(r,c)}return Xt(e),null},f=>(r._state===\"writable\"&&Jt(e),Pa(r,f),null))}n(Da,\"WritableStreamDefaultControllerProcessWrite\");function nn(e){return $o(e)<=0}n(nn,\"WritableStreamDefaultControllerGetBackpressure\");function Do(e,t){const r=e._controlledWritableStream;Jt(e),Xr(r,t)}n(Do,\"WritableStreamDefaultControllerError\");function er(e){return new TypeError(`WritableStream.prototype.${e} can only be used on a WritableStream`)}n(er,\"streamBrandCheckException$2\");function on(e){return new TypeError(`WritableStreamDefaultController.prototype.${e} can only be used on a WritableStreamDefaultController`)}n(on,\"defaultControllerBrandCheckException$2\");function Le(e){return new TypeError(`WritableStreamDefaultWriter.prototype.${e} can only be used on a WritableStreamDefaultWriter`)}n(Le,\"defaultWriterBrandCheckException\");function Rt(e){return new TypeError(\"Cannot \"+e+\" a stream using a released writer\")}n(Rt,\"defaultWriterLockException\");function tr(e){e._closedPromise=E((t,r)=>{e._closedPromise_resolve=t,e._closedPromise_reject=r,e._closedPromiseState=\"pending\"})}n(tr,\"defaultWriterClosedPromiseInitialize\");function Mo(e,t){tr(e),an(e,t)}n(Mo,\"defaultWriterClosedPromiseInitializeAsRejected\");function Ma(e){tr(e),Uo(e)}n(Ma,\"defaultWriterClosedPromiseInitializeAsResolved\");function an(e,t){e._closedPromise_reject!==void 0&&(Q(e._closedPromise),e._closedPromise_reject(t),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0,e._closedPromiseState=\"rejected\")}n(an,\"defaultWriterClosedPromiseReject\");function Ua(e,t){Mo(e,t)}n(Ua,\"defaultWriterClosedPromiseResetToRejected\");function Uo(e){e._closedPromise_resolve!==void 0&&(e._closedPromise_resolve(void 0),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0,e._closedPromiseState=\"resolved\")}n(Uo,\"defaultWriterClosedPromiseResolve\");function rr(e){e._readyPromise=E((t,r)=>{e._readyPromise_resolve=t,e._readyPromise_reject=r}),e._readyPromiseState=\"pending\"}n(rr,\"defaultWriterReadyPromiseInitialize\");function sn(e,t){rr(e),No(e,t)}n(sn,\"defaultWriterReadyPromiseInitializeAsRejected\");function xo(e){rr(e),ln(e)}n(xo,\"defaultWriterReadyPromiseInitializeAsResolved\");function No(e,t){e._readyPromise_reject!==void 0&&(Q(e._readyPromise),e._readyPromise_reject(t),e._readyPromise_resolve=void 0,e._readyPromise_reject=void 0,e._readyPromiseState=\"rejected\")}n(No,\"defaultWriterReadyPromiseReject\");function xa(e){rr(e)}n(xa,\"defaultWriterReadyPromiseReset\");function Na(e,t){sn(e,t)}n(Na,\"defaultWriterReadyPromiseResetToRejected\");function ln(e){e._readyPromise_resolve!==void 0&&(e._readyPromise_resolve(void 0),e._readyPromise_resolve=void 0,e._readyPromise_reject=void 0,e._readyPromiseState=\"fulfilled\")}n(ln,\"defaultWriterReadyPromiseResolve\");function Ha(){if(typeof globalThis<\"u\")return globalThis;if(typeof self<\"u\")return self;if(typeof _shared_node_fetch_native_with_agent_1a4a356d_mjs__WEBPACK_IMPORTED_MODULE_6__.c<\"u\")return _shared_node_fetch_native_with_agent_1a4a356d_mjs__WEBPACK_IMPORTED_MODULE_6__.c}n(Ha,\"getGlobals\");const un=Ha();function Va(e){if(!(typeof e==\"function\"||typeof e==\"object\")||e.name!==\"DOMException\")return!1;try{return new e,!0}catch{return!1}}n(Va,\"isDOMExceptionConstructor\");function Qa(){const e=un?.DOMException;return Va(e)?e:void 0}n(Qa,\"getFromGlobal\");function Ya(){const e=n(function(r,s){this.message=r||\"\",this.name=s||\"Error\",Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)},\"DOMException\");return h(e,\"DOMException\"),e.prototype=Object.create(Error.prototype),Object.defineProperty(e.prototype,\"constructor\",{value:e,writable:!0,configurable:!0}),e}n(Ya,\"createPolyfill\");const Ga=Qa()||Ya();function Ho(e,t,r,s,f,c){const d=Qe(e),m=ko(t);e._disturbed=!0;let R=!1,y=T(void 0);return E((C,P)=>{let B;if(c!==void 0){if(B=n(()=>{const S=c.reason!==void 0?c.reason:new Ga(\"Aborted\",\"AbortError\"),v=[];s||v.push(()=>t._state===\"writable\"?Zt(t,S):T(void 0)),f||v.push(()=>e._state===\"readable\"?ie(e,S):T(void 0)),N(()=>Promise.all(v.map(k=>k())),!0,S)},\"abortAlgorithm\"),c.aborted){B();return}c.addEventListener(\"abort\",B)}function ae(){return E((S,v)=>{function k(Y){Y?S():q(nt(),k,v)}n(k,\"next\"),k(!1)})}n(ae,\"pipeLoop\");function nt(){return R?T(!0):q(m._readyPromise,()=>E((S,v)=>{mt(d,{_chunkSteps:k=>{y=q(Fo(m,k),void 0,u),S(!1)},_closeSteps:()=>S(!0),_errorSteps:v})}))}if(n(nt,\"pipeStep\"),Te(e,d._closedPromise,S=>(s?J(!0,S):N(()=>Zt(t,S),!0,S),null)),Te(t,m._closedPromise,S=>(f?J(!0,S):N(()=>ie(e,S),!0,S),null)),x(e,d._closedPromise,()=>(r?J():N(()=>qa(m)),null)),he(t)||t._state===\"closed\"){const S=new TypeError(\"the destination writable stream closed before all data could be piped to it\");f?J(!0,S):N(()=>ie(e,S),!0,S)}Q(ae());function Oe(){const S=y;return q(y,()=>S!==y?Oe():void 0)}n(Oe,\"waitForWritesToFinish\");function Te(S,v,k){S._state===\"errored\"?k(S._storedError):I(v,k)}n(Te,\"isOrBecomesErrored\");function x(S,v,k){S._state===\"closed\"?k():V(v,k)}n(x,\"isOrBecomesClosed\");function N(S,v,k){if(R)return;R=!0,t._state===\"writable\"&&!he(t)?V(Oe(),Y):Y();function Y(){return _(S(),()=>Ce(v,k),ot=>Ce(!0,ot)),null}n(Y,\"doTheRest\")}n(N,\"shutdownWithAction\");function J(S,v){R||(R=!0,t._state===\"writable\"&&!he(t)?V(Oe(),()=>Ce(S,v)):Ce(S,v))}n(J,\"shutdown\");function Ce(S,v){return Io(m),_e(d),c!==void 0&&c.removeEventListener(\"abort\",B),S?P(v):C(void 0),null}n(Ce,\"finalize\")})}n(Ho,\"ReadableStreamPipeTo\");const Cn=class Cn{constructor(){throw new TypeError(\"Illegal constructor\")}get desiredSize(){if(!nr(this))throw ir(\"desiredSize\");return fn(this)}close(){if(!nr(this))throw ir(\"close\");if(!Je(this))throw new TypeError(\"The stream is not in a state that permits close\");$e(this)}enqueue(t=void 0){if(!nr(this))throw ir(\"enqueue\");if(!Je(this))throw new TypeError(\"The stream is not in a state that permits enqueue\");return Ke(this,t)}error(t=void 0){if(!nr(this))throw ir(\"error\");oe(this,t)}[Ar](t){Be(this);const r=this._cancelAlgorithm(t);return or(this),r}[Br](t){const r=this._controlledReadableStream;if(this._queue.length>0){const s=xr(this);this._closeRequested&&this._queue.length===0?(or(this),Pt(r)):Tt(this),t._chunkSteps(s)}else eo(r,t),Tt(this)}[kr](){}};n(Cn,\"ReadableStreamDefaultController\");let ne=Cn;Object.defineProperties(ne.prototype,{close:{enumerable:!0},enqueue:{enumerable:!0},error:{enumerable:!0},desiredSize:{enumerable:!0}}),h(ne.prototype.close,\"close\"),h(ne.prototype.enqueue,\"enqueue\"),h(ne.prototype.error,\"error\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(ne.prototype,Symbol.toStringTag,{value:\"ReadableStreamDefaultController\",configurable:!0});function nr(e){return!l(e)||!Object.prototype.hasOwnProperty.call(e,\"_controlledReadableStream\")?!1:e instanceof ne}n(nr,\"IsReadableStreamDefaultController\");function Tt(e){if(!Vo(e))return;if(e._pulling){e._pullAgain=!0;return}e._pulling=!0;const r=e._pullAlgorithm();_(r,()=>(e._pulling=!1,e._pullAgain&&(e._pullAgain=!1,Tt(e)),null),s=>(oe(e,s),null))}n(Tt,\"ReadableStreamDefaultControllerCallPullIfNeeded\");function Vo(e){const t=e._controlledReadableStream;return!Je(e)||!e._started?!1:!!(qe(t)&&Lt(t)>0||fn(e)>0)}n(Vo,\"ReadableStreamDefaultControllerShouldCallPull\");function or(e){e._pullAlgorithm=void 0,e._cancelAlgorithm=void 0,e._strategySizeAlgorithm=void 0}n(or,\"ReadableStreamDefaultControllerClearAlgorithms\");function $e(e){if(!Je(e))return;const t=e._controlledReadableStream;e._closeRequested=!0,e._queue.length===0&&(or(e),Pt(t))}n($e,\"ReadableStreamDefaultControllerClose\");function Ke(e,t){if(!Je(e))return;const r=e._controlledReadableStream;if(qe(r)&&Lt(r)>0)Lr(r,t,!1);else{let s;try{s=e._strategySizeAlgorithm(t)}catch(f){throw oe(e,f),f}try{Nr(e,t,s)}catch(f){throw oe(e,f),f}}Tt(e)}n(Ke,\"ReadableStreamDefaultControllerEnqueue\");function oe(e,t){const r=e._controlledReadableStream;r._state===\"readable\"&&(Be(e),or(e),Zo(r,t))}n(oe,\"ReadableStreamDefaultControllerError\");function fn(e){const t=e._controlledReadableStream._state;return t===\"errored\"?null:t===\"closed\"?0:e._strategyHWM-e._queueTotalSize}n(fn,\"ReadableStreamDefaultControllerGetDesiredSize\");function Za(e){return!Vo(e)}n(Za,\"ReadableStreamDefaultControllerHasBackpressure\");function Je(e){const t=e._controlledReadableStream._state;return!e._closeRequested&&t===\"readable\"}n(Je,\"ReadableStreamDefaultControllerCanCloseOrEnqueue\");function Qo(e,t,r,s,f,c,d){t._controlledReadableStream=e,t._queue=void 0,t._queueTotalSize=void 0,Be(t),t._started=!1,t._closeRequested=!1,t._pullAgain=!1,t._pulling=!1,t._strategySizeAlgorithm=d,t._strategyHWM=c,t._pullAlgorithm=s,t._cancelAlgorithm=f,e._readableStreamController=t;const m=r();_(T(m),()=>(t._started=!0,Tt(t),null),R=>(oe(t,R),null))}n(Qo,\"SetUpReadableStreamDefaultController\");function Ka(e,t,r,s){const f=Object.create(ne.prototype);let c,d,m;t.start!==void 0?c=n(()=>t.start(f),\"startAlgorithm\"):c=n(()=>{},\"startAlgorithm\"),t.pull!==void 0?d=n(()=>t.pull(f),\"pullAlgorithm\"):d=n(()=>T(void 0),\"pullAlgorithm\"),t.cancel!==void 0?m=n(R=>t.cancel(R),\"cancelAlgorithm\"):m=n(()=>T(void 0),\"cancelAlgorithm\"),Qo(e,f,c,d,m,r,s)}n(Ka,\"SetUpReadableStreamDefaultControllerFromUnderlyingSource\");function ir(e){return new TypeError(`ReadableStreamDefaultController.prototype.${e} can only be used on a ReadableStreamDefaultController`)}n(ir,\"defaultControllerBrandCheckException$1\");function Ja(e,t){return ze(e._readableStreamController)?es(e):Xa(e)}n(Ja,\"ReadableStreamTee\");function Xa(e,t){const r=Qe(e);let s=!1,f=!1,c=!1,d=!1,m,R,y,C,P;const B=E(x=>{P=x});function ae(){return s?(f=!0,T(void 0)):(s=!0,mt(r,{_chunkSteps:N=>{ge(()=>{f=!1;const J=N,Ce=N;c||Ke(y._readableStreamController,J),d||Ke(C._readableStreamController,Ce),s=!1,f&&ae()})},_closeSteps:()=>{s=!1,c||$e(y._readableStreamController),d||$e(C._readableStreamController),(!c||!d)&&P(void 0)},_errorSteps:()=>{s=!1}}),T(void 0))}n(ae,\"pullAlgorithm\");function nt(x){if(c=!0,m=x,d){const N=yt([m,R]),J=ie(e,N);P(J)}return B}n(nt,\"cancel1Algorithm\");function Oe(x){if(d=!0,R=x,c){const N=yt([m,R]),J=ie(e,N);P(J)}return B}n(Oe,\"cancel2Algorithm\");function Te(){}return n(Te,\"startAlgorithm\"),y=Ct(Te,ae,nt),C=Ct(Te,ae,Oe),I(r._closedPromise,x=>(oe(y._readableStreamController,x),oe(C._readableStreamController,x),(!c||!d)&&P(void 0),null)),[y,C]}n(Xa,\"ReadableStreamDefaultTee\");function es(e){let t=Qe(e),r=!1,s=!1,f=!1,c=!1,d=!1,m,R,y,C,P;const B=E(S=>{P=S});function ae(S){I(S._closedPromise,v=>(S!==t||(K(y._readableStreamController,v),K(C._readableStreamController,v),(!c||!d)&&P(void 0)),null))}n(ae,\"forwardReaderError\");function nt(){Fe(t)&&(_e(t),t=Qe(e),ae(t)),mt(t,{_chunkSteps:v=>{ge(()=>{s=!1,f=!1;const k=v;let Y=v;if(!c&&!d)try{Y=fo(v)}catch(ot){K(y._readableStreamController,ot),K(C._readableStreamController,ot),P(ie(e,ot));return}c||Nt(y._readableStreamController,k),d||Nt(C._readableStreamController,Y),r=!1,s?Te():f&&x()})},_closeSteps:()=>{r=!1,c||gt(y._readableStreamController),d||gt(C._readableStreamController),y._readableStreamController._pendingPullIntos.length>0&&Ht(y._readableStreamController,0),C._readableStreamController._pendingPullIntos.length>0&&Ht(C._readableStreamController,0),(!c||!d)&&P(void 0)},_errorSteps:()=>{r=!1}})}n(nt,\"pullWithDefaultReader\");function Oe(S,v){Ee(t)&&(_e(t),t=Co(e),ae(t));const k=v?C:y,Y=v?y:C;Eo(t,S,1,{_chunkSteps:it=>{ge(()=>{s=!1,f=!1;const at=v?d:c;if(v?c:d)at||Vt(k._readableStreamController,it);else{let ui;try{ui=fo(it)}catch(kn){K(k._readableStreamController,kn),K(Y._readableStreamController,kn),P(ie(e,kn));return}at||Vt(k._readableStreamController,it),Nt(Y._readableStreamController,ui)}r=!1,s?Te():f&&x()})},_closeSteps:it=>{r=!1;const at=v?d:c,fr=v?c:d;at||gt(k._readableStreamController),fr||gt(Y._readableStreamController),it!==void 0&&(at||Vt(k._readableStreamController,it),!fr&&Y._readableStreamController._pendingPullIntos.length>0&&Ht(Y._readableStreamController,0)),(!at||!fr)&&P(void 0)},_errorSteps:()=>{r=!1}})}n(Oe,\"pullWithBYOBReader\");function Te(){if(r)return s=!0,T(void 0);r=!0;const S=Gr(y._readableStreamController);return S===null?nt():Oe(S._view,!1),T(void 0)}n(Te,\"pull1Algorithm\");function x(){if(r)return f=!0,T(void 0);r=!0;const S=Gr(C._readableStreamController);return S===null?nt():Oe(S._view,!0),T(void 0)}n(x,\"pull2Algorithm\");function N(S){if(c=!0,m=S,d){const v=yt([m,R]),k=ie(e,v);P(k)}return B}n(N,\"cancel1Algorithm\");function J(S){if(d=!0,R=S,c){const v=yt([m,R]),k=ie(e,v);P(k)}return B}n(J,\"cancel2Algorithm\");function Ce(){}return n(Ce,\"startAlgorithm\"),y=Go(Ce,Te,N),C=Go(Ce,x,J),ae(t),[y,C]}n(es,\"ReadableByteStreamTee\");function ts(e){return l(e)&&typeof e.getReader<\"u\"}n(ts,\"isReadableStreamLike\");function rs(e){return ts(e)?os(e.getReader()):ns(e)}n(rs,\"ReadableStreamFrom\");function ns(e){let t;const r=uo(e,\"async\"),s=u;function f(){let d;try{d=Yi(r)}catch(R){return b(R)}const m=T(d);return F(m,R=>{if(!l(R))throw new TypeError(\"The promise returned by the iterator.next() method must fulfill with an object\");if(Gi(R))$e(t._readableStreamController);else{const C=Zi(R);Ke(t._readableStreamController,C)}})}n(f,\"pullAlgorithm\");function c(d){const m=r.iterator;let R;try{R=Mt(m,\"return\")}catch(P){return b(P)}if(R===void 0)return T(void 0);let y;try{y=z(R,m,[d])}catch(P){return b(P)}const C=T(y);return F(C,P=>{if(!l(P))throw new TypeError(\"The promise returned by the iterator.return() method must fulfill with an object\")})}return n(c,\"cancelAlgorithm\"),t=Ct(s,f,c,0),t}n(ns,\"ReadableStreamFromIterable\");function os(e){let t;const r=u;function s(){let c;try{c=e.read()}catch(d){return b(d)}return F(c,d=>{if(!l(d))throw new TypeError(\"The promise returned by the reader.read() method must fulfill with an object\");if(d.done)$e(t._readableStreamController);else{const m=d.value;Ke(t._readableStreamController,m)}})}n(s,\"pullAlgorithm\");function f(c){try{return T(e.cancel(c))}catch(d){return b(d)}}return n(f,\"cancelAlgorithm\"),t=Ct(r,s,f,0),t}n(os,\"ReadableStreamFromDefaultReader\");function is(e,t){ue(e,t);const r=e,s=r?.autoAllocateChunkSize,f=r?.cancel,c=r?.pull,d=r?.start,m=r?.type;return{autoAllocateChunkSize:s===void 0?void 0:Fr(s,`${t} has member 'autoAllocateChunkSize' that`),cancel:f===void 0?void 0:as(f,r,`${t} has member 'cancel' that`),pull:c===void 0?void 0:ss(c,r,`${t} has member 'pull' that`),start:d===void 0?void 0:ls(d,r,`${t} has member 'start' that`),type:m===void 0?void 0:us(m,`${t} has member 'type' that`)}}n(is,\"convertUnderlyingDefaultOrByteSource\");function as(e,t,r){return Z(e,r),s=>j(e,t,[s])}n(as,\"convertUnderlyingSourceCancelCallback\");function ss(e,t,r){return Z(e,r),s=>j(e,t,[s])}n(ss,\"convertUnderlyingSourcePullCallback\");function ls(e,t,r){return Z(e,r),s=>z(e,t,[s])}n(ls,\"convertUnderlyingSourceStartCallback\");function us(e,t){if(e=`${e}`,e!==\"bytes\")throw new TypeError(`${t} '${e}' is not a valid enumeration value for ReadableStreamType`);return e}n(us,\"convertReadableStreamType\");function fs(e,t){return ue(e,t),{preventCancel:!!e?.preventCancel}}n(fs,\"convertIteratorOptions\");function Yo(e,t){ue(e,t);const r=e?.preventAbort,s=e?.preventCancel,f=e?.preventClose,c=e?.signal;return c!==void 0&&cs(c,`${t} has member 'signal' that`),{preventAbort:!!r,preventCancel:!!s,preventClose:!!f,signal:c}}n(Yo,\"convertPipeOptions\");function cs(e,t){if(!_a(e))throw new TypeError(`${t} is not an AbortSignal.`)}n(cs,\"assertAbortSignal\");function ds(e,t){ue(e,t);const r=e?.readable;zr(r,\"readable\",\"ReadableWritablePair\"),jr(r,`${t} has member 'readable' that`);const s=e?.writable;return zr(s,\"writable\",\"ReadableWritablePair\"),Bo(s,`${t} has member 'writable' that`),{readable:r,writable:s}}n(ds,\"convertReadableWritablePair\");const Pn=class Pn{constructor(t={},r={}){t===void 0?t=null:Jn(t,\"First parameter\");const s=Gt(r,\"Second parameter\"),f=is(t,\"First parameter\");if(cn(this),f.type===\"bytes\"){if(s.size!==void 0)throw new RangeError(\"The strategy for a byte stream cannot have a size function\");const c=St(s,0);aa(this,f,c)}else{const c=Yt(s),d=St(s,1);Ka(this,f,d,c)}}get locked(){if(!We(this))throw De(\"locked\");return qe(this)}cancel(t=void 0){return We(this)?qe(this)?b(new TypeError(\"Cannot cancel a stream that already has a reader\")):ie(this,t):b(De(\"cancel\"))}getReader(t=void 0){if(!We(this))throw De(\"getReader\");return la(t,\"First parameter\").mode===void 0?Qe(this):Co(this)}pipeThrough(t,r={}){if(!We(this))throw De(\"pipeThrough\");Se(t,1,\"pipeThrough\");const s=ds(t,\"First parameter\"),f=Yo(r,\"Second parameter\");if(qe(this))throw new TypeError(\"ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream\");if(Ze(s.writable))throw new TypeError(\"ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream\");const c=Ho(this,s.writable,f.preventClose,f.preventAbort,f.preventCancel,f.signal);return Q(c),s.readable}pipeTo(t,r={}){if(!We(this))return b(De(\"pipeTo\"));if(t===void 0)return b(\"Parameter 1 is required in 'pipeTo'.\");if(!Ge(t))return b(new TypeError(\"ReadableStream.prototype.pipeTo's first argument must be a WritableStream\"));let s;try{s=Yo(r,\"Second parameter\")}catch(f){return b(f)}return qe(this)?b(new TypeError(\"ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream\")):Ze(t)?b(new TypeError(\"ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream\")):Ho(this,t,s.preventClose,s.preventAbort,s.preventCancel,s.signal)}tee(){if(!We(this))throw De(\"tee\");const t=Ja(this);return yt(t)}values(t=void 0){if(!We(this))throw De(\"values\");const r=fs(t,\"First parameter\");return Vi(this,r.preventCancel)}[Ur](t){return this.values(t)}static from(t){return rs(t)}};n(Pn,\"ReadableStream\");let L=Pn;Object.defineProperties(L,{from:{enumerable:!0}}),Object.defineProperties(L.prototype,{cancel:{enumerable:!0},getReader:{enumerable:!0},pipeThrough:{enumerable:!0},pipeTo:{enumerable:!0},tee:{enumerable:!0},values:{enumerable:!0},locked:{enumerable:!0}}),h(L.from,\"from\"),h(L.prototype.cancel,\"cancel\"),h(L.prototype.getReader,\"getReader\"),h(L.prototype.pipeThrough,\"pipeThrough\"),h(L.prototype.pipeTo,\"pipeTo\"),h(L.prototype.tee,\"tee\"),h(L.prototype.values,\"values\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(L.prototype,Symbol.toStringTag,{value:\"ReadableStream\",configurable:!0}),Object.defineProperty(L.prototype,Ur,{value:L.prototype.values,writable:!0,configurable:!0});function Ct(e,t,r,s=1,f=()=>1){const c=Object.create(L.prototype);cn(c);const d=Object.create(ne.prototype);return Qo(c,d,e,t,r,s,f),c}n(Ct,\"CreateReadableStream\");function Go(e,t,r){const s=Object.create(L.prototype);cn(s);const f=Object.create(te.prototype);return To(s,f,e,t,r,0,void 0),s}n(Go,\"CreateReadableByteStream\");function cn(e){e._state=\"readable\",e._reader=void 0,e._storedError=void 0,e._disturbed=!1}n(cn,\"InitializeReadableStream\");function We(e){return!l(e)||!Object.prototype.hasOwnProperty.call(e,\"_readableStreamController\")?!1:e instanceof L}n(We,\"IsReadableStream\");function qe(e){return e._reader!==void 0}n(qe,\"IsReadableStreamLocked\");function ie(e,t){if(e._disturbed=!0,e._state===\"closed\")return T(void 0);if(e._state===\"errored\")return b(e._storedError);Pt(e);const r=e._reader;if(r!==void 0&&Fe(r)){const f=r._readIntoRequests;r._readIntoRequests=new D,f.forEach(c=>{c._closeSteps(void 0)})}const s=e._readableStreamController[Ar](t);return F(s,u)}n(ie,\"ReadableStreamCancel\");function Pt(e){e._state=\"closed\";const t=e._reader;if(t!==void 0&&(Zn(t),Ee(t))){const r=t._readRequests;t._readRequests=new D,r.forEach(s=>{s._closeSteps()})}}n(Pt,\"ReadableStreamClose\");function Zo(e,t){e._state=\"errored\",e._storedError=t;const r=e._reader;r!==void 0&&(Or(r,t),Ee(r)?ro(r,t):Ao(r,t))}n(Zo,\"ReadableStreamError\");function De(e){return new TypeError(`ReadableStream.prototype.${e} can only be used on a ReadableStream`)}n(De,\"streamBrandCheckException$1\");function Ko(e,t){ue(e,t);const r=e?.highWaterMark;return zr(r,\"highWaterMark\",\"QueuingStrategyInit\"),{highWaterMark:Ir(r)}}n(Ko,\"convertQueuingStrategyInit\");const Jo=n(e=>e.byteLength,\"byteLengthSizeFunction\");h(Jo,\"size\");const vn=class vn{constructor(t){Se(t,1,\"ByteLengthQueuingStrategy\"),t=Ko(t,\"First parameter\"),this._byteLengthQueuingStrategyHighWaterMark=t.highWaterMark}get highWaterMark(){if(!ei(this))throw Xo(\"highWaterMark\");return this._byteLengthQueuingStrategyHighWaterMark}get size(){if(!ei(this))throw Xo(\"size\");return Jo}};n(vn,\"ByteLengthQueuingStrategy\");let Xe=vn;Object.defineProperties(Xe.prototype,{highWaterMark:{enumerable:!0},size:{enumerable:!0}}),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(Xe.prototype,Symbol.toStringTag,{value:\"ByteLengthQueuingStrategy\",configurable:!0});function Xo(e){return new TypeError(`ByteLengthQueuingStrategy.prototype.${e} can only be used on a ByteLengthQueuingStrategy`)}n(Xo,\"byteLengthBrandCheckException\");function ei(e){return!l(e)||!Object.prototype.hasOwnProperty.call(e,\"_byteLengthQueuingStrategyHighWaterMark\")?!1:e instanceof Xe}n(ei,\"IsByteLengthQueuingStrategy\");const ti=n(()=>1,\"countSizeFunction\");h(ti,\"size\");const En=class En{constructor(t){Se(t,1,\"CountQueuingStrategy\"),t=Ko(t,\"First parameter\"),this._countQueuingStrategyHighWaterMark=t.highWaterMark}get highWaterMark(){if(!ni(this))throw ri(\"highWaterMark\");return this._countQueuingStrategyHighWaterMark}get size(){if(!ni(this))throw ri(\"size\");return ti}};n(En,\"CountQueuingStrategy\");let et=En;Object.defineProperties(et.prototype,{highWaterMark:{enumerable:!0},size:{enumerable:!0}}),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(et.prototype,Symbol.toStringTag,{value:\"CountQueuingStrategy\",configurable:!0});function ri(e){return new TypeError(`CountQueuingStrategy.prototype.${e} can only be used on a CountQueuingStrategy`)}n(ri,\"countBrandCheckException\");function ni(e){return!l(e)||!Object.prototype.hasOwnProperty.call(e,\"_countQueuingStrategyHighWaterMark\")?!1:e instanceof et}n(ni,\"IsCountQueuingStrategy\");function hs(e,t){ue(e,t);const r=e?.cancel,s=e?.flush,f=e?.readableType,c=e?.start,d=e?.transform,m=e?.writableType;return{cancel:r===void 0?void 0:ys(r,e,`${t} has member 'cancel' that`),flush:s===void 0?void 0:ps(s,e,`${t} has member 'flush' that`),readableType:f,start:c===void 0?void 0:bs(c,e,`${t} has member 'start' that`),transform:d===void 0?void 0:ms(d,e,`${t} has member 'transform' that`),writableType:m}}n(hs,\"convertTransformer\");function ps(e,t,r){return Z(e,r),s=>j(e,t,[s])}n(ps,\"convertTransformerFlushCallback\");function bs(e,t,r){return Z(e,r),s=>z(e,t,[s])}n(bs,\"convertTransformerStartCallback\");function ms(e,t,r){return Z(e,r),(s,f)=>j(e,t,[s,f])}n(ms,\"convertTransformerTransformCallback\");function ys(e,t,r){return Z(e,r),s=>j(e,t,[s])}n(ys,\"convertTransformerCancelCallback\");const An=class An{constructor(t={},r={},s={}){t===void 0&&(t=null);const f=Gt(r,\"Second parameter\"),c=Gt(s,\"Third parameter\"),d=hs(t,\"First parameter\");if(d.readableType!==void 0)throw new RangeError(\"Invalid readableType specified\");if(d.writableType!==void 0)throw new RangeError(\"Invalid writableType specified\");const m=St(c,0),R=Yt(c),y=St(f,1),C=Yt(f);let P;const B=E(ae=>{P=ae});gs(this,B,y,C,m,R),Ss(this,d),d.start!==void 0?P(d.start(this._transformStreamController)):P(void 0)}get readable(){if(!oi(this))throw li(\"readable\");return this._readable}get writable(){if(!oi(this))throw li(\"writable\");return this._writable}};n(An,\"TransformStream\");let tt=An;Object.defineProperties(tt.prototype,{readable:{enumerable:!0},writable:{enumerable:!0}}),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(tt.prototype,Symbol.toStringTag,{value:\"TransformStream\",configurable:!0});function gs(e,t,r,s,f,c){function d(){return t}n(d,\"startAlgorithm\");function m(B){return Ts(e,B)}n(m,\"writeAlgorithm\");function R(B){return Cs(e,B)}n(R,\"abortAlgorithm\");function y(){return Ps(e)}n(y,\"closeAlgorithm\"),e._writable=Ra(d,m,y,R,r,s);function C(){return vs(e)}n(C,\"pullAlgorithm\");function P(B){return Es(e,B)}n(P,\"cancelAlgorithm\"),e._readable=Ct(d,C,P,f,c),e._backpressure=void 0,e._backpressureChangePromise=void 0,e._backpressureChangePromise_resolve=void 0,ar(e,!0),e._transformStreamController=void 0}n(gs,\"InitializeTransformStream\");function oi(e){return!l(e)||!Object.prototype.hasOwnProperty.call(e,\"_transformStreamController\")?!1:e instanceof tt}n(oi,\"IsTransformStream\");function ii(e,t){oe(e._readable._readableStreamController,t),dn(e,t)}n(ii,\"TransformStreamError\");function dn(e,t){lr(e._transformStreamController),wt(e._writable._writableStreamController,t),hn(e)}n(dn,\"TransformStreamErrorWritableAndUnblockWrite\");function hn(e){e._backpressure&&ar(e,!1)}n(hn,\"TransformStreamUnblockWrite\");function ar(e,t){e._backpressureChangePromise!==void 0&&e._backpressureChangePromise_resolve(),e._backpressureChangePromise=E(r=>{e._backpressureChangePromise_resolve=r}),e._backpressure=t}n(ar,\"TransformStreamSetBackpressure\");const Bn=class Bn{constructor(){throw new TypeError(\"Illegal constructor\")}get desiredSize(){if(!sr(this))throw ur(\"desiredSize\");const t=this._controlledTransformStream._readable._readableStreamController;return fn(t)}enqueue(t=void 0){if(!sr(this))throw ur(\"enqueue\");ai(this,t)}error(t=void 0){if(!sr(this))throw ur(\"error\");ws(this,t)}terminate(){if(!sr(this))throw ur(\"terminate\");Rs(this)}};n(Bn,\"TransformStreamDefaultController\");let pe=Bn;Object.defineProperties(pe.prototype,{enqueue:{enumerable:!0},error:{enumerable:!0},terminate:{enumerable:!0},desiredSize:{enumerable:!0}}),h(pe.prototype.enqueue,\"enqueue\"),h(pe.prototype.error,\"error\"),h(pe.prototype.terminate,\"terminate\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(pe.prototype,Symbol.toStringTag,{value:\"TransformStreamDefaultController\",configurable:!0});function sr(e){return!l(e)||!Object.prototype.hasOwnProperty.call(e,\"_controlledTransformStream\")?!1:e instanceof pe}n(sr,\"IsTransformStreamDefaultController\");function _s(e,t,r,s,f){t._controlledTransformStream=e,e._transformStreamController=t,t._transformAlgorithm=r,t._flushAlgorithm=s,t._cancelAlgorithm=f,t._finishPromise=void 0,t._finishPromise_resolve=void 0,t._finishPromise_reject=void 0}n(_s,\"SetUpTransformStreamDefaultController\");function Ss(e,t){const r=Object.create(pe.prototype);let s,f,c;t.transform!==void 0?s=n(d=>t.transform(d,r),\"transformAlgorithm\"):s=n(d=>{try{return ai(r,d),T(void 0)}catch(m){return b(m)}},\"transformAlgorithm\"),t.flush!==void 0?f=n(()=>t.flush(r),\"flushAlgorithm\"):f=n(()=>T(void 0),\"flushAlgorithm\"),t.cancel!==void 0?c=n(d=>t.cancel(d),\"cancelAlgorithm\"):c=n(()=>T(void 0),\"cancelAlgorithm\"),_s(e,r,s,f,c)}n(Ss,\"SetUpTransformStreamDefaultControllerFromTransformer\");function lr(e){e._transformAlgorithm=void 0,e._flushAlgorithm=void 0,e._cancelAlgorithm=void 0}n(lr,\"TransformStreamDefaultControllerClearAlgorithms\");function ai(e,t){const r=e._controlledTransformStream,s=r._readable._readableStreamController;if(!Je(s))throw new TypeError(\"Readable side is not in a state that permits enqueue\");try{Ke(s,t)}catch(c){throw dn(r,c),r._readable._storedError}Za(s)!==r._backpressure&&ar(r,!0)}n(ai,\"TransformStreamDefaultControllerEnqueue\");function ws(e,t){ii(e._controlledTransformStream,t)}n(ws,\"TransformStreamDefaultControllerError\");function si(e,t){const r=e._transformAlgorithm(t);return F(r,void 0,s=>{throw ii(e._controlledTransformStream,s),s})}n(si,\"TransformStreamDefaultControllerPerformTransform\");function Rs(e){const t=e._controlledTransformStream,r=t._readable._readableStreamController;$e(r);const s=new TypeError(\"TransformStream terminated\");dn(t,s)}n(Rs,\"TransformStreamDefaultControllerTerminate\");function Ts(e,t){const r=e._transformStreamController;if(e._backpressure){const s=e._backpressureChangePromise;return F(s,()=>{const f=e._writable;if(f._state===\"erroring\")throw f._storedError;return si(r,t)})}return si(r,t)}n(Ts,\"TransformStreamDefaultSinkWriteAlgorithm\");function Cs(e,t){const r=e._transformStreamController;if(r._finishPromise!==void 0)return r._finishPromise;const s=e._readable;r._finishPromise=E((c,d)=>{r._finishPromise_resolve=c,r._finishPromise_reject=d});const f=r._cancelAlgorithm(t);return lr(r),_(f,()=>(s._state===\"errored\"?rt(r,s._storedError):(oe(s._readableStreamController,t),pn(r)),null),c=>(oe(s._readableStreamController,c),rt(r,c),null)),r._finishPromise}n(Cs,\"TransformStreamDefaultSinkAbortAlgorithm\");function Ps(e){const t=e._transformStreamController;if(t._finishPromise!==void 0)return t._finishPromise;const r=e._readable;t._finishPromise=E((f,c)=>{t._finishPromise_resolve=f,t._finishPromise_reject=c});const s=t._flushAlgorithm();return lr(t),_(s,()=>(r._state===\"errored\"?rt(t,r._storedError):($e(r._readableStreamController),pn(t)),null),f=>(oe(r._readableStreamController,f),rt(t,f),null)),t._finishPromise}n(Ps,\"TransformStreamDefaultSinkCloseAlgorithm\");function vs(e){return ar(e,!1),e._backpressureChangePromise}n(vs,\"TransformStreamDefaultSourcePullAlgorithm\");function Es(e,t){const r=e._transformStreamController;if(r._finishPromise!==void 0)return r._finishPromise;const s=e._writable;r._finishPromise=E((c,d)=>{r._finishPromise_resolve=c,r._finishPromise_reject=d});const f=r._cancelAlgorithm(t);return lr(r),_(f,()=>(s._state===\"errored\"?rt(r,s._storedError):(wt(s._writableStreamController,t),hn(e),pn(r)),null),c=>(wt(s._writableStreamController,c),hn(e),rt(r,c),null)),r._finishPromise}n(Es,\"TransformStreamDefaultSourceCancelAlgorithm\");function ur(e){return new TypeError(`TransformStreamDefaultController.prototype.${e} can only be used on a TransformStreamDefaultController`)}n(ur,\"defaultControllerBrandCheckException\");function pn(e){e._finishPromise_resolve!==void 0&&(e._finishPromise_resolve(),e._finishPromise_resolve=void 0,e._finishPromise_reject=void 0)}n(pn,\"defaultControllerFinishPromiseResolve\");function rt(e,t){e._finishPromise_reject!==void 0&&(Q(e._finishPromise),e._finishPromise_reject(t),e._finishPromise_resolve=void 0,e._finishPromise_reject=void 0)}n(rt,\"defaultControllerFinishPromiseReject\");function li(e){return new TypeError(`TransformStream.prototype.${e} can only be used on a TransformStream`)}n(li,\"streamBrandCheckException\"),a.ByteLengthQueuingStrategy=Xe,a.CountQueuingStrategy=et,a.ReadableByteStreamController=te,a.ReadableStream=L,a.ReadableStreamBYOBReader=ce,a.ReadableStreamBYOBRequest=Re,a.ReadableStreamDefaultController=ne,a.ReadableStreamDefaultReader=fe,a.TransformStream=tt,a.TransformStreamDefaultController=pe,a.WritableStream=de,a.WritableStreamDefaultController=ke,a.WritableStreamDefaultWriter=re})}(pr,pr.exports)),pr.exports}n(Ls,\"requirePonyfill_es2018\");const $s=65536;if(!globalThis.ReadableStream)try{const i=require(\"node:process\"),{emitWarning:o}=i;try{i.emitWarning=()=>{},Object.assign(globalThis,require(\"node:stream/web\")),i.emitWarning=o}catch(a){throw i.emitWarning=o,a}}catch{Object.assign(globalThis,Ls())}try{const{Blob:i}=require(\"buffer\");i&&!i.prototype.stream&&(i.prototype.stream=n(function(a){let u=0;const l=this;return new ReadableStream({type:\"bytes\",async pull(p){const g=await l.slice(u,Math.min(l.size,u+$s)).arrayBuffer();u+=g.byteLength,p.enqueue(new Uint8Array(g)),u===l.size&&p.close()}})},\"name\"))}catch{}/*! fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */const hi=65536;async function*qn(i,o=!0){for(const a of i)if(\"stream\"in a)yield*a.stream();else if(ArrayBuffer.isView(a))if(o){let u=a.byteOffset;const l=a.byteOffset+a.byteLength;for(;u!==l;){const p=Math.min(l-u,hi),h=a.buffer.slice(u,u+p);u+=h.byteLength,yield new Uint8Array(h)}}else yield a;else{let u=0,l=a;for(;u!==l.size;){const h=await l.slice(u,Math.min(l.size,u+hi)).arrayBuffer();u+=h.byteLength,yield new Uint8Array(h)}}}n(qn,\"toIterator\");const pi=(Ve=class{constructor(o=[],a={}){be(this,ve,[]);be(this,kt,\"\");be(this,bt,0);be(this,Cr,\"transparent\");if(typeof o!=\"object\"||o===null)throw new TypeError(\"Failed to construct 'Blob': The provided value cannot be converted to a sequence.\");if(typeof o[Symbol.iterator]!=\"function\")throw new TypeError(\"Failed to construct 'Blob': The object must have a callable @@iterator property.\");if(typeof a!=\"object\"&&typeof a!=\"function\")throw new TypeError(\"Failed to construct 'Blob': parameter 2 cannot convert to dictionary.\");a===null&&(a={});const u=new TextEncoder;for(const p of o){let h;ArrayBuffer.isView(p)?h=new Uint8Array(p.buffer.slice(p.byteOffset,p.byteOffset+p.byteLength)):p instanceof ArrayBuffer?h=new Uint8Array(p.slice(0)):p instanceof Ve?h=p:h=u.encode(`${p}`),X(this,bt,O(this,bt)+(ArrayBuffer.isView(h)?h.byteLength:h.size)),O(this,ve).push(h)}X(this,Cr,`${a.endings===void 0?\"transparent\":a.endings}`);const l=a.type===void 0?\"\":String(a.type);X(this,kt,/^[\\x20-\\x7E]*$/.test(l)?l:\"\")}get size(){return O(this,bt)}get type(){return O(this,kt)}async text(){const o=new TextDecoder;let a=\"\";for await(const u of qn(O(this,ve),!1))a+=o.decode(u,{stream:!0});return a+=o.decode(),a}async arrayBuffer(){const o=new Uint8Array(this.size);let a=0;for await(const u of qn(O(this,ve),!1))o.set(u,a),a+=u.length;return o.buffer}stream(){const o=qn(O(this,ve),!0);return new globalThis.ReadableStream({type:\"bytes\",async pull(a){const u=await o.next();u.done?a.close():a.enqueue(u.value)},async cancel(){await o.return()}})}slice(o=0,a=this.size,u=\"\"){const{size:l}=this;let p=o<0?Math.max(l+o,0):Math.min(o,l),h=a<0?Math.max(l+a,0):Math.min(a,l);const g=Math.max(h-p,0),A=O(this,ve),w=[];let E=0;for(const b of A){if(E>=g)break;const q=ArrayBuffer.isView(b)?b.byteLength:b.size;if(p&&q<=p)p-=q,h-=q;else{let _;ArrayBuffer.isView(b)?(_=b.subarray(p,Math.min(q,h)),E+=_.byteLength):(_=b.slice(p,Math.min(q,h)),E+=_.size),h-=q,w.push(_),p=0}}const T=new Ve([],{type:String(u).toLowerCase()});return X(T,bt,g),X(T,ve,w),T}get[Symbol.toStringTag](){return\"Blob\"}static[Symbol.hasInstance](o){return o&&typeof o==\"object\"&&typeof o.constructor==\"function\"&&(typeof o.stream==\"function\"||typeof o.arrayBuffer==\"function\")&&/^(Blob|File)$/.test(o[Symbol.toStringTag])}},ve=new WeakMap,kt=new WeakMap,bt=new WeakMap,Cr=new WeakMap,n(Ve,\"Blob\"),Ve);Object.defineProperties(pi.prototype,{size:{enumerable:!0},type:{enumerable:!0},slice:{enumerable:!0}});const Ds=pi,ut=Ds,Ms=(Ot=class extends ut{constructor(a,u,l={}){if(arguments.length<2)throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`);super(a,l);be(this,Wt,0);be(this,qt,\"\");l===null&&(l={});const p=l.lastModified===void 0?Date.now():Number(l.lastModified);Number.isNaN(p)||X(this,Wt,p),X(this,qt,String(u))}get name(){return O(this,qt)}get lastModified(){return O(this,Wt)}get[Symbol.toStringTag](){return\"File\"}static[Symbol.hasInstance](a){return!!a&&a instanceof ut&&/^(File)$/.test(a[Symbol.toStringTag])}},Wt=new WeakMap,qt=new WeakMap,n(Ot,\"File\"),Ot),Us=Ms,On=Us;/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */var{toStringTag:Et,iterator:xs,hasInstance:Ns}=Symbol,bi=Math.random,Hs=\"append,set,get,getAll,delete,keys,values,entries,forEach,constructor\".split(\",\"),mi=n((i,o,a)=>(i+=\"\",/^(Blob|File)$/.test(o&&o[Et])?[(a=a!==void 0?a+\"\":o[Et]==\"File\"?o.name:\"blob\",i),o.name!==a||o[Et]==\"blob\"?new On([o],a,o):o]:[i,o+\"\"]),\"f\"),zn=n((i,o)=>(o?i:i.replace(/\\r?\\n|\\r/g,`\\r\n`)).replace(/\\n/g,\"%0A\").replace(/\\r/g,\"%0D\").replace(/\"/g,\"%22\"),\"e$1\"),Me=n((i,o,a)=>{if(o.length<a)throw new TypeError(`Failed to execute '${i}' on 'FormData': ${a} arguments required, but only ${o.length} present.`)},\"x\");const br=(zt=class{constructor(...o){be(this,ee,[]);if(o.length)throw new TypeError(\"Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.\")}get[Et](){return\"FormData\"}[xs](){return this.entries()}static[Ns](o){return o&&typeof o==\"object\"&&o[Et]===\"FormData\"&&!Hs.some(a=>typeof o[a]!=\"function\")}append(...o){Me(\"append\",arguments,2),O(this,ee).push(mi(...o))}delete(o){Me(\"delete\",arguments,1),o+=\"\",X(this,ee,O(this,ee).filter(([a])=>a!==o))}get(o){Me(\"get\",arguments,1),o+=\"\";for(var a=O(this,ee),u=a.length,l=0;l<u;l++)if(a[l][0]===o)return a[l][1];return null}getAll(o,a){return Me(\"getAll\",arguments,1),a=[],o+=\"\",O(this,ee).forEach(u=>u[0]===o&&a.push(u[1])),a}has(o){return Me(\"has\",arguments,1),o+=\"\",O(this,ee).some(a=>a[0]===o)}forEach(o,a){Me(\"forEach\",arguments,1);for(var[u,l]of this)o.call(a,l,u,this)}set(...o){Me(\"set\",arguments,2);var a=[],u=!0;o=mi(...o),O(this,ee).forEach(l=>{l[0]===o[0]?u&&(u=!a.push(o)):a.push(l)}),u&&a.push(o),X(this,ee,a)}*entries(){yield*O(this,ee)}*keys(){for(var[o]of this)yield o}*values(){for(var[,o]of this)yield o}},ee=new WeakMap,n(zt,\"FormData\"),zt);function Vs(i,o=ut){var a=`${bi()}${bi()}`.replace(/\\./g,\"\").slice(-28).padStart(32,\"-\"),u=[],l=`--${a}\\r\nContent-Disposition: form-data; name=\"`;return i.forEach((p,h)=>typeof p==\"string\"?u.push(l+zn(h)+`\"\\r\n\\r\n${p.replace(/\\r(?!\\n)|(?<!\\r)\\n/g,`\\r\n`)}\\r\n`):u.push(l+zn(h)+`\"; filename=\"${zn(p.name,1)}\"\\r\nContent-Type: ${p.type||\"application/octet-stream\"}\\r\n\\r\n`,p,`\\r\n`)),u.push(`--${a}--`),new o(u,{type:\"multipart/form-data; boundary=\"+a})}n(Vs,\"formDataToBlob\");const Un=class Un extends Error{constructor(o,a){super(o),Error.captureStackTrace(this,this.constructor),this.type=a}get name(){return this.constructor.name}get[Symbol.toStringTag](){return this.constructor.name}};n(Un,\"FetchBaseError\");let ft=Un;const xn=class xn extends ft{constructor(o,a,u){super(o,a),u&&(this.code=this.errno=u.code,this.erroredSysCall=u.syscall)}};n(xn,\"FetchError\");let G=xn;const mr=Symbol.toStringTag,yi=n(i=>typeof i==\"object\"&&typeof i.append==\"function\"&&typeof i.delete==\"function\"&&typeof i.get==\"function\"&&typeof i.getAll==\"function\"&&typeof i.has==\"function\"&&typeof i.set==\"function\"&&typeof i.sort==\"function\"&&i[mr]===\"URLSearchParams\",\"isURLSearchParameters\"),yr=n(i=>i&&typeof i==\"object\"&&typeof i.arrayBuffer==\"function\"&&typeof i.type==\"string\"&&typeof i.stream==\"function\"&&typeof i.constructor==\"function\"&&/^(Blob|File)$/.test(i[mr]),\"isBlob\"),Qs=n(i=>typeof i==\"object\"&&(i[mr]===\"AbortSignal\"||i[mr]===\"EventTarget\"),\"isAbortSignal\"),Ys=n((i,o)=>{const a=new URL(o).hostname,u=new URL(i).hostname;return a===u||a.endsWith(`.${u}`)},\"isDomainOrSubdomain\"),Gs=n((i,o)=>{const a=new URL(o).protocol,u=new URL(i).protocol;return a===u},\"isSameProtocol\"),Zs=(0,node_util__WEBPACK_IMPORTED_MODULE_5__.promisify)(node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline),H=Symbol(\"Body internals\"),Nn=class Nn{constructor(o,{size:a=0}={}){let u=null;o===null?o=null:yi(o)?o=node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(o.toString()):yr(o)||node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.isBuffer(o)||(node_util__WEBPACK_IMPORTED_MODULE_5__.types.isAnyArrayBuffer(o)?o=node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(o):ArrayBuffer.isView(o)?o=node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(o.buffer,o.byteOffset,o.byteLength):o instanceof node_stream__WEBPACK_IMPORTED_MODULE_3__||(o instanceof br?(o=Vs(o),u=o.type.split(\"=\")[1]):o=node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(String(o))));let l=o;node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.isBuffer(o)?l=node_stream__WEBPACK_IMPORTED_MODULE_3__.Readable.from(o):yr(o)&&(l=node_stream__WEBPACK_IMPORTED_MODULE_3__.Readable.from(o.stream())),this[H]={body:o,stream:l,boundary:u,disturbed:!1,error:null},this.size=a,o instanceof node_stream__WEBPACK_IMPORTED_MODULE_3__&&o.on(\"error\",p=>{const h=p instanceof ft?p:new G(`Invalid response body while trying to fetch ${this.url}: ${p.message}`,\"system\",p);this[H].error=h})}get body(){return this[H].stream}get bodyUsed(){return this[H].disturbed}async arrayBuffer(){const{buffer:o,byteOffset:a,byteLength:u}=await In(this);return o.slice(a,a+u)}async formData(){const o=this.headers.get(\"content-type\");if(o.startsWith(\"application/x-www-form-urlencoded\")){const u=new br,l=new URLSearchParams(await this.text());for(const[p,h]of l)u.append(p,h);return u}const{toFormData:a}=await __webpack_require__.e(/*! import() */ \"vendor-chunks/node-fetch-native-with-agent\").then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/multipart-parser.mjs */ \"(rsc)/./node_modules/node-fetch-native-with-agent/dist/chunks/multipart-parser.mjs\"));return a(this.body,o)}async blob(){const o=this.headers&&this.headers.get(\"content-type\")||this[H].body&&this[H].body.type||\"\",a=await this.arrayBuffer();return new ut([a],{type:o})}async json(){const o=await this.text();return JSON.parse(o)}async text(){const o=await In(this);return new TextDecoder().decode(o)}buffer(){return In(this)}};n(Nn,\"Body\");let Ue=Nn;Ue.prototype.buffer=(0,node_util__WEBPACK_IMPORTED_MODULE_5__.deprecate)(Ue.prototype.buffer,\"Please use 'response.arrayBuffer()' instead of 'response.buffer()'\",\"node-fetch#buffer\"),Object.defineProperties(Ue.prototype,{body:{enumerable:!0},bodyUsed:{enumerable:!0},arrayBuffer:{enumerable:!0},blob:{enumerable:!0},json:{enumerable:!0},text:{enumerable:!0},data:{get:(0,node_util__WEBPACK_IMPORTED_MODULE_5__.deprecate)(()=>{},\"data doesn't exist, use json(), text(), arrayBuffer(), or body instead\",\"https://github.com/node-fetch/node-fetch/issues/1000 (response)\")}});async function In(i){if(i[H].disturbed)throw new TypeError(`body used already for: ${i.url}`);if(i[H].disturbed=!0,i[H].error)throw i[H].error;const{body:o}=i;if(o===null)return node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.alloc(0);if(!(o instanceof node_stream__WEBPACK_IMPORTED_MODULE_3__))return node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.alloc(0);const a=[];let u=0;try{for await(const l of o){if(i.size>0&&u+l.length>i.size){const p=new G(`content size at ${i.url} over limit: ${i.size}`,\"max-size\");throw o.destroy(p),p}u+=l.length,a.push(l)}}catch(l){throw l instanceof ft?l:new G(`Invalid response body while trying to fetch ${i.url}: ${l.message}`,\"system\",l)}if(o.readableEnded===!0||o._readableState.ended===!0)try{return a.every(l=>typeof l==\"string\")?node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(a.join(\"\")):node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.concat(a,u)}catch(l){throw new G(`Could not create Buffer from response body for ${i.url}: ${l.message}`,\"system\",l)}else throw new G(`Premature close of server response while trying to fetch ${i.url}`)}n(In,\"consumeBody\");const Fn=n((i,o)=>{let a,u,{body:l}=i[H];if(i.bodyUsed)throw new Error(\"cannot clone body after it is used\");return l instanceof node_stream__WEBPACK_IMPORTED_MODULE_3__&&typeof l.getBoundary!=\"function\"&&(a=new node_stream__WEBPACK_IMPORTED_MODULE_3__.PassThrough({highWaterMark:o}),u=new node_stream__WEBPACK_IMPORTED_MODULE_3__.PassThrough({highWaterMark:o}),l.pipe(a),l.pipe(u),i[H].stream=a,l=u),l},\"clone\"),Ks=(0,node_util__WEBPACK_IMPORTED_MODULE_5__.deprecate)(i=>i.getBoundary(),\"form-data doesn't follow the spec and requires special treatment. Use alternative package\",\"https://github.com/node-fetch/node-fetch/issues/1167\"),gi=n((i,o)=>i===null?null:typeof i==\"string\"?\"text/plain;charset=UTF-8\":yi(i)?\"application/x-www-form-urlencoded;charset=UTF-8\":yr(i)?i.type||null:node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.isBuffer(i)||node_util__WEBPACK_IMPORTED_MODULE_5__.types.isAnyArrayBuffer(i)||ArrayBuffer.isView(i)?null:i instanceof br?`multipart/form-data; boundary=${o[H].boundary}`:i&&typeof i.getBoundary==\"function\"?`multipart/form-data;boundary=${Ks(i)}`:i instanceof node_stream__WEBPACK_IMPORTED_MODULE_3__?null:\"text/plain;charset=UTF-8\",\"extractContentType\"),Js=n(i=>{const{body:o}=i[H];return o===null?0:yr(o)?o.size:node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.isBuffer(o)?o.length:o&&typeof o.getLengthSync==\"function\"&&o.hasKnownLength&&o.hasKnownLength()?o.getLengthSync():null},\"getTotalBytes\"),Xs=n(async(i,{body:o})=>{o===null?i.end():await Zs(o,i)},\"writeToStream\"),gr=typeof node_http__WEBPACK_IMPORTED_MODULE_0__.validateHeaderName==\"function\"?node_http__WEBPACK_IMPORTED_MODULE_0__.validateHeaderName:i=>{if(!/^[\\^`\\-\\w!#$%&'*+.|~]+$/.test(i)){const o=new TypeError(`Header name must be a valid HTTP token [${i}]`);throw Object.defineProperty(o,\"code\",{value:\"ERR_INVALID_HTTP_TOKEN\"}),o}},jn=typeof node_http__WEBPACK_IMPORTED_MODULE_0__.validateHeaderValue==\"function\"?node_http__WEBPACK_IMPORTED_MODULE_0__.validateHeaderValue:(i,o)=>{if(/[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/.test(o)){const a=new TypeError(`Invalid character in header content [\"${i}\"]`);throw Object.defineProperty(a,\"code\",{value:\"ERR_INVALID_CHAR\"}),a}},Pr=class Pr extends URLSearchParams{constructor(o){let a=[];if(o instanceof Pr){const u=o.raw();for(const[l,p]of Object.entries(u))a.push(...p.map(h=>[l,h]))}else if(o!=null)if(typeof o==\"object\"&&!node_util__WEBPACK_IMPORTED_MODULE_5__.types.isBoxedPrimitive(o)){const u=o[Symbol.iterator];if(u==null)a.push(...Object.entries(o));else{if(typeof u!=\"function\")throw new TypeError(\"Header pairs must be iterable\");a=[...o].map(l=>{if(typeof l!=\"object\"||node_util__WEBPACK_IMPORTED_MODULE_5__.types.isBoxedPrimitive(l))throw new TypeError(\"Each header pair must be an iterable object\");return[...l]}).map(l=>{if(l.length!==2)throw new TypeError(\"Each header pair must be a name/value tuple\");return[...l]})}}else throw new TypeError(\"Failed to construct 'Headers': The provided value is not of type '(sequence<sequence<ByteString>> or record<ByteString, ByteString>)\");return a=a.length>0?a.map(([u,l])=>(gr(u),jn(u,String(l)),[String(u).toLowerCase(),String(l)])):void 0,super(a),new Proxy(this,{get(u,l,p){switch(l){case\"append\":case\"set\":return(h,g)=>(gr(h),jn(h,String(g)),URLSearchParams.prototype[l].call(u,String(h).toLowerCase(),String(g)));case\"delete\":case\"has\":case\"getAll\":return h=>(gr(h),URLSearchParams.prototype[l].call(u,String(h).toLowerCase()));case\"keys\":return()=>(u.sort(),new Set(URLSearchParams.prototype.keys.call(u)).keys());default:return Reflect.get(u,l,p)}}})}get[Symbol.toStringTag](){return this.constructor.name}toString(){return Object.prototype.toString.call(this)}get(o){const a=this.getAll(o);if(a.length===0)return null;let u=a.join(\", \");return/^content-encoding$/i.test(o)&&(u=u.toLowerCase()),u}forEach(o,a=void 0){for(const u of this.keys())Reflect.apply(o,a,[this.get(u),u,this])}*values(){for(const o of this.keys())yield this.get(o)}*entries(){for(const o of this.keys())yield[o,this.get(o)]}[Symbol.iterator](){return this.entries()}raw(){return[...this.keys()].reduce((o,a)=>(o[a]=this.getAll(a),o),{})}[Symbol.for(\"nodejs.util.inspect.custom\")](){return[...this.keys()].reduce((o,a)=>{const u=this.getAll(a);return a===\"host\"?o[a]=u[0]:o[a]=u.length>1?u:u[0],o},{})}};n(Pr,\"Headers\");let ye=Pr;Object.defineProperties(ye.prototype,[\"get\",\"entries\",\"forEach\",\"values\"].reduce((i,o)=>(i[o]={enumerable:!0},i),{}));function el(i=[]){return new ye(i.reduce((o,a,u,l)=>(u%2===0&&o.push(l.slice(u,u+2)),o),[]).filter(([o,a])=>{try{return gr(o),jn(o,String(a)),!0}catch{return!1}}))}n(el,\"fromRawHeaders\");const tl=new Set([301,302,303,307,308]),Ln=n(i=>tl.has(i),\"isRedirect\"),se=Symbol(\"Response internals\"),xe=class xe extends Ue{constructor(o=null,a={}){super(o,a);const u=a.status!=null?a.status:200,l=new ye(a.headers);if(o!==null&&!l.has(\"Content-Type\")){const p=gi(o,this);p&&l.append(\"Content-Type\",p)}this[se]={type:\"default\",url:a.url,status:u,statusText:a.statusText||\"\",headers:l,counter:a.counter,highWaterMark:a.highWaterMark}}get type(){return this[se].type}get url(){return this[se].url||\"\"}get status(){return this[se].status}get ok(){return this[se].status>=200&&this[se].status<300}get redirected(){return this[se].counter>0}get statusText(){return this[se].statusText}get headers(){return this[se].headers}get highWaterMark(){return this[se].highWaterMark}clone(){return new xe(Fn(this,this.highWaterMark),{type:this.type,url:this.url,status:this.status,statusText:this.statusText,headers:this.headers,ok:this.ok,redirected:this.redirected,size:this.size,highWaterMark:this.highWaterMark})}static redirect(o,a=302){if(!Ln(a))throw new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');return new xe(null,{headers:{location:new URL(o).toString()},status:a})}static error(){const o=new xe(null,{status:0,statusText:\"\"});return o[se].type=\"error\",o}static json(o=void 0,a={}){const u=JSON.stringify(o);if(u===void 0)throw new TypeError(\"data is not JSON serializable\");const l=new ye(a&&a.headers);return l.has(\"content-type\")||l.set(\"content-type\",\"application/json\"),new xe(u,{...a,headers:l})}get[Symbol.toStringTag](){return\"Response\"}};n(xe,\"Response\");let le=xe;Object.defineProperties(le.prototype,{type:{enumerable:!0},url:{enumerable:!0},status:{enumerable:!0},ok:{enumerable:!0},redirected:{enumerable:!0},statusText:{enumerable:!0},headers:{enumerable:!0},clone:{enumerable:!0}});const rl=n(i=>{if(i.search)return i.search;const o=i.href.length-1,a=i.hash||(i.href[o]===\"#\"?\"#\":\"\");return i.href[o-a.length]===\"?\"?\"?\":\"\"},\"getSearch\");function _i(i,o=!1){return i==null||(i=new URL(i),/^(about|blob|data):$/.test(i.protocol))?\"no-referrer\":(i.username=\"\",i.password=\"\",i.hash=\"\",o&&(i.pathname=\"\",i.search=\"\"),i)}n(_i,\"stripURLForUseAsAReferrer\");const Si=new Set([\"\",\"no-referrer\",\"no-referrer-when-downgrade\",\"same-origin\",\"origin\",\"strict-origin\",\"origin-when-cross-origin\",\"strict-origin-when-cross-origin\",\"unsafe-url\"]),nl=\"strict-origin-when-cross-origin\";function ol(i){if(!Si.has(i))throw new TypeError(`Invalid referrerPolicy: ${i}`);return i}n(ol,\"validateReferrerPolicy\");function il(i){if(/^(http|ws)s:$/.test(i.protocol))return!0;const o=i.host.replace(/(^\\[)|(]$)/g,\"\"),a=(0,node_net__WEBPACK_IMPORTED_MODULE_8__.isIP)(o);return a===4&&/^127\\./.test(o)||a===6&&/^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(o)?!0:i.host===\"localhost\"||i.host.endsWith(\".localhost\")?!1:i.protocol===\"file:\"}n(il,\"isOriginPotentiallyTrustworthy\");function ct(i){return/^about:(blank|srcdoc)$/.test(i)||i.protocol===\"data:\"||/^(blob|filesystem):$/.test(i.protocol)?!0:il(i)}n(ct,\"isUrlPotentiallyTrustworthy\");function al(i,{referrerURLCallback:o,referrerOriginCallback:a}={}){if(i.referrer===\"no-referrer\"||i.referrerPolicy===\"\")return null;const u=i.referrerPolicy;if(i.referrer===\"about:client\")return\"no-referrer\";const l=i.referrer;let p=_i(l),h=_i(l,!0);p.toString().length>4096&&(p=h),o&&(p=o(p)),a&&(h=a(h));const g=new URL(i.url);switch(u){case\"no-referrer\":return\"no-referrer\";case\"origin\":return h;case\"unsafe-url\":return p;case\"strict-origin\":return ct(p)&&!ct(g)?\"no-referrer\":h.toString();case\"strict-origin-when-cross-origin\":return p.origin===g.origin?p:ct(p)&&!ct(g)?\"no-referrer\":h;case\"same-origin\":return p.origin===g.origin?p:\"no-referrer\";case\"origin-when-cross-origin\":return p.origin===g.origin?p:h;case\"no-referrer-when-downgrade\":return ct(p)&&!ct(g)?\"no-referrer\":p;default:throw new TypeError(`Invalid referrerPolicy: ${u}`)}}n(al,\"determineRequestsReferrer\");function sl(i){const o=(i.get(\"referrer-policy\")||\"\").split(/[,\\s]+/);let a=\"\";for(const u of o)u&&Si.has(u)&&(a=u);return a}n(sl,\"parseReferrerPolicyFromHeader\");const $=Symbol(\"Request internals\"),At=n(i=>typeof i==\"object\"&&typeof i[$]==\"object\",\"isRequest\"),ll=(0,node_util__WEBPACK_IMPORTED_MODULE_5__.deprecate)(()=>{},\".data is not a valid RequestInit property, use .body instead\",\"https://github.com/node-fetch/node-fetch/issues/1000 (request)\"),vr=class vr extends Ue{constructor(o,a={}){let u;if(At(o)?u=new URL(o.url):(u=new URL(o),o={}),u.username!==\"\"||u.password!==\"\")throw new TypeError(`${u} is an url with embedded credentials.`);let l=a.method||o.method||\"GET\";if(/^(delete|get|head|options|post|put)$/i.test(l)&&(l=l.toUpperCase()),!At(a)&&\"data\"in a&&ll(),(a.body!=null||At(o)&&o.body!==null)&&(l===\"GET\"||l===\"HEAD\"))throw new TypeError(\"Request with GET/HEAD method cannot have body\");const p=a.body?a.body:At(o)&&o.body!==null?Fn(o):null;super(p,{size:a.size||o.size||0});const h=new ye(a.headers||o.headers||{});if(p!==null&&!h.has(\"Content-Type\")){const w=gi(p,this);w&&h.set(\"Content-Type\",w)}let g=At(o)?o.signal:null;if(\"signal\"in a&&(g=a.signal),g!=null&&!Qs(g))throw new TypeError(\"Expected signal to be an instanceof AbortSignal or EventTarget\");let A=a.referrer==null?o.referrer:a.referrer;if(A===\"\")A=\"no-referrer\";else if(A){const w=new URL(A);A=/^about:(\\/\\/)?client$/.test(w)?\"client\":w}else A=void 0;this[$]={method:l,redirect:a.redirect||o.redirect||\"follow\",headers:h,parsedURL:u,signal:g,referrer:A},this.follow=a.follow===void 0?o.follow===void 0?20:o.follow:a.follow,this.compress=a.compress===void 0?o.compress===void 0?!0:o.compress:a.compress,this.counter=a.counter||o.counter||0,this.agent=a.agent||o.agent,this.highWaterMark=a.highWaterMark||o.highWaterMark||16384,this.insecureHTTPParser=a.insecureHTTPParser||o.insecureHTTPParser||!1,this.referrerPolicy=a.referrerPolicy||o.referrerPolicy||\"\"}get method(){return this[$].method}get url(){return (0,node_url__WEBPACK_IMPORTED_MODULE_7__.format)(this[$].parsedURL)}get headers(){return this[$].headers}get redirect(){return this[$].redirect}get signal(){return this[$].signal}get referrer(){if(this[$].referrer===\"no-referrer\")return\"\";if(this[$].referrer===\"client\")return\"about:client\";if(this[$].referrer)return this[$].referrer.toString()}get referrerPolicy(){return this[$].referrerPolicy}set referrerPolicy(o){this[$].referrerPolicy=ol(o)}clone(){return new vr(this)}get[Symbol.toStringTag](){return\"Request\"}};n(vr,\"Request\");let dt=vr;Object.defineProperties(dt.prototype,{method:{enumerable:!0},url:{enumerable:!0},headers:{enumerable:!0},redirect:{enumerable:!0},clone:{enumerable:!0},signal:{enumerable:!0},referrer:{enumerable:!0},referrerPolicy:{enumerable:!0}});const ul=n(i=>{const{parsedURL:o}=i[$],a=new ye(i[$].headers);a.has(\"Accept\")||a.set(\"Accept\",\"*/*\");let u=null;if(i.body===null&&/^(post|put)$/i.test(i.method)&&(u=\"0\"),i.body!==null){const g=Js(i);typeof g==\"number\"&&!Number.isNaN(g)&&(u=String(g))}u&&a.set(\"Content-Length\",u),i.referrerPolicy===\"\"&&(i.referrerPolicy=nl),i.referrer&&i.referrer!==\"no-referrer\"?i[$].referrer=al(i):i[$].referrer=\"no-referrer\",i[$].referrer instanceof URL&&a.set(\"Referer\",i.referrer),a.has(\"User-Agent\")||a.set(\"User-Agent\",\"node-fetch\"),i.compress&&!a.has(\"Accept-Encoding\")&&a.set(\"Accept-Encoding\",\"gzip, deflate, br\");let{agent:l}=i;typeof l==\"function\"&&(l=l(o));const p=rl(o),h={path:o.pathname+p,method:i.method,headers:a[Symbol.for(\"nodejs.util.inspect.custom\")](),insecureHTTPParser:i.insecureHTTPParser,agent:l};return{parsedURL:o,options:h}},\"getNodeRequestOptions\"),Hn=class Hn extends ft{constructor(o,a=\"aborted\"){super(o,a)}};n(Hn,\"AbortError\");let _r=Hn;/*! node-domexception. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */if(!globalThis.DOMException)try{const{MessageChannel:i}=require(\"worker_threads\"),o=new i().port1,a=new ArrayBuffer;o.postMessage(a,[a,a])}catch(i){i.constructor.name===\"DOMException\"&&(globalThis.DOMException=i.constructor)}var fl=globalThis.DOMException;const cl=(0,_shared_node_fetch_native_with_agent_1a4a356d_mjs__WEBPACK_IMPORTED_MODULE_6__.g)(fl),{stat:$n}=node_fs__WEBPACK_IMPORTED_MODULE_9__.promises,dl=n((i,o)=>wi((0,node_fs__WEBPACK_IMPORTED_MODULE_9__.statSync)(i),i,o),\"blobFromSync\"),hl=n((i,o)=>$n(i).then(a=>wi(a,i,o)),\"blobFrom\"),pl=n((i,o)=>$n(i).then(a=>Ri(a,i,o)),\"fileFrom\"),bl=n((i,o)=>Ri((0,node_fs__WEBPACK_IMPORTED_MODULE_9__.statSync)(i),i,o),\"fileFromSync\"),wi=n((i,o,a=\"\")=>new ut([new Sr({path:o,size:i.size,lastModified:i.mtimeMs,start:0})],{type:a}),\"fromBlob\"),Ri=n((i,o,a=\"\")=>new On([new Sr({path:o,size:i.size,lastModified:i.mtimeMs,start:0})],(0,node_path__WEBPACK_IMPORTED_MODULE_10__.basename)(o),{type:a,lastModified:i.mtimeMs}),\"fromFile\"),Er=class Er{constructor(o){be(this,Ne,void 0);be(this,He,void 0);X(this,Ne,o.path),X(this,He,o.start),this.size=o.size,this.lastModified=o.lastModified}slice(o,a){return new Er({path:O(this,Ne),lastModified:this.lastModified,size:a-o,start:O(this,He)+o})}async*stream(){const{mtimeMs:o}=await $n(O(this,Ne));if(o>this.lastModified)throw new cl(\"The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.\",\"NotReadableError\");yield*(0,node_fs__WEBPACK_IMPORTED_MODULE_9__.createReadStream)(O(this,Ne),{start:O(this,He),end:O(this,He)+this.size-1})}get[Symbol.toStringTag](){return\"Blob\"}};Ne=new WeakMap,He=new WeakMap,n(Er,\"BlobDataItem\");let Sr=Er;const ml=new Set([\"data:\",\"http:\",\"https:\"]);async function Ti(i,o){return new Promise((a,u)=>{const l=new dt(i,o),{parsedURL:p,options:h}=ul(l);if(!ml.has(p.protocol))throw new TypeError(`node-fetch cannot load ${i}. URL scheme \"${p.protocol.replace(/:$/,\"\")}\" is not supported.`);if(p.protocol===\"data:\"){const _=js(l.url),V=new le(_,{headers:{\"Content-Type\":_.typeFull}});a(V);return}const g=(p.protocol===\"https:\"?node_https__WEBPACK_IMPORTED_MODULE_1__:node_http__WEBPACK_IMPORTED_MODULE_0__).request,{signal:A}=l;let w=null;const E=n(()=>{const _=new _r(\"The operation was aborted.\");u(_),l.body&&l.body instanceof node_stream__WEBPACK_IMPORTED_MODULE_3__.Readable&&l.body.destroy(_),!(!w||!w.body)&&w.body.emit(\"error\",_)},\"abort\");if(A&&A.aborted){E();return}const T=n(()=>{E(),q()},\"abortAndFinalize\"),b=g(p.toString(),h);A&&A.addEventListener(\"abort\",T);const q=n(()=>{b.abort(),A&&A.removeEventListener(\"abort\",T)},\"finalize\");b.on(\"error\",_=>{u(new G(`request to ${l.url} failed, reason: ${_.message}`,\"system\",_)),q()}),yl(b,_=>{w&&w.body&&w.body.destroy(_)}),process.version<\"v14\"&&b.on(\"socket\",_=>{let V;_.prependListener(\"end\",()=>{V=_._eventsCount}),_.prependListener(\"close\",I=>{if(w&&V<_._eventsCount&&!I){const F=new Error(\"Premature close\");F.code=\"ERR_STREAM_PREMATURE_CLOSE\",w.body.emit(\"error\",F)}})}),b.on(\"response\",_=>{b.setTimeout(0);const V=el(_.rawHeaders);if(Ln(_.statusCode)){const z=V.get(\"Location\");let j=null;try{j=z===null?null:new URL(z,l.url)}catch{if(l.redirect!==\"manual\"){u(new G(`uri requested responds with an invalid redirect URL: ${z}`,\"invalid-redirect\")),q();return}}switch(l.redirect){case\"error\":u(new G(`uri requested responds with a redirect, redirect mode is set to error: ${l.url}`,\"no-redirect\")),q();return;case\"manual\":break;case\"follow\":{if(j===null)break;if(l.counter>=l.follow){u(new G(`maximum redirect reached at: ${l.url}`,\"max-redirect\")),q();return}const U={headers:new ye(l.headers),follow:l.follow,counter:l.counter+1,agent:l.agent,compress:l.compress,method:l.method,body:Fn(l),signal:l.signal,size:l.size,referrer:l.referrer,referrerPolicy:l.referrerPolicy};if(!Ys(l.url,j)||!Gs(l.url,j))for(const Ft of[\"authorization\",\"www-authenticate\",\"cookie\",\"cookie2\"])U.headers.delete(Ft);if(_.statusCode!==303&&l.body&&o.body instanceof node_stream__WEBPACK_IMPORTED_MODULE_3__.Readable){u(new G(\"Cannot follow redirect with body being a readable stream\",\"unsupported-redirect\")),q();return}(_.statusCode===303||(_.statusCode===301||_.statusCode===302)&&l.method===\"POST\")&&(U.method=\"GET\",U.body=void 0,U.headers.delete(\"content-length\"));const D=sl(V);D&&(U.referrerPolicy=D),a(Ti(new dt(j,U))),q();return}default:return u(new TypeError(`Redirect option '${l.redirect}' is not a valid value of RequestRedirect`))}}A&&_.once(\"end\",()=>{A.removeEventListener(\"abort\",T)});let I=(0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(_,new node_stream__WEBPACK_IMPORTED_MODULE_3__.PassThrough,z=>{z&&u(z)});process.version<\"v12.10\"&&_.on(\"aborted\",T);const F={url:l.url,status:_.statusCode,statusText:_.statusMessage,headers:V,size:l.size,counter:l.counter,highWaterMark:l.highWaterMark},Q=V.get(\"Content-Encoding\");if(!l.compress||l.method===\"HEAD\"||Q===null||_.statusCode===204||_.statusCode===304){w=new le(I,F),a(w);return}const ge={flush:node_zlib__WEBPACK_IMPORTED_MODULE_2__.Z_SYNC_FLUSH,finishFlush:node_zlib__WEBPACK_IMPORTED_MODULE_2__.Z_SYNC_FLUSH};if(Q===\"gzip\"||Q===\"x-gzip\"){I=(0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(I,node_zlib__WEBPACK_IMPORTED_MODULE_2__.createGunzip(ge),z=>{z&&u(z)}),w=new le(I,F),a(w);return}if(Q===\"deflate\"||Q===\"x-deflate\"){const z=(0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(_,new node_stream__WEBPACK_IMPORTED_MODULE_3__.PassThrough,j=>{j&&u(j)});z.once(\"data\",j=>{(j[0]&15)===8?I=(0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(I,node_zlib__WEBPACK_IMPORTED_MODULE_2__.createInflate(),U=>{U&&u(U)}):I=(0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(I,node_zlib__WEBPACK_IMPORTED_MODULE_2__.createInflateRaw(),U=>{U&&u(U)}),w=new le(I,F),a(w)}),z.once(\"end\",()=>{w||(w=new le(I,F),a(w))});return}if(Q===\"br\"){I=(0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(I,node_zlib__WEBPACK_IMPORTED_MODULE_2__.createBrotliDecompress(),z=>{z&&u(z)}),w=new le(I,F),a(w);return}w=new le(I,F),a(w)}),Xs(b,l).catch(u)})}n(Ti,\"fetch$1\");function yl(i,o){const a=node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(`0\\r\n\\r\n`);let u=!1,l=!1,p;i.on(\"response\",h=>{const{headers:g}=h;u=g[\"transfer-encoding\"]===\"chunked\"&&!g[\"content-length\"]}),i.on(\"socket\",h=>{const g=n(()=>{if(u&&!l){const w=new Error(\"Premature close\");w.code=\"ERR_STREAM_PREMATURE_CLOSE\",o(w)}},\"onSocketClose\"),A=n(w=>{l=node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.compare(w.slice(-5),a)===0,!l&&p&&(l=node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.compare(p.slice(-3),a.slice(0,3))===0&&node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.compare(w.slice(-2),a.slice(3))===0),p=w},\"onData\");h.prependListener(\"close\",g),h.on(\"data\",A),i.on(\"close\",()=>{h.removeListener(\"close\",g),h.removeListener(\"data\",A)})})}n(yl,\"fixResponseChunkedTransferBadEnding\");const Ci=new WeakMap,Dn=new WeakMap;function W(i){const o=Ci.get(i);return console.assert(o!=null,\"'this' is expected an Event object, but got\",i),o}n(W,\"pd\");function Pi(i){if(i.passiveListener!=null){typeof console<\"u\"&&typeof console.error==\"function\"&&console.error(\"Unable to preventDefault inside passive event listener invocation.\",i.passiveListener);return}i.event.cancelable&&(i.canceled=!0,typeof i.event.preventDefault==\"function\"&&i.event.preventDefault())}n(Pi,\"setCancelFlag\");function ht(i,o){Ci.set(this,{eventTarget:i,event:o,eventPhase:2,currentTarget:i,canceled:!1,stopped:!1,immediateStopped:!1,passiveListener:null,timeStamp:o.timeStamp||Date.now()}),Object.defineProperty(this,\"isTrusted\",{value:!1,enumerable:!0});const a=Object.keys(o);for(let u=0;u<a.length;++u){const l=a[u];l in this||Object.defineProperty(this,l,vi(l))}}n(ht,\"Event\"),ht.prototype={get type(){return W(this).event.type},get target(){return W(this).eventTarget},get currentTarget(){return W(this).currentTarget},composedPath(){const i=W(this).currentTarget;return i==null?[]:[i]},get NONE(){return 0},get CAPTURING_PHASE(){return 1},get AT_TARGET(){return 2},get BUBBLING_PHASE(){return 3},get eventPhase(){return W(this).eventPhase},stopPropagation(){const i=W(this);i.stopped=!0,typeof i.event.stopPropagation==\"function\"&&i.event.stopPropagation()},stopImmediatePropagation(){const i=W(this);i.stopped=!0,i.immediateStopped=!0,typeof i.event.stopImmediatePropagation==\"function\"&&i.event.stopImmediatePropagation()},get bubbles(){return!!W(this).event.bubbles},get cancelable(){return!!W(this).event.cancelable},preventDefault(){Pi(W(this))},get defaultPrevented(){return W(this).canceled},get composed(){return!!W(this).event.composed},get timeStamp(){return W(this).timeStamp},get srcElement(){return W(this).eventTarget},get cancelBubble(){return W(this).stopped},set cancelBubble(i){if(!i)return;const o=W(this);o.stopped=!0,typeof o.event.cancelBubble==\"boolean\"&&(o.event.cancelBubble=!0)},get returnValue(){return!W(this).canceled},set returnValue(i){i||Pi(W(this))},initEvent(){}},Object.defineProperty(ht.prototype,\"constructor\",{value:ht,configurable:!0,writable:!0}),typeof window<\"u\"&&typeof window.Event<\"u\"&&(Object.setPrototypeOf(ht.prototype,window.Event.prototype),Dn.set(window.Event.prototype,ht));function vi(i){return{get(){return W(this).event[i]},set(o){W(this).event[i]=o},configurable:!0,enumerable:!0}}n(vi,\"defineRedirectDescriptor\");function gl(i){return{value(){const o=W(this).event;return o[i].apply(o,arguments)},configurable:!0,enumerable:!0}}n(gl,\"defineCallDescriptor\");function _l(i,o){const a=Object.keys(o);if(a.length===0)return i;function u(l,p){i.call(this,l,p)}n(u,\"CustomEvent\"),u.prototype=Object.create(i.prototype,{constructor:{value:u,configurable:!0,writable:!0}});for(let l=0;l<a.length;++l){const p=a[l];if(!(p in i.prototype)){const g=typeof Object.getOwnPropertyDescriptor(o,p).value==\"function\";Object.defineProperty(u.prototype,p,g?gl(p):vi(p))}}return u}n(_l,\"defineWrapper\");function Ei(i){if(i==null||i===Object.prototype)return ht;let o=Dn.get(i);return o==null&&(o=_l(Ei(Object.getPrototypeOf(i)),i),Dn.set(i,o)),o}n(Ei,\"getWrapper\");function Sl(i,o){const a=Ei(Object.getPrototypeOf(o));return new a(i,o)}n(Sl,\"wrapEvent\");function wl(i){return W(i).immediateStopped}n(wl,\"isStopped\");function Rl(i,o){W(i).eventPhase=o}n(Rl,\"setEventPhase\");function Tl(i,o){W(i).currentTarget=o}n(Tl,\"setCurrentTarget\");function Ai(i,o){W(i).passiveListener=o}n(Ai,\"setPassiveListener\");const Bi=new WeakMap,ki=1,Wi=2,wr=3;function Rr(i){return i!==null&&typeof i==\"object\"}n(Rr,\"isObject\");function Bt(i){const o=Bi.get(i);if(o==null)throw new TypeError(\"'this' is expected an EventTarget object, but got another value.\");return o}n(Bt,\"getListeners\");function Cl(i){return{get(){let a=Bt(this).get(i);for(;a!=null;){if(a.listenerType===wr)return a.listener;a=a.next}return null},set(o){typeof o!=\"function\"&&!Rr(o)&&(o=null);const a=Bt(this);let u=null,l=a.get(i);for(;l!=null;)l.listenerType===wr?u!==null?u.next=l.next:l.next!==null?a.set(i,l.next):a.delete(i):u=l,l=l.next;if(o!==null){const p={listener:o,listenerType:wr,passive:!1,once:!1,next:null};u===null?a.set(i,p):u.next=p}},configurable:!0,enumerable:!0}}n(Cl,\"defineEventAttributeDescriptor\");function qi(i,o){Object.defineProperty(i,`on${o}`,Cl(o))}n(qi,\"defineEventAttribute\");function Oi(i){function o(){Pe.call(this)}n(o,\"CustomEventTarget\"),o.prototype=Object.create(Pe.prototype,{constructor:{value:o,configurable:!0,writable:!0}});for(let a=0;a<i.length;++a)qi(o.prototype,i[a]);return o}n(Oi,\"defineCustomEventTarget\");function Pe(){if(this instanceof Pe){Bi.set(this,new Map);return}if(arguments.length===1&&Array.isArray(arguments[0]))return Oi(arguments[0]);if(arguments.length>0){const i=new Array(arguments.length);for(let o=0;o<arguments.length;++o)i[o]=arguments[o];return Oi(i)}throw new TypeError(\"Cannot call a class as a function\")}n(Pe,\"EventTarget\"),Pe.prototype={addEventListener(i,o,a){if(o==null)return;if(typeof o!=\"function\"&&!Rr(o))throw new TypeError(\"'listener' should be a function or an object.\");const u=Bt(this),l=Rr(a),h=(l?!!a.capture:!!a)?ki:Wi,g={listener:o,listenerType:h,passive:l&&!!a.passive,once:l&&!!a.once,next:null};let A=u.get(i);if(A===void 0){u.set(i,g);return}let w=null;for(;A!=null;){if(A.listener===o&&A.listenerType===h)return;w=A,A=A.next}w.next=g},removeEventListener(i,o,a){if(o==null)return;const u=Bt(this),p=(Rr(a)?!!a.capture:!!a)?ki:Wi;let h=null,g=u.get(i);for(;g!=null;){if(g.listener===o&&g.listenerType===p){h!==null?h.next=g.next:g.next!==null?u.set(i,g.next):u.delete(i);return}h=g,g=g.next}},dispatchEvent(i){if(i==null||typeof i.type!=\"string\")throw new TypeError('\"event.type\" should be a string.');const o=Bt(this),a=i.type;let u=o.get(a);if(u==null)return!0;const l=Sl(this,i);let p=null;for(;u!=null;){if(u.once?p!==null?p.next=u.next:u.next!==null?o.set(a,u.next):o.delete(a):p=u,Ai(l,u.passive?u.listener:null),typeof u.listener==\"function\")try{u.listener.call(this,l)}catch(h){typeof console<\"u\"&&typeof console.error==\"function\"&&console.error(h)}else u.listenerType!==wr&&typeof u.listener.handleEvent==\"function\"&&u.listener.handleEvent(l);if(wl(l))break;u=u.next}return Ai(l,null),Rl(l,0),Tl(l,null),!l.defaultPrevented}},Object.defineProperty(Pe.prototype,\"constructor\",{value:Pe,configurable:!0,writable:!0}),typeof window<\"u\"&&typeof window.EventTarget<\"u\"&&Object.setPrototypeOf(Pe.prototype,window.EventTarget.prototype);const Vn=class Vn extends Pe{constructor(){throw super(),new TypeError(\"AbortSignal cannot be constructed directly\")}get aborted(){const o=Tr.get(this);if(typeof o!=\"boolean\")throw new TypeError(`Expected 'this' to be an 'AbortSignal' object, but got ${this===null?\"null\":typeof this}`);return o}};n(Vn,\"AbortSignal\");let pt=Vn;qi(pt.prototype,\"abort\");function Pl(){const i=Object.create(pt.prototype);return Pe.call(i),Tr.set(i,!1),i}n(Pl,\"createAbortSignal\");function vl(i){Tr.get(i)===!1&&(Tr.set(i,!0),i.dispatchEvent({type:\"abort\"}))}n(vl,\"abortSignal\");const Tr=new WeakMap;Object.defineProperties(pt.prototype,{aborted:{enumerable:!0}}),typeof Symbol==\"function\"&&typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(pt.prototype,Symbol.toStringTag,{configurable:!0,value:\"AbortSignal\"});let Mn=(It=class{constructor(){zi.set(this,Pl())}get signal(){return Ii(this)}abort(){vl(Ii(this))}},n(It,\"AbortController\"),It);const zi=new WeakMap;function Ii(i){const o=zi.get(i);if(o==null)throw new TypeError(`Expected 'this' to be an 'AbortController' object, but got ${i===null?\"null\":typeof i}`);return o}n(Ii,\"getSignal\"),Object.defineProperties(Mn.prototype,{signal:{enumerable:!0},abort:{enumerable:!0}}),typeof Symbol==\"function\"&&typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(Mn.prototype,Symbol.toStringTag,{configurable:!0,value:\"AbortController\"});var El=Object.defineProperty,Al=n((i,o)=>El(i,\"name\",{value:o,configurable:!0}),\"e\");const Fi=Ti;ji();function ji(){!globalThis.process?.versions?.node&&!globalThis.process?.env.DISABLE_NODE_FETCH_NATIVE_WARN&&console.warn(\"[node-fetch-native] Node.js compatible build of `node-fetch-native` is being used in a non-Node.js environment. Please make sure you are using proper export conditions or report this issue to https://github.com/unjs/node-fetch-native. You can set `process.env.DISABLE_NODE_FETCH_NATIVE_WARN` to disable this warning.\")}n(ji,\"s\"),Al(ji,\"checkNodeEnvironment\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native-with-agent/dist/node.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch-native-with-agent/dist/shared/node-fetch-native-with-agent.1a4a356d.mjs":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/node-fetch-native-with-agent/dist/shared/node-fetch-native-with-agent.1a4a356d.mjs ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ n),\n/* harmony export */   g: () => (/* binding */ f)\n/* harmony export */ });\nvar t=Object.defineProperty;var o=(e,l)=>t(e,\"name\",{value:l,configurable:!0});var n=typeof globalThis<\"u\"?globalThis:typeof window<\"u\"?window:typeof global<\"u\"?global:typeof self<\"u\"?self:{};function f(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,\"default\")?e.default:e}o(f,\"getDefaultExportFromCjs\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC1uYXRpdmUtd2l0aC1hZ2VudC9kaXN0L3NoYXJlZC9ub2RlLWZldGNoLW5hdGl2ZS13aXRoLWFnZW50LjFhNGEzNTZkLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLDRCQUE0Qix5QkFBeUIsd0JBQXdCLEVBQUUsaUhBQWlILGNBQWMsc0ZBQXNGLCtCQUFxRCIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9ub2RlLWZldGNoLW5hdGl2ZS13aXRoLWFnZW50L2Rpc3Qvc2hhcmVkL25vZGUtZmV0Y2gtbmF0aXZlLXdpdGgtYWdlbnQuMWE0YTM1NmQubWpzP2U5NTYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHQ9T2JqZWN0LmRlZmluZVByb3BlcnR5O3ZhciBvPShlLGwpPT50KGUsXCJuYW1lXCIse3ZhbHVlOmwsY29uZmlndXJhYmxlOiEwfSk7dmFyIG49dHlwZW9mIGdsb2JhbFRoaXM8XCJ1XCI/Z2xvYmFsVGhpczp0eXBlb2Ygd2luZG93PFwidVwiP3dpbmRvdzp0eXBlb2YgZ2xvYmFsPFwidVwiP2dsb2JhbDp0eXBlb2Ygc2VsZjxcInVcIj9zZWxmOnt9O2Z1bmN0aW9uIGYoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZSYmT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJkZWZhdWx0XCIpP2UuZGVmYXVsdDplfW8oZixcImdldERlZmF1bHRFeHBvcnRGcm9tQ2pzXCIpO2V4cG9ydHtuIGFzIGMsZiBhcyBnfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native-with-agent/dist/shared/node-fetch-native-with-agent.1a4a356d.mjs\n");

/***/ })

};
;